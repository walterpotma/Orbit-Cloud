{
  "openapi": "3.0.3",
  "info": {
    "title": "Vercel SDK",
    "description": "The [`@vercel/sdk`](https://www.npmjs.com/package/@vercel/sdk) is a type-safe Typescript SDK that allows you to access the resources and methods of the Vercel REST API. Learn how to [install it](https://vercel.com/docs/rest-api/sdk#installing-vercel-sdk) and [authenticate](https://vercel.com/docs/rest-api/sdk#authentication) with a Vercel access token.",
    "contact": {
      "email": "support@vercel.com",
      "name": "Vercel Support",
      "url": "https://vercel.com/support"
    },
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://api.vercel.com",
      "description": "Production API"
    }
  ],
  "paths": {
    "/v1/access-groups/{idOrName}": {
      "get": {
        "description": "Allows to read an access group",
        "operationId": "readAccessGroup",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Reads an access group",
        "tags": [
          "access-groups"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "teamPermissions": {
                      "items": {
                        "type": "string",
                        "enum": [
                          "IntegrationManager",
                          "CreateProject",
                          "FullProductionDeployment",
                          "UsageViewer",
                          "EnvVariableManager",
                          "EnvironmentManager",
                          "V0Builder",
                          "V0Chatter",
                          "V0Viewer"
                        ]
                      },
                      "type": "array"
                    },
                    "entitlements": {
                      "items": {
                        "type": "string",
                        "enum": [
                          "v0"
                        ]
                      },
                      "type": "array"
                    },
                    "isDsyncManaged": {
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of this access group.",
                      "example": "my-access-group"
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Timestamp in milliseconds when the access group was created.",
                      "example": 1588720733602
                    },
                    "teamId": {
                      "type": "string",
                      "description": "ID of the team that this access group belongs to.",
                      "example": "team_123a6c5209bc3778245d011443644c8d27dc2c50"
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Timestamp in milliseconds when the access group was last updated.",
                      "example": 1588720733602
                    },
                    "accessGroupId": {
                      "type": "string",
                      "description": "ID of the access group.",
                      "example": "ag_123a6c5209bc3778245d011443644c8d27dc2c50"
                    },
                    "membersCount": {
                      "type": "number",
                      "description": "Number of members in the access group.",
                      "example": 5
                    },
                    "projectsCount": {
                      "type": "number",
                      "description": "Number of projects in the access group.",
                      "example": 2
                    },
                    "teamRoles": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "Roles that the team has in the access group.",
                      "example": [
                        "DEVELOPER",
                        "BILLING"
                      ]
                    }
                  },
                  "required": [
                    "isDsyncManaged",
                    "name",
                    "createdAt",
                    "teamId",
                    "updatedAt",
                    "accessGroupId",
                    "membersCount",
                    "projectsCount"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "id": {
                "summary": "Access group ID",
                "value": "ag_1a2b3c4d5e6f7g8h9i0j"
              },
              "name": {
                "summary": "Access group name",
                "value": "My Access Group"
              }
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "post": {
        "description": "Allows to update an access group metadata",
        "operationId": "updateAccessGroup",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update an access group",
        "tags": [
          "access-groups"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "entitlements": {
                      "items": {
                        "type": "string",
                        "enum": [
                          "v0"
                        ]
                      },
                      "type": "array"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of this access group.",
                      "example": "my-access-group"
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Timestamp in milliseconds when the access group was created.",
                      "example": 1588720733602
                    },
                    "teamId": {
                      "type": "string",
                      "description": "ID of the team that this access group belongs to.",
                      "example": "team_123a6c5209bc3778245d011443644c8d27dc2c50"
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Timestamp in milliseconds when the access group was last updated.",
                      "example": 1588720733602
                    },
                    "accessGroupId": {
                      "type": "string",
                      "description": "ID of the access group.",
                      "example": "ag_123a6c5209bc3778245d011443644c8d27dc2c50"
                    },
                    "membersCount": {
                      "type": "number",
                      "description": "Number of members in the access group.",
                      "example": 5
                    },
                    "projectsCount": {
                      "type": "number",
                      "description": "Number of projects in the access group.",
                      "example": 2
                    },
                    "teamRoles": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "Roles that the team has in the access group.",
                      "example": [
                        "DEVELOPER",
                        "BILLING"
                      ]
                    },
                    "teamPermissions": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "Permissions that the team has in the access group.",
                      "example": [
                        "CreateProject"
                      ]
                    }
                  },
                  "required": [
                    "entitlements",
                    "name",
                    "createdAt",
                    "teamId",
                    "updatedAt",
                    "accessGroupId",
                    "membersCount",
                    "projectsCount"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the access group",
                    "maxLength": 50,
                    "pattern": "^[A-z0-9_ -]+$",
                    "example": "My access group"
                  },
                  "projects": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "role",
                        "projectId"
                      ],
                      "properties": {
                        "projectId": {
                          "type": "string",
                          "maxLength": 256,
                          "example": "prj_ndlgr43fadlPyCtREAqxxdyFK",
                          "description": "The ID of the project."
                        },
                        "role": {
                          "type": "string",
                          "enum": [
                            "ADMIN",
                            "PROJECT_VIEWER",
                            "PROJECT_DEVELOPER",
                            null
                          ],
                          "example": "ADMIN",
                          "description": "The project role that will be added to this Access Group. \\\"null\\\" will remove this project level role.",
                          "nullable": true
                        }
                      }
                    }
                  },
                  "membersToAdd": {
                    "description": "List of members to add to the access group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "usr_1a2b3c4d5e6f7g8h9i0j",
                      "usr_2b3c4d5e6f7g8h9i0j1k"
                    ]
                  },
                  "membersToRemove": {
                    "description": "List of members to remove from the access group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "usr_1a2b3c4d5e6f7g8h9i0j",
                      "usr_2b3c4d5e6f7g8h9i0j1k"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "description": "Allows to delete an access group",
        "operationId": "deleteAccessGroup",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Deletes an access group",
        "tags": [
          "access-groups"
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/access-groups/{idOrName}/members": {
      "get": {
        "description": "List members of an access group",
        "operationId": "listAccessGroupMembers",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List members of an access group",
        "tags": [
          "access-groups"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "members": {
                      "items": {
                        "properties": {
                          "avatar": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "uid": {
                            "type": "string"
                          },
                          "username": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "teamRole": {
                            "type": "string",
                            "enum": [
                              "OWNER",
                              "MEMBER",
                              "DEVELOPER",
                              "SECURITY",
                              "BILLING",
                              "VIEWER",
                              "VIEWER_FOR_PLUS",
                              "CONTRIBUTOR"
                            ]
                          }
                        },
                        "required": [
                          "email",
                          "uid",
                          "username",
                          "teamRole"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "properties": {
                        "count": {
                          "type": "number"
                        },
                        "next": {
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "required": [
                        "count",
                        "next"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "members",
                    "pagination"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The ID or name of the Access Group.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID or name of the Access Group.",
              "example": "ag_pavWOn1iLObbXLRiwVvzmPrTWyTf"
            }
          },
          {
            "name": "limit",
            "description": "Limit how many access group members should be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Limit how many access group members should be returned.",
              "example": 20,
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "next",
            "description": "Continuation cursor to retrieve the next page of results.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Continuation cursor to retrieve the next page of results.",
              "type": "string"
            }
          },
          {
            "name": "search",
            "description": "Search project members by their name, username, and email.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Search project members by their name, username, and email.",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/access-groups": {
      "get": {
        "description": "List access groups",
        "operationId": "listAccessGroups",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List access groups for a team, project or member",
        "tags": [
          "access-groups"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object"
                    },
                    {
                      "properties": {
                        "accessGroups": {
                          "items": {
                            "properties": {
                              "members": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "projects": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "entitlements": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "teamPermissions": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "isDsyncManaged": {
                                "type": "boolean"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of this access group.",
                                "example": "my-access-group"
                              },
                              "createdAt": {
                                "type": "string",
                                "description": "Timestamp in milliseconds when the access group was created.",
                                "example": 1588720733602
                              },
                              "teamId": {
                                "type": "string",
                                "description": "ID of the team that this access group belongs to.",
                                "example": "team_123a6c5209bc3778245d011443644c8d27dc2c50"
                              },
                              "updatedAt": {
                                "type": "string",
                                "description": "Timestamp in milliseconds when the access group was last updated.",
                                "example": 1588720733602
                              },
                              "accessGroupId": {
                                "type": "string",
                                "description": "ID of the access group.",
                                "example": "ag_123a6c5209bc3778245d011443644c8d27dc2c50"
                              },
                              "membersCount": {
                                "type": "number",
                                "description": "Number of members in the access group.",
                                "example": 5
                              },
                              "projectsCount": {
                                "type": "number",
                                "description": "Number of projects in the access group.",
                                "example": 2
                              },
                              "teamRoles": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array",
                                "description": "Roles that the team has in the access group.",
                                "example": [
                                  "DEVELOPER",
                                  "BILLING"
                                ]
                              }
                            },
                            "required": [
                              "isDsyncManaged",
                              "name",
                              "createdAt",
                              "teamId",
                              "updatedAt",
                              "accessGroupId",
                              "membersCount",
                              "projectsCount"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "pagination": {
                          "properties": {
                            "count": {
                              "type": "number"
                            },
                            "next": {
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "required": [
                            "count",
                            "next"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "accessGroups",
                        "pagination"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "Filter access groups by project.",
            "in": "query",
            "schema": {
              "description": "Filter access groups by project.",
              "example": "prj_pavWOn1iLObbx3RowVvzmPrTWyTf",
              "type": "string"
            }
          },
          {
            "name": "search",
            "description": "Search for access groups by name.",
            "in": "query",
            "schema": {
              "description": "Search for access groups by name.",
              "example": "example",
              "type": "string"
            }
          },
          {
            "name": "membersLimit",
            "description": "Number of members to include in the response.",
            "in": "query",
            "schema": {
              "description": "Number of members to include in the response.",
              "example": 20,
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "projectsLimit",
            "description": "Number of projects to include in the response.",
            "in": "query",
            "schema": {
              "description": "Number of projects to include in the response.",
              "example": 20,
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "limit",
            "description": "Limit how many access group should be returned.",
            "in": "query",
            "schema": {
              "description": "Limit how many access group should be returned.",
              "example": 20,
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "next",
            "description": "Continuation cursor to retrieve the next page of results.",
            "in": "query",
            "schema": {
              "description": "Continuation cursor to retrieve the next page of results.",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "post": {
        "description": "Allows to create an access group",
        "operationId": "createAccessGroup",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Creates an access group",
        "tags": [
          "access-groups"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "entitlements": {
                      "items": {
                        "type": "string",
                        "enum": [
                          "v0"
                        ]
                      },
                      "type": "array"
                    },
                    "membersCount": {
                      "type": "number"
                    },
                    "projectsCount": {
                      "type": "number"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of this access group.",
                      "example": "my-access-group"
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Timestamp in milliseconds when the access group was created.",
                      "example": 1588720733602
                    },
                    "teamId": {
                      "type": "string",
                      "description": "ID of the team that this access group belongs to.",
                      "example": "team_123a6c5209bc3778245d011443644c8d27dc2c50"
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Timestamp in milliseconds when the access group was last updated.",
                      "example": 1588720733602
                    },
                    "accessGroupId": {
                      "type": "string",
                      "description": "ID of the access group.",
                      "example": "ag_123a6c5209bc3778245d011443644c8d27dc2c50"
                    },
                    "teamRoles": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "Roles that the team has in the access group.",
                      "example": [
                        "DEVELOPER",
                        "BILLING"
                      ]
                    },
                    "teamPermissions": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "Permissions that the team has in the access group.",
                      "example": [
                        "CreateProject"
                      ]
                    }
                  },
                  "required": [
                    "entitlements",
                    "membersCount",
                    "projectsCount",
                    "name",
                    "createdAt",
                    "teamId",
                    "updatedAt",
                    "accessGroupId"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the access group",
                    "maxLength": 50,
                    "pattern": "^[A-z0-9_ -]+$",
                    "example": "My access group"
                  },
                  "projects": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "role",
                        "projectId"
                      ],
                      "properties": {
                        "projectId": {
                          "type": "string",
                          "maxLength": 256,
                          "example": "prj_ndlgr43fadlPyCtREAqxxdyFK",
                          "description": "The ID of the project."
                        },
                        "role": {
                          "type": "string",
                          "enum": [
                            "ADMIN",
                            "PROJECT_VIEWER",
                            "PROJECT_DEVELOPER"
                          ],
                          "example": "ADMIN",
                          "description": "The project role that will be added to this Access Group. \\\"null\\\" will remove this project level role.",
                          "nullable": true
                        }
                      }
                    }
                  },
                  "membersToAdd": {
                    "description": "List of members to add to the access group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "usr_1a2b3c4d5e6f7g8h9i0j",
                      "usr_2b3c4d5e6f7g8h9i0j1k"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/access-groups/{idOrName}/projects": {
      "get": {
        "description": "List projects of an access group",
        "operationId": "listAccessGroupProjects",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List projects of an access group",
        "tags": [
          "access-groups"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "projects": {
                      "items": {
                        "properties": {
                          "projectId": {
                            "type": "string"
                          },
                          "role": {
                            "type": "string",
                            "enum": [
                              "ADMIN",
                              "PROJECT_DEVELOPER",
                              "PROJECT_VIEWER"
                            ]
                          },
                          "createdAt": {
                            "type": "string"
                          },
                          "updatedAt": {
                            "type": "string"
                          },
                          "project": {
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "framework": {
                                "nullable": true,
                                "type": "string"
                              },
                              "latestDeploymentId": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": [
                          "projectId",
                          "role",
                          "createdAt",
                          "updatedAt",
                          "project"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "properties": {
                        "count": {
                          "type": "number"
                        },
                        "next": {
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "required": [
                        "count",
                        "next"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "projects",
                    "pagination"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The ID or name of the Access Group.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID or name of the Access Group.",
              "example": "ag_pavWOn1iLObbXLRiwVvzmPrTWyTf"
            }
          },
          {
            "name": "limit",
            "description": "Limit how many access group projects should be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Limit how many access group projects should be returned.",
              "example": 20,
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "next",
            "description": "Continuation cursor to retrieve the next page of results.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Continuation cursor to retrieve the next page of results.",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/access-groups/{accessGroupIdOrName}/projects": {
      "post": {
        "description": "Allows creation of an access group project",
        "operationId": "createAccessGroupProject",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create an access group project",
        "tags": [
          "access-groups"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "teamId": {
                      "type": "string"
                    },
                    "accessGroupId": {
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "ADMIN",
                        "PROJECT_DEVELOPER",
                        "PROJECT_VIEWER"
                      ]
                    },
                    "createdAt": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "teamId",
                    "accessGroupId",
                    "projectId",
                    "role",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "accessGroupIdOrName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "role",
                  "projectId"
                ],
                "properties": {
                  "projectId": {
                    "type": "string",
                    "maxLength": 256,
                    "example": "prj_ndlgr43fadlPyCtREAqxxdyFK",
                    "description": "The ID of the project."
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "PROJECT_VIEWER",
                      "PROJECT_DEVELOPER"
                    ],
                    "example": "ADMIN",
                    "description": "The project role that will be added to this Access Group."
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/access-groups/{accessGroupIdOrName}/projects/{projectId}": {
      "get": {
        "description": "Allows reading an access group project",
        "operationId": "readAccessGroupProject",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Reads an access group project",
        "tags": [
          "access-groups"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "teamId": {
                      "type": "string"
                    },
                    "accessGroupId": {
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "ADMIN",
                        "PROJECT_DEVELOPER",
                        "PROJECT_VIEWER"
                      ]
                    },
                    "createdAt": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "teamId",
                    "accessGroupId",
                    "projectId",
                    "role",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "accessGroupIdOrName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "id": {
                "summary": "Access group ID",
                "value": "ag_1a2b3c4d5e6f7g8h9i0j"
              },
              "name": {
                "summary": "Access group name",
                "value": "My Access Group"
              }
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "prj_ndlgr43fadlPyCtREAqxxdyFK"
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "patch": {
        "description": "Allows update of an access group project",
        "operationId": "updateAccessGroupProject",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update an access group project",
        "tags": [
          "access-groups"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "teamId": {
                      "type": "string"
                    },
                    "accessGroupId": {
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "ADMIN",
                        "PROJECT_DEVELOPER",
                        "PROJECT_VIEWER"
                      ]
                    },
                    "createdAt": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "teamId",
                    "accessGroupId",
                    "projectId",
                    "role",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "accessGroupIdOrName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "id": {
                "summary": "Access group ID",
                "value": "ag_1a2b3c4d5e6f7g8h9i0j"
              },
              "name": {
                "summary": "Access group name",
                "value": "My Access Group"
              }
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "prj_ndlgr43fadlPyCtREAqxxdyFK"
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "PROJECT_VIEWER",
                      "PROJECT_DEVELOPER"
                    ],
                    "example": "ADMIN",
                    "description": "The project role that will be added to this Access Group."
                  }
                }
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "description": "Allows deletion of an access group project",
        "operationId": "deleteAccessGroupProject",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete an access group project",
        "tags": [
          "access-groups"
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "accessGroupIdOrName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "id": {
                "summary": "Access group ID",
                "value": "ag_1a2b3c4d5e6f7g8h9i0j"
              },
              "name": {
                "summary": "Access group name",
                "value": "My Access Group"
              }
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "prj_ndlgr43fadlPyCtREAqxxdyFK"
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v8/artifacts/events": {
      "post": {
        "description": "Records an artifacts cache usage event. The body of this request is an array of cache usage events. The supported event types are `HIT` and `MISS`. The source is either `LOCAL` the cache event was on the users filesystem cache or `REMOTE` if the cache event is for a remote cache. When the event is a `HIT` the request also accepts a number `duration` which is the time taken to generate the artifact in the cache.",
        "operationId": "recordEvents",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Record an artifacts cache usage event",
        "tags": [
          "artifacts"
        ],
        "responses": {
          "200": {
            "description": "Success. Event recorded."
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the headers is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.\nThe Remote Caching usage limit has been reached for this account for this billing cycle.\nRemote Caching has been disabled for this team or user. An owner can enable it in the billing settings.\nYou do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The continuous integration or delivery environment where this artifact is downloaded.",
            "schema": {
              "type": "string",
              "description": "The continuous integration or delivery environment where this artifact is downloaded.",
              "example": "VERCEL",
              "maxLength": 50
            },
            "name": "x-artifact-client-ci"
          },
          {
            "in": "header",
            "description": "1 if the client is an interactive shell. Otherwise 0",
            "schema": {
              "type": "integer",
              "description": "1 if the client is an interactive shell. Otherwise 0",
              "example": 0,
              "minimum": 0,
              "maximum": 1
            },
            "name": "x-artifact-client-interactive"
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "sessionId",
                    "source",
                    "hash",
                    "event"
                  ],
                  "properties": {
                    "sessionId": {
                      "type": "string",
                      "description": "A UUID (universally unique identifer) for the session that generated this event."
                    },
                    "source": {
                      "type": "string",
                      "enum": [
                        "LOCAL",
                        "REMOTE"
                      ],
                      "description": "One of `LOCAL` or `REMOTE`. `LOCAL` specifies that the cache event was from the user's filesystem cache. `REMOTE` specifies that the cache event is from a remote cache."
                    },
                    "event": {
                      "type": "string",
                      "enum": [
                        "HIT",
                        "MISS"
                      ],
                      "description": "One of `HIT` or `MISS`. `HIT` specifies that a cached artifact for `hash` was found in the cache. `MISS` specifies that a cached artifact with `hash` was not found."
                    },
                    "hash": {
                      "type": "string",
                      "example": "12HKQaOmR5t5Uy6vdcQsNIiZgHGB",
                      "description": "The artifact hash"
                    },
                    "duration": {
                      "type": "number",
                      "description": "The time taken to generate the artifact. This should be sent as a body parameter on `HIT` events.",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v8/artifacts/status": {
      "get": {
        "description": "Check the status of Remote Caching for this principal. Returns a JSON-encoded status indicating if Remote Caching is enabled, disabled, or disabled due to usage limits.",
        "operationId": "status",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get status of Remote Caching for this principal",
        "tags": [
          "artifacts"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "disabled",
                        "enabled",
                        "over_limit",
                        "paused"
                      ]
                    }
                  },
                  "required": [
                    "status"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v8/artifacts/{hash}": {
      "put": {
        "description": "Uploads a cache artifact identified by the `hash` specified on the path. The cache artifact can then be downloaded with the provided `hash`.",
        "operationId": "uploadArtifact",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Upload a cache artifact",
        "tags": [
          "artifacts"
        ],
        "responses": {
          "202": {
            "description": "File successfully uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "urls": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "Array of URLs where the artifact was updated",
                      "example": [
                        "https://api.vercel.com/v2/now/artifact/12HKQaOmR5t5Uy6vdcQsNIiZgHGB"
                      ]
                    }
                  },
                  "required": [
                    "urls"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.\nOne of the provided values in the headers is invalid\nFile size is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.\nThe Remote Caching usage limit has been reached for this account for this billing cycle.\nRemote Caching has been disabled for this team or user. An owner can enable it in the billing settings.\nYou do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The artifact size in bytes",
            "required": true,
            "schema": {
              "description": "The artifact size in bytes",
              "type": "number"
            },
            "name": "Content-Length"
          },
          {
            "in": "header",
            "description": "The time taken to generate the uploaded artifact in milliseconds.",
            "required": false,
            "schema": {
              "type": "number",
              "description": "The time taken to generate the uploaded artifact in milliseconds.",
              "example": 400
            },
            "name": "x-artifact-duration"
          },
          {
            "in": "header",
            "description": "The continuous integration or delivery environment where this artifact was generated.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The continuous integration or delivery environment where this artifact was generated.",
              "example": "VERCEL",
              "maxLength": 50
            },
            "name": "x-artifact-client-ci"
          },
          {
            "in": "header",
            "description": "1 if the client is an interactive shell. Otherwise 0",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "1 if the client is an interactive shell. Otherwise 0",
              "example": 0,
              "minimum": 0,
              "maximum": 1
            },
            "name": "x-artifact-client-interactive"
          },
          {
            "in": "header",
            "description": "The base64 encoded tag for this artifact. The value is sent back to clients when the artifact is downloaded as the header `x-artifact-tag`",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The base64 encoded tag for this artifact. The value is sent back to clients when the artifact is downloaded as the header `x-artifact-tag`",
              "example": "Tc0BmHvJYMIYJ62/zx87YqO0Flxk+5Ovip25NY825CQ=",
              "maxLength": 600
            },
            "name": "x-artifact-tag"
          },
          {
            "name": "hash",
            "description": "The artifact hash",
            "in": "path",
            "required": true,
            "schema": {
              "example": "12HKQaOmR5t5Uy6vdcQsNIiZgHGB",
              "description": "The artifact hash",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "x-speakeasy-test": false
      },
      "get": {
        "description": "Downloads a cache artifact indentified by its `hash` specified on the request path. The artifact is downloaded as an octet-stream. The client should verify the content-length header and response body.",
        "operationId": "downloadArtifact",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Download a cache artifact",
        "tags": [
          "artifacts"
        ],
        "responses": {
          "200": {
            "description": "The artifact was found and is downloaded as a stream. Content-Length should be verified.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "An octet stream response that will be piped to the response stream."
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.\nOne of the provided values in the headers is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.\nThe Remote Caching usage limit has been reached for this account for this billing cycle.\nRemote Caching has been disabled for this team or user. An owner can enable it in the billing settings.\nYou do not have permission to access this resource."
          },
          "404": {
            "description": "The artifact was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The continuous integration or delivery environment where this artifact is downloaded.",
            "schema": {
              "type": "string",
              "description": "The continuous integration or delivery environment where this artifact is downloaded.",
              "example": "VERCEL",
              "maxLength": 50
            },
            "name": "x-artifact-client-ci"
          },
          {
            "in": "header",
            "description": "1 if the client is an interactive shell. Otherwise 0",
            "schema": {
              "type": "integer",
              "description": "1 if the client is an interactive shell. Otherwise 0",
              "example": 0,
              "minimum": 0,
              "maximum": 1
            },
            "name": "x-artifact-client-interactive"
          },
          {
            "name": "hash",
            "description": "The artifact hash",
            "in": "path",
            "required": true,
            "schema": {
              "example": "12HKQaOmR5t5Uy6vdcQsNIiZgHGB",
              "description": "The artifact hash",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "head": {
        "description": "Check that a cache artifact with the given `hash` exists. This request returns response headers only and is equivalent to a `GET` request to this endpoint where the response contains no body.",
        "operationId": "artifactExists",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Check if a cache artifact exists",
        "tags": [
          "artifacts"
        ],
        "responses": {
          "200": {
            "description": "The artifact was found and headers are returned"
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.\nThe Remote Caching usage limit has been reached for this account for this billing cycle.\nRemote Caching has been disabled for this team or user. An owner can enable it in the billing settings.\nYou do not have permission to access this resource."
          },
          "404": {
            "description": "The artifact was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "hash",
            "description": "The artifact hash",
            "in": "path",
            "required": true,
            "schema": {
              "example": "12HKQaOmR5t5Uy6vdcQsNIiZgHGB",
              "description": "The artifact hash",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v8/artifacts": {
      "post": {
        "description": "Query information about an array of artifacts.",
        "operationId": "artifactQuery",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Query information about an artifact",
        "tags": [
          "artifacts"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "nullable": true,
                    "oneOf": [
                      {
                        "properties": {
                          "size": {
                            "type": "number"
                          },
                          "taskDurationMs": {
                            "type": "number"
                          },
                          "tag": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "size",
                          "taskDurationMs"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "error": {
                            "properties": {
                              "message": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "message"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "error"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "The customer has reached their spend cap limit and has been paused. An owner can disable the cap or raise the limit in settings.\nThe Remote Caching usage limit has been reached for this account for this billing cycle.\nRemote Caching has been disabled for this team or user. An owner can enable it in the billing settings.\nYou do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "hashes"
                ],
                "properties": {
                  "hashes": {
                    "items": {
                      "type": "string"
                    },
                    "description": "artifact hashes",
                    "type": "array",
                    "example": [
                      "12HKQaOmR5t5Uy6vdcQsNIiZgHGB",
                      "34HKQaOmR5t5Uy6vasdasdasdasd"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/deployments/{deploymentId}/checks": {
      "post": {
        "description": "Creates a new check. This endpoint must be called with an OAuth2 or it will produce a 400 error.",
        "operationId": "createCheck",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Creates a new Check",
        "tags": [
          "checks"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "chk_1a2b3c4d5e6f7g8h9i0j"
                    },
                    "name": {
                      "type": "string",
                      "example": "Performance Check"
                    },
                    "path": {
                      "type": "string",
                      "example": "/api/users"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "registered",
                        "running",
                        "completed"
                      ],
                      "example": "completed"
                    },
                    "conclusion": {
                      "type": "string",
                      "enum": [
                        "canceled",
                        "failed",
                        "neutral",
                        "succeeded",
                        "skipped",
                        "stale"
                      ],
                      "example": "succeeded"
                    },
                    "blocking": {
                      "type": "boolean"
                    },
                    "output": {
                      "properties": {
                        "metrics": {
                          "properties": {
                            "FCP": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            },
                            "LCP": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            },
                            "CLS": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            },
                            "TBT": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            },
                            "virtualExperienceScore": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "FCP",
                            "LCP",
                            "CLS",
                            "TBT"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "detailsUrl": {
                      "type": "string"
                    },
                    "integrationId": {
                      "type": "string"
                    },
                    "deploymentId": {
                      "type": "string"
                    },
                    "externalId": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "startedAt": {
                      "type": "number"
                    },
                    "completedAt": {
                      "type": "number"
                    },
                    "rerequestable": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "status",
                    "blocking",
                    "integrationId",
                    "deploymentId",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nCannot create check for finished deployment\nThe provided token is not from an OAuth2 Client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The deployment was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "description": "The deployment to create the check for.",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The deployment to create the check for.",
              "example": "dpl_2qn7PZrx89yxY34vEZPD31Y9XVj6",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of the check being created",
                    "maxLength": 100,
                    "example": "Performance Check",
                    "type": "string"
                  },
                  "path": {
                    "description": "Path of the page that is being checked",
                    "type": "string",
                    "maxLength": 255,
                    "example": "/"
                  },
                  "blocking": {
                    "description": "Whether the check should block a deployment from succeeding",
                    "type": "boolean",
                    "example": true
                  },
                  "detailsUrl": {
                    "description": "URL to display for further details",
                    "type": "string",
                    "example": "http://example.com"
                  },
                  "externalId": {
                    "description": "An identifier that can be used as an external reference",
                    "type": "string",
                    "example": "1234abc"
                  },
                  "rerequestable": {
                    "description": "Whether a user should be able to request for the check to be rerun if it fails",
                    "type": "boolean",
                    "example": true
                  }
                },
                "required": [
                  "name",
                  "blocking"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        }
      },
      "get": {
        "description": "List all of the checks created for a deployment.",
        "operationId": "getAllChecks",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Retrieve a list of all checks",
        "tags": [
          "checks"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "checks": {
                      "items": {
                        "properties": {
                          "completedAt": {
                            "type": "number"
                          },
                          "conclusion": {
                            "type": "string",
                            "enum": [
                              "canceled",
                              "failed",
                              "neutral",
                              "succeeded",
                              "skipped",
                              "stale"
                            ]
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "detailsUrl": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "integrationId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "output": {
                            "properties": {
                              "metrics": {
                                "properties": {
                                  "FCP": {
                                    "properties": {
                                      "value": {
                                        "nullable": true,
                                        "type": "number"
                                      },
                                      "previousValue": {
                                        "type": "number"
                                      },
                                      "source": {
                                        "type": "string",
                                        "enum": [
                                          "web-vitals"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "value",
                                      "source"
                                    ],
                                    "type": "object"
                                  },
                                  "LCP": {
                                    "properties": {
                                      "value": {
                                        "nullable": true,
                                        "type": "number"
                                      },
                                      "previousValue": {
                                        "type": "number"
                                      },
                                      "source": {
                                        "type": "string",
                                        "enum": [
                                          "web-vitals"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "value",
                                      "source"
                                    ],
                                    "type": "object"
                                  },
                                  "CLS": {
                                    "properties": {
                                      "value": {
                                        "nullable": true,
                                        "type": "number"
                                      },
                                      "previousValue": {
                                        "type": "number"
                                      },
                                      "source": {
                                        "type": "string",
                                        "enum": [
                                          "web-vitals"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "value",
                                      "source"
                                    ],
                                    "type": "object"
                                  },
                                  "TBT": {
                                    "properties": {
                                      "value": {
                                        "nullable": true,
                                        "type": "number"
                                      },
                                      "previousValue": {
                                        "type": "number"
                                      },
                                      "source": {
                                        "type": "string",
                                        "enum": [
                                          "web-vitals"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "value",
                                      "source"
                                    ],
                                    "type": "object"
                                  },
                                  "virtualExperienceScore": {
                                    "properties": {
                                      "value": {
                                        "nullable": true,
                                        "type": "number"
                                      },
                                      "previousValue": {
                                        "type": "number"
                                      },
                                      "source": {
                                        "type": "string",
                                        "enum": [
                                          "web-vitals"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "value",
                                      "source"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "FCP",
                                  "LCP",
                                  "CLS",
                                  "TBT"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "path": {
                            "type": "string"
                          },
                          "rerequestable": {
                            "type": "boolean"
                          },
                          "blocking": {
                            "type": "boolean"
                          },
                          "startedAt": {
                            "type": "number"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "registered",
                              "running",
                              "completed"
                            ]
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "createdAt",
                          "id",
                          "integrationId",
                          "name",
                          "rerequestable",
                          "blocking",
                          "status",
                          "updatedAt"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "checks"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The deployment was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "description": "The deployment to get all checks for",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The deployment to get all checks for",
              "example": "dpl_2qn7PZrx89yxY34vEZPD31Y9XVj6",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/deployments/{deploymentId}/checks/{checkId}": {
      "get": {
        "description": "Return a detailed response for a single check.",
        "operationId": "getCheck",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get a single check",
        "tags": [
          "checks"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "registered",
                        "running",
                        "completed"
                      ]
                    },
                    "conclusion": {
                      "type": "string",
                      "enum": [
                        "canceled",
                        "failed",
                        "neutral",
                        "succeeded",
                        "skipped",
                        "stale"
                      ]
                    },
                    "blocking": {
                      "type": "boolean"
                    },
                    "output": {
                      "properties": {
                        "metrics": {
                          "properties": {
                            "FCP": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            },
                            "LCP": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            },
                            "CLS": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            },
                            "TBT": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            },
                            "virtualExperienceScore": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "FCP",
                            "LCP",
                            "CLS",
                            "TBT"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "detailsUrl": {
                      "type": "string"
                    },
                    "integrationId": {
                      "type": "string"
                    },
                    "deploymentId": {
                      "type": "string"
                    },
                    "externalId": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "startedAt": {
                      "type": "number"
                    },
                    "completedAt": {
                      "type": "number"
                    },
                    "rerequestable": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "status",
                    "blocking",
                    "integrationId",
                    "deploymentId",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource.\nThe provided token is not from an OAuth2 Client that created the Check"
          },
          "404": {
            "description": "Check was not found\nThe deployment was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "description": "The deployment to get the check for.",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The deployment to get the check for.",
              "example": "dpl_2qn7PZrx89yxY34vEZPD31Y9XVj6",
              "type": "string"
            }
          },
          {
            "name": "checkId",
            "description": "The check to fetch",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The check to fetch",
              "example": "check_2qn7PZrx89yxY34vEZPD31Y9XVj6",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "patch": {
        "description": "Update an existing check. This endpoint must be called with an OAuth2 or it will produce a 400 error.",
        "operationId": "updateCheck",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update a check",
        "tags": [
          "checks"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "registered",
                        "running",
                        "completed"
                      ]
                    },
                    "conclusion": {
                      "type": "string",
                      "enum": [
                        "canceled",
                        "failed",
                        "neutral",
                        "succeeded",
                        "skipped",
                        "stale"
                      ]
                    },
                    "blocking": {
                      "type": "boolean"
                    },
                    "output": {
                      "properties": {
                        "metrics": {
                          "properties": {
                            "FCP": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            },
                            "LCP": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            },
                            "CLS": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            },
                            "TBT": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            },
                            "virtualExperienceScore": {
                              "properties": {
                                "value": {
                                  "nullable": true,
                                  "type": "number"
                                },
                                "previousValue": {
                                  "type": "number"
                                },
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "web-vitals"
                                  ]
                                }
                              },
                              "required": [
                                "value",
                                "source"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "FCP",
                            "LCP",
                            "CLS",
                            "TBT"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "detailsUrl": {
                      "type": "string"
                    },
                    "integrationId": {
                      "type": "string"
                    },
                    "deploymentId": {
                      "type": "string"
                    },
                    "externalId": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "startedAt": {
                      "type": "number"
                    },
                    "completedAt": {
                      "type": "number"
                    },
                    "rerequestable": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "status",
                    "blocking",
                    "integrationId",
                    "deploymentId",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nThe provided token is not from an OAuth2 Client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "Check was not found\nThe deployment was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "413": {
            "description": "The output provided is too large"
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "description": "The deployment to update the check for.",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The deployment to update the check for.",
              "example": "dpl_2qn7PZrx89yxY34vEZPD31Y9XVj6",
              "type": "string"
            }
          },
          {
            "name": "checkId",
            "description": "The check being updated",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The check being updated",
              "example": "check_2qn7PZrx89yxY34vEZPD31Y9XVj6",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of the check being created",
                    "maxLength": 100,
                    "example": "Performance Check",
                    "type": "string"
                  },
                  "path": {
                    "description": "Path of the page that is being checked",
                    "type": "string",
                    "maxLength": 255,
                    "example": "/"
                  },
                  "status": {
                    "description": "The current status of the check",
                    "enum": [
                      "running",
                      "completed"
                    ]
                  },
                  "conclusion": {
                    "description": "The result of the check being run",
                    "enum": [
                      "canceled",
                      "failed",
                      "neutral",
                      "succeeded",
                      "skipped"
                    ]
                  },
                  "detailsUrl": {
                    "description": "A URL a user may visit to see more information about the check",
                    "type": "string",
                    "example": "https://example.com/check/run/1234abc"
                  },
                  "output": {
                    "description": "The results of the check Run",
                    "type": "object",
                    "properties": {
                      "metrics": {
                        "type": "object",
                        "description": "Metrics about the page",
                        "required": [
                          "FCP",
                          "LCP",
                          "CLS",
                          "TBT"
                        ],
                        "additionalProperties": false,
                        "properties": {
                          "FCP": {
                            "type": "object",
                            "required": [
                              "value",
                              "source"
                            ],
                            "properties": {
                              "value": {
                                "type": "number",
                                "example": 1200,
                                "description": "First Contentful Paint value",
                                "nullable": true
                              },
                              "previousValue": {
                                "type": "number",
                                "example": 900,
                                "description": "Previous First Contentful Paint value to display a delta"
                              },
                              "source": {
                                "type": "string",
                                "enum": [
                                  "web-vitals"
                                ]
                              }
                            }
                          },
                          "LCP": {
                            "type": "object",
                            "required": [
                              "value",
                              "source"
                            ],
                            "properties": {
                              "value": {
                                "type": "number",
                                "example": 1200,
                                "description": "Largest Contentful Paint value",
                                "nullable": true
                              },
                              "previousValue": {
                                "type": "number",
                                "example": 1000,
                                "description": "Previous Largest Contentful Paint value to display a delta"
                              },
                              "source": {
                                "type": "string",
                                "enum": [
                                  "web-vitals"
                                ]
                              }
                            }
                          },
                          "CLS": {
                            "type": "object",
                            "required": [
                              "value",
                              "source"
                            ],
                            "properties": {
                              "value": {
                                "type": "number",
                                "example": 4,
                                "description": "Cumulative Layout Shift value",
                                "nullable": true
                              },
                              "previousValue": {
                                "type": "number",
                                "example": 2,
                                "description": "Previous Cumulative Layout Shift value to display a delta"
                              },
                              "source": {
                                "type": "string",
                                "enum": [
                                  "web-vitals"
                                ]
                              }
                            }
                          },
                          "TBT": {
                            "type": "object",
                            "required": [
                              "value",
                              "source"
                            ],
                            "properties": {
                              "value": {
                                "type": "number",
                                "example": 3000,
                                "description": "Total Blocking Time value",
                                "nullable": true
                              },
                              "previousValue": {
                                "type": "number",
                                "example": 3500,
                                "description": "Previous Total Blocking Time value to display a delta"
                              },
                              "source": {
                                "enum": [
                                  "web-vitals"
                                ]
                              }
                            }
                          },
                          "virtualExperienceScore": {
                            "type": "object",
                            "required": [
                              "value",
                              "source"
                            ],
                            "properties": {
                              "value": {
                                "type": "integer",
                                "maximum": 100,
                                "minimum": 0,
                                "example": 30,
                                "description": "The calculated Virtual Experience Score value, between 0 and 100",
                                "nullable": true
                              },
                              "previousValue": {
                                "type": "integer",
                                "maximum": 100,
                                "minimum": 0,
                                "example": 35,
                                "description": "A previous Virtual Experience Score value to display a delta, between 0 and 100"
                              },
                              "source": {
                                "enum": [
                                  "web-vitals"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "externalId": {
                    "description": "An identifier that can be used as an external reference",
                    "type": "string",
                    "example": "1234abc"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/deployments/{deploymentId}/checks/{checkId}/rerequest": {
      "post": {
        "description": "Rerequest a selected check that has failed.",
        "operationId": "rerequestCheck",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Rerequest a check",
        "tags": [
          "checks"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The deployment was not found\nCheck was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "description": "The deployment to rerun the check for.",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The deployment to rerun the check for.",
              "example": "dpl_2qn7PZrx89yxY34vEZPD31Y9XVj6",
              "type": "string"
            }
          },
          {
            "name": "checkId",
            "description": "The check to rerun",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The check to rerun",
              "example": "check_2qn7PZrx89yxY34vEZPD31Y9XVj6",
              "type": "string"
            }
          },
          {
            "name": "autoUpdate",
            "description": "Mark the check as running",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Mark the check as running",
              "type": "boolean"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/data-cache/projects/{projectId}": {
      "patch": {
        "description": "Update the data cache feature on a project.",
        "operationId": "updateProjectDataCache",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update the data cache feature",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accountId": {
                      "type": "string"
                    },
                    "analytics": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "canceledAt": {
                          "nullable": true,
                          "type": "number"
                        },
                        "disabledAt": {
                          "type": "number"
                        },
                        "enabledAt": {
                          "type": "number"
                        },
                        "paidAt": {
                          "type": "number"
                        },
                        "sampleRatePercent": {
                          "nullable": true,
                          "type": "number"
                        },
                        "spendLimitInDollars": {
                          "nullable": true,
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "disabledAt",
                        "enabledAt"
                      ],
                      "type": "object"
                    },
                    "speedInsights": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "enabledAt": {
                          "type": "number"
                        },
                        "disabledAt": {
                          "type": "number"
                        },
                        "canceledAt": {
                          "type": "number"
                        },
                        "hasData": {
                          "type": "boolean"
                        },
                        "paidAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    "autoExposeSystemEnvs": {
                      "type": "boolean"
                    },
                    "autoAssignCustomDomains": {
                      "type": "boolean"
                    },
                    "autoAssignCustomDomainsUpdatedBy": {
                      "type": "string"
                    },
                    "buildCommand": {
                      "nullable": true,
                      "type": "string"
                    },
                    "commandForIgnoringBuildStep": {
                      "nullable": true,
                      "type": "string"
                    },
                    "connectConfigurations": {
                      "nullable": true,
                      "items": {
                        "properties": {
                          "envId": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "preview",
                                  "production"
                                ]
                              }
                            ]
                          },
                          "connectConfigurationId": {
                            "type": "string"
                          },
                          "dc": {
                            "type": "string"
                          },
                          "passive": {
                            "type": "boolean"
                          },
                          "buildsEnabled": {
                            "type": "boolean"
                          },
                          "aws": {
                            "properties": {
                              "subnetIds": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "securityGroupId": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "subnetIds",
                              "securityGroupId"
                            ],
                            "type": "object"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "envId",
                          "connectConfigurationId",
                          "passive",
                          "buildsEnabled",
                          "createdAt",
                          "updatedAt"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "connectConfigurationId": {
                      "nullable": true,
                      "type": "string"
                    },
                    "connectBuildsEnabled": {
                      "type": "boolean"
                    },
                    "passiveConnectConfigurationId": {
                      "nullable": true,
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "customerSupportCodeVisibility": {
                      "type": "boolean"
                    },
                    "crons": {
                      "properties": {
                        "enabledAt": {
                          "type": "number",
                          "description": "The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs."
                        },
                        "disabledAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "The time the feature was disabled for this project."
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "deploymentId": {
                          "nullable": true,
                          "type": "string",
                          "description": "The ID of the Deployment from which the definitions originated."
                        },
                        "definitions": {
                          "items": {
                            "properties": {
                              "host": {
                                "type": "string",
                                "description": "The hostname that should be used.",
                                "example": "vercel.com"
                              },
                              "path": {
                                "type": "string",
                                "description": "The path that should be called for the cronjob.",
                                "example": "/api/crons/sync-something?hello=world"
                              },
                              "schedule": {
                                "type": "string",
                                "description": "The cron expression.",
                                "example": "0 0 * * *"
                              }
                            },
                            "required": [
                              "host",
                              "path",
                              "schedule"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "enabledAt",
                        "disabledAt",
                        "updatedAt",
                        "deploymentId",
                        "definitions"
                      ],
                      "type": "object"
                    },
                    "dataCache": {
                      "properties": {
                        "userDisabled": {
                          "type": "boolean"
                        },
                        "storageSizeBytes": {
                          "nullable": true,
                          "type": "number"
                        },
                        "unlimited": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "userDisabled"
                      ],
                      "type": "object"
                    },
                    "deploymentExpiration": {
                      "nullable": true,
                      "properties": {
                        "expirationDays": {
                          "type": "number",
                          "description": "Number of days to keep non-production deployments (mostly preview deployments) before soft deletion."
                        },
                        "expirationDaysProduction": {
                          "type": "number",
                          "description": "Number of days to keep production deployments before soft deletion."
                        },
                        "expirationDaysCanceled": {
                          "type": "number",
                          "description": "Number of days to keep canceled deployments before soft deletion."
                        },
                        "expirationDaysErrored": {
                          "type": "number",
                          "description": "Number of days to keep errored deployments before soft deletion."
                        },
                        "deploymentsToKeep": {
                          "type": "number",
                          "description": "Minimum number of production deployments to keep for this project, even if they are over the production expiration limit."
                        }
                      },
                      "type": "object",
                      "description": "Retention policies for deployments. These are enforced at the project level, but we also maintain an instance of this at the team level as a default policy that gets applied to new projects."
                    },
                    "devCommand": {
                      "nullable": true,
                      "type": "string"
                    },
                    "directoryListing": {
                      "type": "boolean"
                    },
                    "installCommand": {
                      "nullable": true,
                      "type": "string"
                    },
                    "env": {
                      "items": {
                        "properties": {
                          "target": {
                            "oneOf": [
                              {
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "production",
                                    "preview",
                                    "development"
                                  ]
                                },
                                "type": "array"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "production",
                                  "preview",
                                  "development"
                                ]
                              }
                            ]
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "secret",
                              "system",
                              "encrypted",
                              "plain",
                              "sensitive"
                            ]
                          },
                          "sunsetSecretId": {
                            "type": "string",
                            "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                          },
                          "decrypted": {
                            "type": "boolean"
                          },
                          "value": {
                            "type": "string"
                          },
                          "vsmValue": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "key": {
                            "type": "string"
                          },
                          "configurationId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          },
                          "createdBy": {
                            "nullable": true,
                            "type": "string"
                          },
                          "updatedBy": {
                            "nullable": true,
                            "type": "string"
                          },
                          "gitBranch": {
                            "type": "string"
                          },
                          "edgeConfigId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "edgeConfigTokenId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "contentHint": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-read-only-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "blob-read-write-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url-non-pooling"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-prisma-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-user"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-host"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-password"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-database"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url-no-ssl"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "integration-store-secret"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  },
                                  "integrationId": {
                                    "type": "string"
                                  },
                                  "integrationProductId": {
                                    "type": "string"
                                  },
                                  "integrationConfigurationId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId",
                                  "integrationId",
                                  "integrationProductId",
                                  "integrationConfigurationId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "flags-connection-string"
                                    ]
                                  },
                                  "projectId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "projectId"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "internalContentHint": {
                            "nullable": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "flags-secret"
                                ]
                              },
                              "encryptedValue": {
                                "type": "string",
                                "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                              }
                            },
                            "required": [
                              "type",
                              "encryptedValue"
                            ],
                            "type": "object",
                            "description": "Similar to `contentHints`, but should not be exposed to the user."
                          },
                          "comment": {
                            "type": "string"
                          },
                          "customEnvironmentIds": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "type",
                          "value",
                          "key"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "customEnvironments": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier for the custom environment (format: env_*)"
                          },
                          "slug": {
                            "type": "string",
                            "description": "URL-friendly name of the environment"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "preview",
                              "production",
                              "development"
                            ],
                            "description": "The type of environment (production, preview, or development)"
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional description of the environment's purpose"
                          },
                          "branchMatcher": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "endsWith",
                                  "startsWith",
                                  "equals"
                                ],
                                "description": "The type of matching to perform"
                              },
                              "pattern": {
                                "type": "string",
                                "description": "The pattern to match against branch names"
                              }
                            },
                            "required": [
                              "type",
                              "pattern"
                            ],
                            "type": "object",
                            "description": "Configuration for matching git branches to this environment"
                          },
                          "domains": {
                            "items": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "apexName": {
                                  "type": "string"
                                },
                                "projectId": {
                                  "type": "string"
                                },
                                "redirect": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "redirectStatusCode": {
                                  "nullable": true,
                                  "type": "number",
                                  "enum": [
                                    307,
                                    301,
                                    302,
                                    308
                                  ]
                                },
                                "gitBranch": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "customEnvironmentId": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "updatedAt": {
                                  "type": "number"
                                },
                                "createdAt": {
                                  "type": "number"
                                },
                                "verified": {
                                  "type": "boolean",
                                  "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                                },
                                "verification": {
                                  "items": {
                                    "properties": {
                                      "type": {
                                        "type": "string"
                                      },
                                      "domain": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "type": "string"
                                      },
                                      "reason": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "domain",
                                      "value",
                                      "reason"
                                    ],
                                    "type": "object",
                                    "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                  },
                                  "type": "array",
                                  "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                }
                              },
                              "required": [
                                "name",
                                "apexName",
                                "projectId",
                                "verified"
                              ],
                              "type": "object",
                              "description": "List of domains associated with this environment"
                            },
                            "type": "array",
                            "description": "List of domains associated with this environment"
                          },
                          "currentDeploymentAliases": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "List of aliases for the current deployment"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "Timestamp when the environment was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "Timestamp when the environment was last updated"
                          }
                        },
                        "required": [
                          "id",
                          "slug",
                          "type",
                          "createdAt",
                          "updatedAt"
                        ],
                        "type": "object",
                        "description": "Internal representation of a custom environment with all required properties"
                      },
                      "type": "array"
                    },
                    "framework": {
                      "nullable": true,
                      "type": "string",
                      "enum": [
                        "blitzjs",
                        "nextjs",
                        "gatsby",
                        "remix",
                        "react-router",
                        "astro",
                        "hexo",
                        "eleventy",
                        "docusaurus-2",
                        "docusaurus",
                        "preact",
                        "solidstart-1",
                        "solidstart",
                        "dojo",
                        "ember",
                        "vue",
                        "scully",
                        "ionic-angular",
                        "angular",
                        "polymer",
                        "svelte",
                        "sveltekit",
                        "sveltekit-1",
                        "ionic-react",
                        "create-react-app",
                        "gridsome",
                        "umijs",
                        "sapper",
                        "saber",
                        "stencil",
                        "nuxtjs",
                        "redwoodjs",
                        "hugo",
                        "jekyll",
                        "brunch",
                        "middleman",
                        "zola",
                        "hydrogen",
                        "vite",
                        "vitepress",
                        "vuepress",
                        "parcel",
                        "fastapi",
                        "fasthtml",
                        "sanity-v3",
                        "sanity",
                        "storybook",
                        "nitro",
                        "hono",
                        "express",
                        "xmcp"
                      ]
                    },
                    "gitForkProtection": {
                      "type": "boolean"
                    },
                    "gitLFS": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    },
                    "ipBuckets": {
                      "items": {
                        "properties": {
                          "bucket": {
                            "type": "string"
                          },
                          "supportUntil": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "bucket"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "latestDeployments": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "alias": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "aliasAssigned": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "boolean"
                              }
                            ]
                          },
                          "aliasError": {
                            "nullable": true,
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "code",
                              "message"
                            ],
                            "type": "object"
                          },
                          "aliasFinal": {
                            "nullable": true,
                            "type": "string"
                          },
                          "automaticAliases": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "branchMatcher": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "endsWith",
                                  "startsWith",
                                  "equals"
                                ],
                                "description": "The type of matching to perform"
                              },
                              "pattern": {
                                "type": "string",
                                "description": "The pattern to match against branch names"
                              }
                            },
                            "required": [
                              "type",
                              "pattern"
                            ],
                            "type": "object"
                          },
                          "buildingAt": {
                            "type": "number"
                          },
                          "builds": {
                            "items": {
                              "properties": {
                                "use": {
                                  "type": "string"
                                },
                                "src": {
                                  "type": "string"
                                },
                                "dest": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "use"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "checksConclusion": {
                            "type": "string",
                            "enum": [
                              "succeeded",
                              "failed",
                              "skipped",
                              "canceled"
                            ]
                          },
                          "checksState": {
                            "type": "string",
                            "enum": [
                              "registered",
                              "running",
                              "completed"
                            ]
                          },
                          "connectBuildsEnabled": {
                            "type": "boolean"
                          },
                          "connectConfigurationId": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "createdIn": {
                            "type": "string"
                          },
                          "creator": {
                            "nullable": true,
                            "properties": {
                              "email": {
                                "type": "string"
                              },
                              "githubLogin": {
                                "type": "string"
                              },
                              "gitlabLogin": {
                                "type": "string"
                              },
                              "uid": {
                                "type": "string"
                              },
                              "username": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "email",
                              "uid",
                              "username"
                            ],
                            "type": "object"
                          },
                          "deletedAt": {
                            "type": "number"
                          },
                          "deploymentHostname": {
                            "type": "string"
                          },
                          "forced": {
                            "type": "boolean"
                          },
                          "name": {
                            "type": "string"
                          },
                          "meta": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "monorepoManager": {
                            "nullable": true,
                            "type": "string"
                          },
                          "oidcTokenClaims": {
                            "properties": {
                              "iss": {
                                "type": "string"
                              },
                              "sub": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string"
                              },
                              "aud": {
                                "type": "string"
                              },
                              "owner": {
                                "type": "string"
                              },
                              "owner_id": {
                                "type": "string"
                              },
                              "project": {
                                "type": "string"
                              },
                              "project_id": {
                                "type": "string"
                              },
                              "environment": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "iss",
                              "sub",
                              "scope",
                              "aud",
                              "owner",
                              "owner_id",
                              "project",
                              "project_id",
                              "environment"
                            ],
                            "type": "object"
                          },
                          "plan": {
                            "type": "string",
                            "enum": [
                              "pro",
                              "enterprise",
                              "hobby"
                            ]
                          },
                          "previewCommentsEnabled": {
                            "type": "boolean",
                            "description": "Whether or not preview comments are enabled for the deployment",
                            "example": false
                          },
                          "private": {
                            "type": "boolean"
                          },
                          "readyAt": {
                            "type": "number"
                          },
                          "readyState": {
                            "type": "string",
                            "enum": [
                              "BUILDING",
                              "ERROR",
                              "INITIALIZING",
                              "QUEUED",
                              "READY",
                              "CANCELED"
                            ]
                          },
                          "readySubstate": {
                            "type": "string",
                            "enum": [
                              "STAGED",
                              "ROLLING",
                              "PROMOTED"
                            ]
                          },
                          "requestedAt": {
                            "type": "number"
                          },
                          "target": {
                            "nullable": true,
                            "type": "string"
                          },
                          "teamId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "LAMBDAS"
                            ]
                          },
                          "url": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "withCache": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "createdIn",
                          "creator",
                          "deploymentHostname",
                          "name",
                          "plan",
                          "private",
                          "readyState",
                          "type",
                          "url",
                          "userId"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "link": {
                      "oneOf": [
                        {
                          "properties": {
                            "org": {
                              "type": "string"
                            },
                            "repoOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "github"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "org",
                            "type",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-limited"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "org": {
                              "type": "string"
                            },
                            "repoOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "org",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "org": {
                              "type": "string"
                            },
                            "repoOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-custom-host"
                              ]
                            },
                            "host": {
                              "type": "string"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "org",
                            "type",
                            "host",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "projectId": {
                              "type": "string"
                            },
                            "projectName": {
                              "type": "string"
                            },
                            "projectNameWithNamespace": {
                              "type": "string"
                            },
                            "projectNamespace": {
                              "type": "string"
                            },
                            "projectOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels)."
                            },
                            "projectUrl": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "gitlab"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "projectId",
                            "projectName",
                            "projectNameWithNamespace",
                            "projectNamespace",
                            "projectUrl",
                            "type",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            },
                            "owner": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "bitbucket"
                              ]
                            },
                            "uuid": {
                              "type": "string"
                            },
                            "workspaceUuid": {
                              "type": "string"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "slug",
                            "owner",
                            "type",
                            "uuid",
                            "workspaceUuid",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "microfrontends": {
                      "oneOf": [
                        {
                          "properties": {
                            "updatedAt": {
                              "type": "number",
                              "description": "Timestamp when the microfrontends settings were last updated."
                            },
                            "groupIds": {
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                              "description": "The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together."
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "Whether microfrontends are enabled for this project."
                            },
                            "isDefaultApp": {
                              "type": "boolean",
                              "description": "Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends."
                            },
                            "defaultRoute": {
                              "type": "string",
                              "description": "A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`"
                            },
                            "routeObservabilityToThisProject": {
                              "type": "boolean",
                              "description": "Whether observability data should be routed to this microfrontend project or a root project."
                            }
                          },
                          "required": [
                            "updatedAt",
                            "groupIds",
                            "enabled"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "updatedAt": {
                              "type": "number"
                            },
                            "groupIds": {
                              "items": {
                                "oneOf": []
                              },
                              "maxItems": 0,
                              "minItems": 0,
                              "type": "array"
                            },
                            "enabled": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "updatedAt",
                            "groupIds",
                            "enabled"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "nodeVersion": {
                      "type": "string",
                      "enum": [
                        "22.x",
                        "20.x",
                        "18.x",
                        "16.x",
                        "14.x",
                        "12.x",
                        "10.x",
                        "8.10.x"
                      ]
                    },
                    "optionsAllowlist": {
                      "nullable": true,
                      "properties": {
                        "paths": {
                          "items": {
                            "properties": {
                              "value": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "value"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "paths"
                      ],
                      "type": "object"
                    },
                    "outputDirectory": {
                      "nullable": true,
                      "type": "string"
                    },
                    "passwordProtection": {
                      "nullable": true,
                      "type": "object"
                    },
                    "productionDeploymentsFastLane": {
                      "type": "boolean"
                    },
                    "publicSource": {
                      "nullable": true,
                      "type": "boolean"
                    },
                    "resourceConfig": {
                      "properties": {
                        "fluid": {
                          "type": "boolean"
                        },
                        "functionDefaultRegions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "functionDefaultTimeout": {
                          "type": "number"
                        },
                        "functionDefaultMemoryType": {
                          "type": "string",
                          "enum": [
                            "standard_legacy",
                            "standard",
                            "performance"
                          ]
                        },
                        "functionZeroConfigFailover": {
                          "type": "boolean"
                        },
                        "elasticConcurrencyEnabled": {
                          "type": "boolean"
                        },
                        "buildMachineType": {
                          "type": "string",
                          "enum": [
                            "enhanced",
                            "turbo"
                          ]
                        },
                        "isNSNBDisabled": {
                          "type": "boolean"
                        }
                      },
                      "type": "object",
                      "required": [
                        "functionDefaultRegions"
                      ]
                    },
                    "rollbackDescription": {
                      "properties": {
                        "userId": {
                          "type": "string",
                          "description": "The user who rolled back the project."
                        },
                        "username": {
                          "type": "string",
                          "description": "The username of the user who rolled back the project."
                        },
                        "description": {
                          "type": "string",
                          "description": "User-supplied explanation of why they rolled back the project. Limited to 250 characters."
                        },
                        "createdAt": {
                          "type": "number",
                          "description": "Timestamp of when the rollback was requested."
                        }
                      },
                      "required": [
                        "userId",
                        "username",
                        "description",
                        "createdAt"
                      ],
                      "type": "object",
                      "description": "Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback."
                    },
                    "rollingRelease": {
                      "nullable": true,
                      "properties": {
                        "target": {
                          "type": "string",
                          "description": "The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.",
                          "example": "production"
                        },
                        "stages": {
                          "nullable": true,
                          "items": {
                            "properties": {
                              "targetPercentage": {
                                "type": "number",
                                "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                                "example": 25
                              },
                              "requireApproval": {
                                "type": "boolean",
                                "description": "Whether or not this stage requires manual approval to proceed",
                                "example": false
                              },
                              "duration": {
                                "type": "number",
                                "description": "Duration in minutes for automatic advancement to the next stage",
                                "example": 600
                              }
                            },
                            "required": [
                              "targetPercentage"
                            ],
                            "type": "object",
                            "description": "An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100."
                          },
                          "type": "array",
                          "description": "An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100."
                        },
                        "canaryResponseHeader": {
                          "type": "boolean",
                          "description": "Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.",
                          "example": false
                        }
                      },
                      "required": [
                        "target"
                      ],
                      "type": "object",
                      "description": "Project-level rolling release configuration that defines how deployments should be gradually rolled out"
                    },
                    "defaultResourceConfig": {
                      "properties": {
                        "fluid": {
                          "type": "boolean"
                        },
                        "functionDefaultRegions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "functionDefaultTimeout": {
                          "type": "number"
                        },
                        "functionDefaultMemoryType": {
                          "type": "string",
                          "enum": [
                            "standard_legacy",
                            "standard",
                            "performance"
                          ]
                        },
                        "functionZeroConfigFailover": {
                          "type": "boolean"
                        },
                        "elasticConcurrencyEnabled": {
                          "type": "boolean"
                        },
                        "buildMachineType": {
                          "type": "string",
                          "enum": [
                            "enhanced",
                            "turbo"
                          ]
                        },
                        "isNSNBDisabled": {
                          "type": "boolean"
                        }
                      },
                      "type": "object",
                      "required": [
                        "functionDefaultRegions"
                      ]
                    },
                    "rootDirectory": {
                      "nullable": true,
                      "type": "string"
                    },
                    "serverlessFunctionZeroConfigFailover": {
                      "type": "boolean"
                    },
                    "skewProtectionBoundaryAt": {
                      "type": "number"
                    },
                    "skewProtectionMaxAge": {
                      "type": "number"
                    },
                    "skipGitConnectDuringLink": {
                      "type": "boolean"
                    },
                    "sourceFilesOutsideRootDirectory": {
                      "type": "boolean"
                    },
                    "enableAffectedProjectsDeployments": {
                      "type": "boolean"
                    },
                    "ssoProtection": {
                      "nullable": true,
                      "properties": {
                        "deploymentType": {
                          "type": "string",
                          "enum": [
                            "preview",
                            "all",
                            "prod_deployment_urls_and_all_previews",
                            "all_except_custom_domains"
                          ]
                        }
                      },
                      "required": [
                        "deploymentType"
                      ],
                      "type": "object"
                    },
                    "targets": {
                      "additionalProperties": {
                        "nullable": true,
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "alias": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "aliasAssigned": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "boolean"
                              }
                            ]
                          },
                          "aliasError": {
                            "nullable": true,
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "code",
                              "message"
                            ],
                            "type": "object"
                          },
                          "aliasFinal": {
                            "nullable": true,
                            "type": "string"
                          },
                          "automaticAliases": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "branchMatcher": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "endsWith",
                                  "startsWith",
                                  "equals"
                                ],
                                "description": "The type of matching to perform"
                              },
                              "pattern": {
                                "type": "string",
                                "description": "The pattern to match against branch names"
                              }
                            },
                            "required": [
                              "type",
                              "pattern"
                            ],
                            "type": "object"
                          },
                          "buildingAt": {
                            "type": "number"
                          },
                          "builds": {
                            "items": {
                              "properties": {
                                "use": {
                                  "type": "string"
                                },
                                "src": {
                                  "type": "string"
                                },
                                "dest": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "use"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "checksConclusion": {
                            "type": "string",
                            "enum": [
                              "succeeded",
                              "failed",
                              "skipped",
                              "canceled"
                            ]
                          },
                          "checksState": {
                            "type": "string",
                            "enum": [
                              "registered",
                              "running",
                              "completed"
                            ]
                          },
                          "connectBuildsEnabled": {
                            "type": "boolean"
                          },
                          "connectConfigurationId": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "createdIn": {
                            "type": "string"
                          },
                          "creator": {
                            "nullable": true,
                            "properties": {
                              "email": {
                                "type": "string"
                              },
                              "githubLogin": {
                                "type": "string"
                              },
                              "gitlabLogin": {
                                "type": "string"
                              },
                              "uid": {
                                "type": "string"
                              },
                              "username": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "email",
                              "uid",
                              "username"
                            ],
                            "type": "object"
                          },
                          "deletedAt": {
                            "type": "number"
                          },
                          "deploymentHostname": {
                            "type": "string"
                          },
                          "forced": {
                            "type": "boolean"
                          },
                          "name": {
                            "type": "string"
                          },
                          "meta": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "monorepoManager": {
                            "nullable": true,
                            "type": "string"
                          },
                          "oidcTokenClaims": {
                            "properties": {
                              "iss": {
                                "type": "string"
                              },
                              "sub": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string"
                              },
                              "aud": {
                                "type": "string"
                              },
                              "owner": {
                                "type": "string"
                              },
                              "owner_id": {
                                "type": "string"
                              },
                              "project": {
                                "type": "string"
                              },
                              "project_id": {
                                "type": "string"
                              },
                              "environment": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "iss",
                              "sub",
                              "scope",
                              "aud",
                              "owner",
                              "owner_id",
                              "project",
                              "project_id",
                              "environment"
                            ],
                            "type": "object"
                          },
                          "plan": {
                            "type": "string",
                            "enum": [
                              "pro",
                              "enterprise",
                              "hobby"
                            ]
                          },
                          "previewCommentsEnabled": {
                            "type": "boolean",
                            "description": "Whether or not preview comments are enabled for the deployment",
                            "example": false
                          },
                          "private": {
                            "type": "boolean"
                          },
                          "readyAt": {
                            "type": "number"
                          },
                          "readyState": {
                            "type": "string",
                            "enum": [
                              "BUILDING",
                              "ERROR",
                              "INITIALIZING",
                              "QUEUED",
                              "READY",
                              "CANCELED"
                            ]
                          },
                          "readySubstate": {
                            "type": "string",
                            "enum": [
                              "STAGED",
                              "ROLLING",
                              "PROMOTED"
                            ]
                          },
                          "requestedAt": {
                            "type": "number"
                          },
                          "target": {
                            "nullable": true,
                            "type": "string"
                          },
                          "teamId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "LAMBDAS"
                            ]
                          },
                          "url": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "withCache": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "createdIn",
                          "creator",
                          "deploymentHostname",
                          "name",
                          "plan",
                          "private",
                          "readyState",
                          "type",
                          "url",
                          "userId"
                        ],
                        "type": "object"
                      },
                      "type": "object"
                    },
                    "transferCompletedAt": {
                      "type": "number"
                    },
                    "transferStartedAt": {
                      "type": "number"
                    },
                    "transferToAccountId": {
                      "type": "string"
                    },
                    "transferredFromAccountId": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "live": {
                      "type": "boolean"
                    },
                    "enablePreviewFeedback": {
                      "nullable": true,
                      "type": "boolean"
                    },
                    "enableProductionFeedback": {
                      "nullable": true,
                      "type": "boolean"
                    },
                    "permissions": {
                      "properties": {
                        "oauth2Connection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "user": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "userConnection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "userSudo": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webAuthn": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "accessGroup": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "aliasGlobal": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "analyticsSampling": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "analyticsUsage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "auditLog": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingAddress": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInformation": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInvoice": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInvoiceEmailRecipient": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInvoiceLanguage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingPlan": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingPurchaseOrder": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingRefund": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingTaxId": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "blob": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "budget": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "cacheArtifact": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "cacheArtifactUsageEvent": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "codeChecks": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "concurrentBuilds": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "connect": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "connectConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "defaultDeploymentProtection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainAcceptDelegation": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainAuthCodes": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainCertificate": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainCheckConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainMove": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainPurchase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainRecord": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainTransferIn": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "event": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "ownEvent": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sensitiveEnvironmentVariablePolicy": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "fileUpload": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "flagsExplorerSubscription": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "gitRepository": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "ipBlocking": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "imageOptimizationNewPrice": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationAccount": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfigurationTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfigurationProjects": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationVercelConfigurationOverride": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfigurationRole": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationSSOSession": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationResource": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationEvent": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationResourceSecrets": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationDeploymentAction": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceInstallationMember": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceBillingData": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceInvoice": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceSettings": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceExperimentationItem": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceExperimentationEdgeConfigData": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "jobGlobal": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "drain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "logDrain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "traceDrain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "Monitoring": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringSettings": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringQuery": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringChart": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringAlert": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDeploymentFailed": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainExpire": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainMoved": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainPurchase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainRenewal": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainUnverified": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "NotificationMonitoringAlert": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationPaymentFailed": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationUsageAlert": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationPreferences": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationCustomerBudget": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationStatementOfReasons": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "alerts": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityNotebook": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityFunnel": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "openTelemetryEndpoint": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelAppInstallation": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelAppInstallationRequest": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "paymentMethod": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "permissions": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "postgres": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "previewDeploymentSuffix": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "proTrialOnboarding": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sharedEnvVars": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sharedEnvVarsProduction": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "space": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "spaceRun": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "passwordProtectionInvoiceItem": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "rateLimit": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "redis": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "repository": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "remoteCaching": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "samlConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "secret": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "redisStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "blobStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "postgresStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationResourceReplCommand": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "storeTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "supportCase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "supportCaseComment": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "dataCacheBillingSettings": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "team": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamAccessRequest": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamFellowMembership": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamGitExclusivity": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamInvite": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamInviteCode": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamJoin": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamMemberMfaStatus": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamMicrofrontends": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamOwnMembership": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamOwnMembershipDisconnectSAML": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "token": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "usage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "usageCycle": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vpcPeeringConnection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webAnalyticsPlan": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfigItem": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfigSchema": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfigToken": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webhook": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webhook-event": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "endpointVerification": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTransferIn": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "oauth2Application": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelRun": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelRunExec": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "apiKey": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "apiKeyOwnedBySelf": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "aliasProject": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "aliasProtectionBypass": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "buildMachine": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "productionAliasProtectionBypass": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "connectConfigurationLink": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "dataCacheNamespace": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deployment": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentBuildLogs": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentCheck": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentCheckPreview": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentCheckReRunFromProductionBranch": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentProductionGit": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentV0": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentPreview": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentPrivate": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentPromote": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentRollback": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeCacheNamespace": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "environments": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "logs": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "logsPreset": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "passwordProtection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "optionsAllowlist": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "job": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityData": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "onDemandBuild": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "onDemandConcurrency": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "project": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectFromV0": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectAccessGroup": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectAnalyticsSampling": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectCheck": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectCheckRun": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDeploymentHook": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDomain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDomainMove": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDomainCheckConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectEnvVars": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectEnvVarsProduction": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectEnvVarsUnownedByIntegration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectFlags": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectId": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectIntegrationConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectLink": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectMember": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectMonitoring": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectPermissions": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectProductionBranch": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTransferOut": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectProtectionBypass": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectUsage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectAnalyticsUsage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectSupportCase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectSupportCaseComment": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDeploymentExpiration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectRollingRelease": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTier": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectOIDCToken": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "seawallConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "skewProtection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "analytics": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "trustedIps": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "v0Chat": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webAnalytics": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sharedEnvVarConnection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sonar": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "lastRollbackTarget": {
                      "nullable": true,
                      "type": "object"
                    },
                    "lastAliasRequest": {
                      "nullable": true,
                      "properties": {
                        "fromDeploymentId": {
                          "type": "string"
                        },
                        "toDeploymentId": {
                          "type": "string"
                        },
                        "fromRollingReleaseId": {
                          "type": "string",
                          "description": "If rolling back from a rolling release, fromDeploymentId captures the \"base\" of that rolling release, and fromRollingReleaseId captures the \"target\" of that rolling release."
                        },
                        "jobStatus": {
                          "type": "string",
                          "enum": [
                            "succeeded",
                            "failed",
                            "skipped",
                            "pending",
                            "in-progress"
                          ]
                        },
                        "requestedAt": {
                          "type": "number"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "promote",
                            "rollback"
                          ]
                        }
                      },
                      "required": [
                        "fromDeploymentId",
                        "toDeploymentId",
                        "jobStatus",
                        "requestedAt",
                        "type"
                      ],
                      "type": "object"
                    },
                    "protectionBypass": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "properties": {
                              "createdAt": {
                                "type": "number"
                              },
                              "createdBy": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "integration-automation-bypass"
                                ]
                              },
                              "integrationId": {
                                "type": "string"
                              },
                              "configurationId": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "createdAt",
                              "createdBy",
                              "scope",
                              "integrationId",
                              "configurationId"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "createdAt": {
                                "type": "number"
                              },
                              "createdBy": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "automation-bypass"
                                ]
                              }
                            },
                            "required": [
                              "createdAt",
                              "createdBy",
                              "scope"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": "object"
                    },
                    "hasActiveBranches": {
                      "type": "boolean"
                    },
                    "trustedIps": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "properties": {
                            "deploymentType": {
                              "type": "string",
                              "enum": [
                                "preview",
                                "production",
                                "all",
                                "prod_deployment_urls_and_all_previews",
                                "all_except_custom_domains"
                              ]
                            },
                            "addresses": {
                              "items": {
                                "properties": {
                                  "value": {
                                    "type": "string"
                                  },
                                  "note": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "value"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "protectionMode": {
                              "type": "string",
                              "enum": [
                                "additional",
                                "exclusive"
                              ]
                            }
                          },
                          "required": [
                            "deploymentType",
                            "addresses",
                            "protectionMode"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "deploymentType": {
                              "type": "string",
                              "enum": [
                                "preview",
                                "production",
                                "all",
                                "prod_deployment_urls_and_all_previews",
                                "all_except_custom_domains"
                              ]
                            }
                          },
                          "required": [
                            "deploymentType"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "gitComments": {
                      "properties": {
                        "onPullRequest": {
                          "type": "boolean",
                          "description": "Whether the Vercel bot should comment on PRs"
                        },
                        "onCommit": {
                          "type": "boolean",
                          "description": "Whether the Vercel bot should comment on commits"
                        }
                      },
                      "required": [
                        "onPullRequest",
                        "onCommit"
                      ],
                      "type": "object"
                    },
                    "gitProviderOptions": {
                      "properties": {
                        "createDeployments": {
                          "type": "string",
                          "enum": [
                            "enabled",
                            "disabled"
                          ],
                          "description": "Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead"
                        },
                        "disableRepositoryDispatchEvents": {
                          "type": "boolean",
                          "description": "Whether the Vercel bot should not automatically create GitHub repository-dispatch events on deployment events. https://vercel.com/docs/git/vercel-for-github#repository-dispatch-events"
                        }
                      },
                      "required": [
                        "createDeployments"
                      ],
                      "type": "object"
                    },
                    "paused": {
                      "type": "boolean"
                    },
                    "concurrencyBucketName": {
                      "type": "string"
                    },
                    "webAnalytics": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "disabledAt": {
                          "type": "number"
                        },
                        "canceledAt": {
                          "type": "number"
                        },
                        "enabledAt": {
                          "type": "number"
                        },
                        "hasData": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    "security": {
                      "properties": {
                        "attackModeEnabled": {
                          "type": "boolean"
                        },
                        "attackModeUpdatedAt": {
                          "type": "number"
                        },
                        "firewallEnabled": {
                          "type": "boolean"
                        },
                        "firewallUpdatedAt": {
                          "type": "number"
                        },
                        "attackModeActiveUntil": {
                          "nullable": true,
                          "type": "number"
                        },
                        "firewallConfigVersion": {
                          "type": "number"
                        },
                        "firewallSeawallEnabled": {
                          "type": "boolean"
                        },
                        "ja3Enabled": {
                          "type": "boolean"
                        },
                        "ja4Enabled": {
                          "type": "boolean"
                        },
                        "firewallBypassIps": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "managedRules": {
                          "nullable": true,
                          "properties": {
                            "bot_filter": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny"
                                  ]
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            },
                            "ai_bots": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny"
                                  ]
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            },
                            "owasp": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny"
                                  ]
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "bot_filter",
                            "ai_bots",
                            "owasp"
                          ],
                          "type": "object"
                        },
                        "botIdEnabled": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "oidcTokenConfig": {
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not to generate OpenID Connect JSON Web Tokens."
                        },
                        "issuerMode": {
                          "type": "string",
                          "enum": [
                            "team",
                            "global"
                          ],
                          "description": "- team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`"
                        }
                      },
                      "type": "object"
                    },
                    "tier": {
                      "type": "string",
                      "enum": [
                        "standard",
                        "advanced",
                        "critical"
                      ]
                    },
                    "features": {
                      "properties": {
                        "webAnalytics": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "v0": {
                      "type": "boolean"
                    },
                    "abuse": {
                      "properties": {
                        "scanner": {
                          "type": "string"
                        },
                        "history": {
                          "items": {
                            "properties": {
                              "scanner": {
                                "type": "string"
                              },
                              "reason": {
                                "type": "string"
                              },
                              "by": {
                                "type": "string"
                              },
                              "byId": {
                                "type": "string"
                              },
                              "at": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "scanner",
                              "reason",
                              "by",
                              "byId",
                              "at"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "block": {
                          "properties": {
                            "action": {
                              "type": "string",
                              "enum": [
                                "blocked"
                              ]
                            },
                            "reason": {
                              "type": "string"
                            },
                            "statusCode": {
                              "type": "number"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "caseId": {
                              "type": "string"
                            },
                            "actor": {
                              "type": "string"
                            },
                            "comment": {
                              "type": "string"
                            },
                            "isCascading": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "action",
                            "reason",
                            "statusCode",
                            "createdAt"
                          ],
                          "type": "object"
                        },
                        "blockHistory": {
                          "items": {
                            "oneOf": [
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "blocked"
                                    ]
                                  },
                                  "reason": {
                                    "type": "string"
                                  },
                                  "statusCode": {
                                    "type": "number"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "reason",
                                  "statusCode",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "unblocked"
                                    ]
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "route-blocked"
                                    ]
                                  },
                                  "route": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "src": {
                                            "type": "string"
                                          },
                                          "status": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "src",
                                          "status"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "has": {
                                            "items": {
                                              "oneOf": [
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "header"
                                                      ]
                                                    },
                                                    "key": {
                                                      "type": "string",
                                                      "enum": [
                                                        "x-vercel-ip-country"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "key",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                },
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "host"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                }
                                              ]
                                            },
                                            "type": "array"
                                          },
                                          "mitigate": {
                                            "properties": {
                                              "action": {
                                                "type": "string",
                                                "enum": [
                                                  "block_legal_cwc"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "action"
                                            ],
                                            "type": "object"
                                          },
                                          "src": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "has",
                                          "mitigate"
                                        ],
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  "reason": {
                                    "type": "string"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "route",
                                  "reason",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "route-unblocked"
                                    ]
                                  },
                                  "route": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "src": {
                                            "type": "string"
                                          },
                                          "status": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "src",
                                          "status"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "has": {
                                            "items": {
                                              "oneOf": [
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "header"
                                                      ]
                                                    },
                                                    "key": {
                                                      "type": "string",
                                                      "enum": [
                                                        "x-vercel-ip-country"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "key",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                },
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "host"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                }
                                              ]
                                            },
                                            "type": "array"
                                          },
                                          "mitigate": {
                                            "properties": {
                                              "action": {
                                                "type": "string",
                                                "enum": [
                                                  "block_legal_cwc"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "action"
                                            ],
                                            "type": "object"
                                          },
                                          "src": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "has",
                                          "mitigate"
                                        ],
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  "statusCode": {
                                    "type": "number"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "route",
                                  "createdAt"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "history",
                        "updatedAt"
                      ],
                      "type": "object"
                    },
                    "internalRoutes": {
                      "items": {
                        "oneOf": [
                          {
                            "properties": {
                              "src": {
                                "type": "string"
                              },
                              "status": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "src",
                              "status"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "has": {
                                "items": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "header"
                                          ]
                                        },
                                        "key": {
                                          "type": "string",
                                          "enum": [
                                            "x-vercel-ip-country"
                                          ]
                                        },
                                        "value": {
                                          "properties": {
                                            "eq": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "eq"
                                          ],
                                          "type": "object"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "key",
                                        "value"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "host"
                                          ]
                                        },
                                        "value": {
                                          "properties": {
                                            "eq": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "eq"
                                          ],
                                          "type": "object"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "value"
                                      ],
                                      "type": "object"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              "mitigate": {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "block_legal_cwc"
                                    ]
                                  }
                                },
                                "required": [
                                  "action"
                                ],
                                "type": "object"
                              },
                              "src": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "has",
                              "mitigate"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "accountId",
                    "directoryListing",
                    "id",
                    "name",
                    "nodeVersion",
                    "resourceConfig",
                    "defaultResourceConfig"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "The unique project identifier",
            "in": "path",
            "required": true,
            "schema": {
              "example": "prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB",
              "description": "The unique project identifier",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "disabled": {
                    "type": "boolean",
                    "example": true,
                    "description": "Enable or disable data cache for the project - default: false"
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v3/deployments/{idOrUrl}/events": {
      "get": {
        "description": "Get the build logs of a deployment by deployment ID and build ID. It can work as an infinite stream of logs or as a JSON endpoint depending on the input parameters.",
        "operationId": "getDeploymentEvents",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get deployment events",
        "tags": [
          "deployments"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "delimiter",
                              "command",
                              "stdout",
                              "stderr",
                              "exit",
                              "deployment-state",
                              "middleware",
                              "middleware-invocation",
                              "edge-function-invocation",
                              "metric",
                              "report",
                              "fatal"
                            ]
                          },
                          "created": {
                            "type": "number"
                          },
                          "payload": {
                            "properties": {
                              "deploymentId": {
                                "type": "string"
                              },
                              "info": {
                                "properties": {
                                  "type": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "entrypoint": {
                                    "type": "string"
                                  },
                                  "path": {
                                    "type": "string"
                                  },
                                  "step": {
                                    "type": "string"
                                  },
                                  "readyState": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "name"
                                ],
                                "type": "object"
                              },
                              "text": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "date": {
                                "type": "number"
                              },
                              "serial": {
                                "type": "string"
                              },
                              "created": {
                                "type": "number"
                              },
                              "statusCode": {
                                "type": "number"
                              },
                              "requestId": {
                                "type": "string"
                              },
                              "proxy": {
                                "properties": {
                                  "timestamp": {
                                    "type": "number"
                                  },
                                  "method": {
                                    "type": "string"
                                  },
                                  "host": {
                                    "type": "string"
                                  },
                                  "path": {
                                    "type": "string"
                                  },
                                  "statusCode": {
                                    "type": "number"
                                  },
                                  "userAgent": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "referer": {
                                    "type": "string"
                                  },
                                  "clientIp": {
                                    "type": "string"
                                  },
                                  "region": {
                                    "type": "string"
                                  },
                                  "scheme": {
                                    "type": "string"
                                  },
                                  "responseByteSize": {
                                    "type": "number"
                                  },
                                  "cacheId": {
                                    "type": "string"
                                  },
                                  "pathType": {
                                    "type": "string"
                                  },
                                  "pathTypeVariant": {
                                    "type": "string"
                                  },
                                  "vercelId": {
                                    "type": "string"
                                  },
                                  "vercelCache": {
                                    "type": "string",
                                    "enum": [
                                      "MISS",
                                      "HIT",
                                      "STALE",
                                      "BYPASS",
                                      "PRERENDER",
                                      "REVALIDATED"
                                    ]
                                  },
                                  "lambdaRegion": {
                                    "type": "string"
                                  },
                                  "wafAction": {
                                    "type": "string",
                                    "enum": [
                                      "log",
                                      "challenge",
                                      "deny",
                                      "bypass",
                                      "rate_limit"
                                    ]
                                  },
                                  "wafRuleId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "timestamp",
                                  "method",
                                  "host",
                                  "path",
                                  "userAgent",
                                  "referer",
                                  "region"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "deploymentId",
                              "id",
                              "date",
                              "serial"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "type",
                          "created",
                          "payload"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "created": {
                            "type": "number"
                          },
                          "date": {
                            "type": "number"
                          },
                          "deploymentId": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "info": {
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "entrypoint": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "step": {
                                "type": "string"
                              },
                              "readyState": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "name"
                            ],
                            "type": "object"
                          },
                          "serial": {
                            "type": "string"
                          },
                          "text": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "delimiter",
                              "command",
                              "stdout",
                              "stderr",
                              "exit",
                              "deployment-state",
                              "middleware",
                              "middleware-invocation",
                              "edge-function-invocation",
                              "metric",
                              "report",
                              "fatal"
                            ]
                          },
                          "level": {
                            "type": "string",
                            "enum": [
                              "error",
                              "warning"
                            ]
                          }
                        },
                        "required": [
                          "created",
                          "date",
                          "deploymentId",
                          "id",
                          "info",
                          "serial",
                          "type"
                        ],
                        "type": "object"
                      }
                    ],
                    "nullable": true
                  },
                  "nullable": true
                }
              },
              "application/stream+json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "delimiter",
                            "command",
                            "stdout",
                            "stderr",
                            "exit",
                            "deployment-state",
                            "middleware",
                            "middleware-invocation",
                            "edge-function-invocation",
                            "metric",
                            "report",
                            "fatal"
                          ]
                        },
                        "created": {
                          "type": "number"
                        },
                        "payload": {
                          "properties": {
                            "deploymentId": {
                              "type": "string"
                            },
                            "info": {
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "entrypoint": {
                                  "type": "string"
                                },
                                "path": {
                                  "type": "string"
                                },
                                "step": {
                                  "type": "string"
                                },
                                "readyState": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "name"
                              ],
                              "type": "object"
                            },
                            "text": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "date": {
                              "type": "number"
                            },
                            "serial": {
                              "type": "string"
                            },
                            "created": {
                              "type": "number"
                            },
                            "statusCode": {
                              "type": "number"
                            },
                            "requestId": {
                              "type": "string"
                            },
                            "proxy": {
                              "properties": {
                                "timestamp": {
                                  "type": "number"
                                },
                                "method": {
                                  "type": "string"
                                },
                                "host": {
                                  "type": "string"
                                },
                                "path": {
                                  "type": "string"
                                },
                                "statusCode": {
                                  "type": "number"
                                },
                                "userAgent": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "referer": {
                                  "type": "string"
                                },
                                "clientIp": {
                                  "type": "string"
                                },
                                "region": {
                                  "type": "string"
                                },
                                "scheme": {
                                  "type": "string"
                                },
                                "responseByteSize": {
                                  "type": "number"
                                },
                                "cacheId": {
                                  "type": "string"
                                },
                                "pathType": {
                                  "type": "string"
                                },
                                "pathTypeVariant": {
                                  "type": "string"
                                },
                                "vercelId": {
                                  "type": "string"
                                },
                                "vercelCache": {
                                  "type": "string",
                                  "enum": [
                                    "MISS",
                                    "HIT",
                                    "STALE",
                                    "BYPASS",
                                    "PRERENDER",
                                    "REVALIDATED"
                                  ]
                                },
                                "lambdaRegion": {
                                  "type": "string"
                                },
                                "wafAction": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny",
                                    "bypass",
                                    "rate_limit"
                                  ]
                                },
                                "wafRuleId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "timestamp",
                                "method",
                                "host",
                                "path",
                                "userAgent",
                                "referer",
                                "region"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "deploymentId",
                            "id",
                            "date",
                            "serial"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "type",
                        "created",
                        "payload"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "created": {
                          "type": "number"
                        },
                        "date": {
                          "type": "number"
                        },
                        "deploymentId": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "info": {
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "entrypoint": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "step": {
                              "type": "string"
                            },
                            "readyState": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "name"
                          ],
                          "type": "object"
                        },
                        "serial": {
                          "type": "string"
                        },
                        "text": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "delimiter",
                            "command",
                            "stdout",
                            "stderr",
                            "exit",
                            "deployment-state",
                            "middleware",
                            "middleware-invocation",
                            "edge-function-invocation",
                            "metric",
                            "report",
                            "fatal"
                          ]
                        },
                        "level": {
                          "type": "string",
                          "enum": [
                            "error",
                            "warning"
                          ]
                        }
                      },
                      "required": [
                        "created",
                        "date",
                        "deploymentId",
                        "id",
                        "info",
                        "serial",
                        "type"
                      ],
                      "type": "object"
                    }
                  ],
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "idOrUrl",
            "description": "The unique identifier or hostname of the deployment.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "dpl_5WJWYSyB7BpgTj3EuwF37WMRBXBtPQ2iTMJHJBJyRfd",
              "description": "The unique identifier or hostname of the deployment."
            }
          },
          {
            "name": "direction",
            "description": "Order of the returned events based on the timestamp.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "backward",
                "forward"
              ],
              "default": "forward",
              "example": "backward",
              "description": "Order of the returned events based on the timestamp."
            }
          },
          {
            "name": "follow",
            "description": "When enabled, this endpoint will return live events as they happen.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "enum": [
                0,
                1
              ],
              "example": 1,
              "description": "When enabled, this endpoint will return live events as they happen."
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of events to return. Provide `-1` to return all available logs.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "example": 100,
              "description": "Maximum number of events to return. Provide `-1` to return all available logs."
            }
          },
          {
            "name": "name",
            "description": "Deployment build ID.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "bld_cotnkcr76",
              "description": "Deployment build ID."
            }
          },
          {
            "name": "since",
            "description": "Timestamp for when build logs should be pulled from.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1540095775941,
              "description": "Timestamp for when build logs should be pulled from."
            }
          },
          {
            "name": "until",
            "description": "Timestamp for when the build logs should be pulled up until.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1540106318643,
              "description": "Timestamp for when the build logs should be pulled up until."
            }
          },
          {
            "name": "statusCode",
            "description": "HTTP status code range to filter events by.",
            "in": "query",
            "required": false,
            "schema": {
              "example": "5xx",
              "description": "HTTP status code range to filter events by.",
              "oneOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          {
            "name": "delimiter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "enum": [
                0,
                1
              ],
              "example": 1
            }
          },
          {
            "name": "builds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "enum": [
                0,
                1
              ],
              "example": 1
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/deployments/{deploymentId}/integrations/{integrationConfigurationId}/resources/{resourceId}/actions/{action}": {
      "patch": {
        "description": "Updates the deployment integration action for the specified integration installation",
        "operationId": "update-integration-deployment-action",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update deployment integration action",
        "tags": [
          "deployments",
          "integrations"
        ],
        "responses": {
          "202": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "running",
                      "succeeded",
                      "failed"
                    ]
                  },
                  "statusText": {
                    "type": "string"
                  },
                  "statusUrl": {
                    "type": "string",
                    "format": "uri",
                    "pattern": "^https?://|^sso:"
                  },
                  "outcomes": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "kind": {
                              "type": "string"
                            },
                            "secrets": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "name",
                                  "value"
                                ],
                                "additionalProperties": false
                              }
                            }
                          },
                          "required": [
                            "kind",
                            "secrets"
                          ],
                          "additionalProperties": false
                        }
                      ]
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/v13/deployments/{idOrUrl}": {
      "get": {
        "description": "Retrieves information for a deployment either by supplying its ID (`id` property) or Hostname (`url` property). Additional details will be included when the authenticated user or team is an owner of the deployment.",
        "operationId": "getDeployment",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get a deployment by ID or URL",
        "tags": [
          "deployments"
        ],
        "responses": {
          "200": {
            "description": "The deployment including only public information\nThe deployment including both public and private information",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "aliasAssignedAt": {
                          "nullable": true,
                          "oneOf": [
                            {
                              "type": "number"
                            },
                            {
                              "type": "boolean"
                            }
                          ]
                        },
                        "alwaysRefuseToBuild": {
                          "type": "boolean"
                        },
                        "build": {
                          "properties": {
                            "env": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "env"
                          ],
                          "type": "object"
                        },
                        "buildArtifactUrls": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "builds": {
                          "items": {
                            "properties": {
                              "use": {
                                "type": "string"
                              },
                              "src": {
                                "type": "string"
                              },
                              "config": {
                                "additionalProperties": true,
                                "type": "object"
                              }
                            },
                            "required": [
                              "use"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "env": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "inspectorUrl": {
                          "nullable": true,
                          "type": "string"
                        },
                        "isInConcurrentBuildsQueue": {
                          "type": "boolean"
                        },
                        "isInSystemBuildsQueue": {
                          "type": "boolean"
                        },
                        "projectSettings": {
                          "properties": {
                            "buildCommand": {
                              "nullable": true,
                              "type": "string"
                            },
                            "devCommand": {
                              "nullable": true,
                              "type": "string"
                            },
                            "framework": {
                              "nullable": true,
                              "type": "string",
                              "enum": [
                                "blitzjs",
                                "nextjs",
                                "gatsby",
                                "remix",
                                "react-router",
                                "astro",
                                "hexo",
                                "eleventy",
                                "docusaurus-2",
                                "docusaurus",
                                "preact",
                                "solidstart-1",
                                "solidstart",
                                "dojo",
                                "ember",
                                "vue",
                                "scully",
                                "ionic-angular",
                                "angular",
                                "polymer",
                                "svelte",
                                "sveltekit",
                                "sveltekit-1",
                                "ionic-react",
                                "create-react-app",
                                "gridsome",
                                "umijs",
                                "sapper",
                                "saber",
                                "stencil",
                                "nuxtjs",
                                "redwoodjs",
                                "hugo",
                                "jekyll",
                                "brunch",
                                "middleman",
                                "zola",
                                "hydrogen",
                                "vite",
                                "vitepress",
                                "vuepress",
                                "parcel",
                                "fastapi",
                                "fasthtml",
                                "sanity-v3",
                                "sanity",
                                "storybook",
                                "nitro",
                                "hono",
                                "express",
                                "xmcp"
                              ]
                            },
                            "commandForIgnoringBuildStep": {
                              "nullable": true,
                              "type": "string"
                            },
                            "installCommand": {
                              "nullable": true,
                              "type": "string"
                            },
                            "outputDirectory": {
                              "nullable": true,
                              "type": "string"
                            },
                            "speedInsights": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "enabledAt": {
                                  "type": "number"
                                },
                                "disabledAt": {
                                  "type": "number"
                                },
                                "canceledAt": {
                                  "type": "number"
                                },
                                "hasData": {
                                  "type": "boolean"
                                },
                                "paidAt": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            "webAnalytics": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "disabledAt": {
                                  "type": "number"
                                },
                                "canceledAt": {
                                  "type": "number"
                                },
                                "enabledAt": {
                                  "type": "number"
                                },
                                "hasData": {
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "readyStateReason": {
                          "type": "string"
                        },
                        "integrations": {
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "skipped",
                                "pending",
                                "ready",
                                "error",
                                "timeout"
                              ]
                            },
                            "startedAt": {
                              "type": "number"
                            },
                            "completedAt": {
                              "type": "number"
                            },
                            "skippedAt": {
                              "type": "number"
                            },
                            "skippedBy": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "status",
                            "startedAt"
                          ],
                          "type": "object"
                        },
                        "images": {
                          "properties": {
                            "sizes": {
                              "items": {
                                "type": "number"
                              },
                              "type": "array"
                            },
                            "qualities": {
                              "items": {
                                "type": "number"
                              },
                              "type": "array"
                            },
                            "domains": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "remotePatterns": {
                              "items": {
                                "properties": {
                                  "protocol": {
                                    "type": "string",
                                    "enum": [
                                      "http",
                                      "https"
                                    ],
                                    "description": "Must be `http` or `https`."
                                  },
                                  "hostname": {
                                    "type": "string",
                                    "description": "Can be literal or wildcard. Single `*` matches a single subdomain. Double `**` matches any number of subdomains."
                                  },
                                  "port": {
                                    "type": "string",
                                    "description": "Can be literal port such as `8080` or empty string meaning no port."
                                  },
                                  "pathname": {
                                    "type": "string",
                                    "description": "Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments."
                                  },
                                  "search": {
                                    "type": "string",
                                    "description": "Can be literal query string such as `?v=1` or empty string meaning no query string."
                                  }
                                },
                                "required": [
                                  "hostname"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "localPatterns": {
                              "items": {
                                "properties": {
                                  "pathname": {
                                    "type": "string",
                                    "description": "Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments."
                                  },
                                  "search": {
                                    "type": "string",
                                    "description": "Can be literal query string such as `?v=1` or empty string meaning no query string."
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "minimumCacheTTL": {
                              "type": "number"
                            },
                            "formats": {
                              "items": {
                                "type": "string",
                                "enum": [
                                  "image/avif",
                                  "image/webp"
                                ]
                              },
                              "type": "array"
                            },
                            "dangerouslyAllowSVG": {
                              "type": "boolean"
                            },
                            "contentSecurityPolicy": {
                              "type": "string"
                            },
                            "contentDispositionType": {
                              "type": "string",
                              "enum": [
                                "inline",
                                "attachment"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "alias": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "aliasAssigned": {
                          "type": "boolean"
                        },
                        "bootedAt": {
                          "type": "number"
                        },
                        "buildingAt": {
                          "type": "number"
                        },
                        "buildContainerFinishedAt": {
                          "type": "number",
                          "description": "Since April 2025 it necessary for On-Demand Concurrency Minutes calculation"
                        },
                        "buildSkipped": {
                          "type": "boolean"
                        },
                        "creator": {
                          "properties": {
                            "uid": {
                              "type": "string"
                            },
                            "username": {
                              "type": "string"
                            },
                            "avatar": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "uid"
                          ],
                          "type": "object"
                        },
                        "initReadyAt": {
                          "type": "number"
                        },
                        "isFirstBranchDeployment": {
                          "type": "boolean"
                        },
                        "lambdas": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "number"
                              },
                              "readyState": {
                                "type": "string",
                                "enum": [
                                  "BUILDING",
                                  "ERROR",
                                  "INITIALIZING",
                                  "READY"
                                ]
                              },
                              "entrypoint": {
                                "nullable": true,
                                "type": "string"
                              },
                              "readyStateAt": {
                                "type": "number"
                              },
                              "output": {
                                "items": {
                                  "properties": {
                                    "path": {
                                      "type": "string"
                                    },
                                    "functionName": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "path",
                                    "functionName"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "id",
                              "output"
                            ],
                            "type": "object",
                            "description": "A partial representation of a Build used by the deployment endpoint."
                          },
                          "type": "array"
                        },
                        "public": {
                          "type": "boolean"
                        },
                        "ready": {
                          "type": "number"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "QUEUED",
                            "BUILDING",
                            "ERROR",
                            "INITIALIZING",
                            "READY",
                            "CANCELED"
                          ]
                        },
                        "team": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            },
                            "avatar": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "slug"
                          ],
                          "type": "object"
                        },
                        "userAliases": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "previewCommentsEnabled": {
                          "type": "boolean"
                        },
                        "ttyBuildLogs": {
                          "type": "boolean"
                        },
                        "customEnvironment": {
                          "oneOf": [
                            {
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "Unique identifier for the custom environment (format: env_*)"
                                },
                                "slug": {
                                  "type": "string",
                                  "description": "URL-friendly name of the environment"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "production",
                                    "preview",
                                    "development"
                                  ],
                                  "description": "The type of environment (production, preview, or development)"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Optional description of the environment's purpose"
                                },
                                "branchMatcher": {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "endsWith",
                                        "startsWith",
                                        "equals"
                                      ],
                                      "description": "The type of matching to perform"
                                    },
                                    "pattern": {
                                      "type": "string",
                                      "description": "The pattern to match against branch names"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "pattern"
                                  ],
                                  "type": "object",
                                  "description": "Configuration for matching git branches to this environment"
                                },
                                "domains": {
                                  "items": {
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "apexName": {
                                        "type": "string"
                                      },
                                      "projectId": {
                                        "type": "string"
                                      },
                                      "redirect": {
                                        "nullable": true,
                                        "type": "string"
                                      },
                                      "redirectStatusCode": {
                                        "nullable": true,
                                        "type": "number",
                                        "enum": [
                                          307,
                                          301,
                                          302,
                                          308
                                        ]
                                      },
                                      "gitBranch": {
                                        "nullable": true,
                                        "type": "string"
                                      },
                                      "customEnvironmentId": {
                                        "nullable": true,
                                        "type": "string"
                                      },
                                      "updatedAt": {
                                        "type": "number"
                                      },
                                      "createdAt": {
                                        "type": "number"
                                      },
                                      "verified": {
                                        "type": "boolean",
                                        "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                                      },
                                      "verification": {
                                        "items": {
                                          "properties": {
                                            "type": {
                                              "type": "string"
                                            },
                                            "domain": {
                                              "type": "string"
                                            },
                                            "value": {
                                              "type": "string"
                                            },
                                            "reason": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "domain",
                                            "value",
                                            "reason"
                                          ],
                                          "type": "object",
                                          "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                        },
                                        "type": "array",
                                        "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "apexName",
                                      "projectId",
                                      "verified"
                                    ],
                                    "type": "object",
                                    "description": "List of domains associated with this environment"
                                  },
                                  "type": "array",
                                  "description": "List of domains associated with this environment"
                                },
                                "currentDeploymentAliases": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array",
                                  "description": "List of aliases for the current deployment"
                                },
                                "createdAt": {
                                  "type": "number",
                                  "description": "Timestamp when the environment was created"
                                },
                                "updatedAt": {
                                  "type": "number",
                                  "description": "Timestamp when the environment was last updated"
                                }
                              },
                              "required": [
                                "id",
                                "slug",
                                "type",
                                "createdAt",
                                "updatedAt"
                              ],
                              "type": "object",
                              "description": "Internal representation of a custom environment with all required properties"
                            },
                            {
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "oomReport": {
                          "type": "string",
                          "enum": [
                            "out-of-memory"
                          ]
                        },
                        "aliasWarning": {
                          "nullable": true,
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            },
                            "link": {
                              "type": "string"
                            },
                            "action": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "readyState": {
                          "type": "string",
                          "enum": [
                            "QUEUED",
                            "BUILDING",
                            "ERROR",
                            "INITIALIZING",
                            "READY",
                            "CANCELED"
                          ]
                        },
                        "name": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "LAMBDAS"
                          ]
                        },
                        "aliasError": {
                          "nullable": true,
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ],
                          "type": "object"
                        },
                        "aliasFinal": {
                          "nullable": true,
                          "type": "string"
                        },
                        "autoAssignCustomDomains": {
                          "type": "boolean",
                          "description": "applies to custom domains only, defaults to `true`"
                        },
                        "automaticAliases": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "buildErrorAt": {
                          "type": "number"
                        },
                        "checksState": {
                          "type": "string",
                          "enum": [
                            "registered",
                            "running",
                            "completed"
                          ]
                        },
                        "checksConclusion": {
                          "type": "string",
                          "enum": [
                            "succeeded",
                            "failed",
                            "skipped",
                            "canceled"
                          ]
                        },
                        "deletedAt": {
                          "nullable": true,
                          "type": "number"
                        },
                        "defaultRoute": {
                          "type": "string",
                          "description": "Computed field that is only available for deployments with a microfrontend configuration."
                        },
                        "canceledAt": {
                          "type": "number"
                        },
                        "errorCode": {
                          "type": "string"
                        },
                        "errorLink": {
                          "type": "string"
                        },
                        "errorMessage": {
                          "nullable": true,
                          "type": "string"
                        },
                        "errorStep": {
                          "type": "string"
                        },
                        "passiveRegions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "description": "Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service"
                        },
                        "gitSource": {
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github"
                                  ]
                                },
                                "repoId": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "number"
                                    }
                                  ]
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "repoId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github"
                                  ]
                                },
                                "org": {
                                  "type": "string"
                                },
                                "repo": {
                                  "type": "string"
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "org",
                                "repo"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github-custom-host"
                                  ]
                                },
                                "host": {
                                  "type": "string"
                                },
                                "repoId": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "number"
                                    }
                                  ]
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "host",
                                "repoId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github-custom-host"
                                  ]
                                },
                                "host": {
                                  "type": "string"
                                },
                                "org": {
                                  "type": "string"
                                },
                                "repo": {
                                  "type": "string"
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "host",
                                "org",
                                "repo"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github-limited"
                                  ]
                                },
                                "repoId": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "number"
                                    }
                                  ]
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "repoId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github-limited"
                                  ]
                                },
                                "org": {
                                  "type": "string"
                                },
                                "repo": {
                                  "type": "string"
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "org",
                                "repo"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "gitlab"
                                  ]
                                },
                                "projectId": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "number"
                                    }
                                  ]
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "projectId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "bitbucket"
                                  ]
                                },
                                "workspaceUuid": {
                                  "type": "string"
                                },
                                "repoUuid": {
                                  "type": "string"
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "repoUuid"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "bitbucket"
                                  ]
                                },
                                "owner": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "owner",
                                "slug"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "custom"
                                  ]
                                },
                                "ref": {
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "gitUrl": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "ref",
                                "sha",
                                "gitUrl"
                              ],
                              "type": "object",
                              "description": "Allows custom git sources (local folder mounted to the container) in test mode"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github"
                                  ]
                                },
                                "ref": {
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "repoId": {
                                  "type": "number"
                                },
                                "org": {
                                  "type": "string"
                                },
                                "repo": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "ref",
                                "sha",
                                "repoId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github-custom-host"
                                  ]
                                },
                                "host": {
                                  "type": "string"
                                },
                                "ref": {
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "repoId": {
                                  "type": "number"
                                },
                                "org": {
                                  "type": "string"
                                },
                                "repo": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "host",
                                "ref",
                                "sha",
                                "repoId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github-limited"
                                  ]
                                },
                                "ref": {
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "repoId": {
                                  "type": "number"
                                },
                                "org": {
                                  "type": "string"
                                },
                                "repo": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "ref",
                                "sha",
                                "repoId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "gitlab"
                                  ]
                                },
                                "ref": {
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "projectId": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "ref",
                                "sha",
                                "projectId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "bitbucket"
                                  ]
                                },
                                "ref": {
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "owner": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "workspaceUuid": {
                                  "type": "string"
                                },
                                "repoUuid": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "ref",
                                "sha",
                                "workspaceUuid",
                                "repoUuid"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "meta": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "type": "object"
                        },
                        "originCacheRegion": {
                          "type": "string"
                        },
                        "nodeVersion": {
                          "type": "string",
                          "enum": [
                            "22.x",
                            "20.x",
                            "18.x",
                            "16.x",
                            "14.x",
                            "12.x",
                            "10.x",
                            "8.10.x"
                          ],
                          "description": "If set it overrides the `projectSettings.nodeVersion` for this deployment."
                        },
                        "project": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "framework": {
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "name"
                          ],
                          "type": "object"
                        },
                        "readySubstate": {
                          "type": "string",
                          "enum": [
                            "STAGED",
                            "ROLLING",
                            "PROMOTED"
                          ],
                          "description": "Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic"
                        },
                        "regions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "softDeletedByRetention": {
                          "type": "boolean"
                        },
                        "source": {
                          "type": "string",
                          "enum": [
                            "api-trigger-git-deploy",
                            "cli",
                            "clone/repo",
                            "git",
                            "import",
                            "import/repo",
                            "redeploy",
                            "v0-web"
                          ]
                        },
                        "target": {
                          "nullable": true,
                          "type": "string",
                          "enum": [
                            "staging",
                            "production"
                          ]
                        },
                        "undeletedAt": {
                          "type": "number"
                        },
                        "url": {
                          "type": "string"
                        },
                        "version": {
                          "type": "number",
                          "enum": [
                            2
                          ]
                        },
                        "oidcTokenClaims": {
                          "properties": {
                            "iss": {
                              "type": "string"
                            },
                            "sub": {
                              "type": "string"
                            },
                            "scope": {
                              "type": "string"
                            },
                            "aud": {
                              "type": "string"
                            },
                            "owner": {
                              "type": "string"
                            },
                            "owner_id": {
                              "type": "string"
                            },
                            "project": {
                              "type": "string"
                            },
                            "project_id": {
                              "type": "string"
                            },
                            "environment": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "iss",
                            "sub",
                            "scope",
                            "aud",
                            "owner",
                            "owner_id",
                            "project",
                            "project_id",
                            "environment"
                          ],
                          "type": "object"
                        },
                        "projectId": {
                          "type": "string"
                        },
                        "plan": {
                          "type": "string",
                          "enum": [
                            "pro",
                            "enterprise",
                            "hobby"
                          ]
                        },
                        "connectBuildsEnabled": {
                          "type": "boolean"
                        },
                        "connectConfigurationId": {
                          "type": "string"
                        },
                        "createdIn": {
                          "type": "string"
                        },
                        "crons": {
                          "items": {
                            "properties": {
                              "schedule": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "schedule",
                              "path"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "functions": {
                          "nullable": true,
                          "additionalProperties": {
                            "properties": {
                              "architecture": {
                                "type": "string",
                                "enum": [
                                  "x86_64",
                                  "arm64"
                                ]
                              },
                              "memory": {
                                "type": "number"
                              },
                              "maxDuration": {
                                "type": "number"
                              },
                              "runtime": {
                                "type": "string"
                              },
                              "includeFiles": {
                                "type": "string"
                              },
                              "excludeFiles": {
                                "type": "string"
                              },
                              "experimentalTriggers": {
                                "items": {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "queue/v1beta"
                                      ],
                                      "description": "Event type - must be \"queue/v1beta\" (REQUIRED)"
                                    },
                                    "topic": {
                                      "type": "string",
                                      "description": "Name of the queue topic to consume from (REQUIRED)"
                                    },
                                    "consumer": {
                                      "type": "string",
                                      "description": "Name of the consumer group for this trigger (REQUIRED)"
                                    },
                                    "maxDeliveries": {
                                      "type": "number",
                                      "description": "Maximum number of delivery attempts for message processing (OPTIONAL) This represents the total number of times a message can be delivered, not the number of retries. Must be at least 1 if specified. Behavior when not specified depends on the server's default configuration."
                                    },
                                    "retryAfterSeconds": {
                                      "type": "number",
                                      "description": "Delay in seconds before retrying failed executions (OPTIONAL) Behavior when not specified depends on the server's default configuration."
                                    },
                                    "initialDelaySeconds": {
                                      "type": "number",
                                      "description": "Initial delay in seconds before first execution attempt (OPTIONAL) Must be 0 or greater. Use 0 for no initial delay. Behavior when not specified depends on the server's default configuration."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "topic",
                                    "consumer"
                                  ],
                                  "type": "object",
                                  "description": "Queue trigger event for Vercel's queue system. Handles \"queue/v1beta\" events with queue-specific configuration."
                                },
                                "type": "array"
                              },
                              "supportsCancellation": {
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "type": "object"
                        },
                        "monorepoManager": {
                          "nullable": true,
                          "type": "string"
                        },
                        "ownerId": {
                          "type": "string"
                        },
                        "passiveConnectConfigurationId": {
                          "type": "string",
                          "description": "Since November 2023 this field defines a Secure Compute network that will only be used to deploy passive lambdas to (as in passiveRegions)"
                        },
                        "routes": {
                          "nullable": true,
                          "items": {
                            "oneOf": [
                              {
                                "properties": {
                                  "src": {
                                    "type": "string"
                                  },
                                  "dest": {
                                    "type": "string"
                                  },
                                  "headers": {
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "type": "object"
                                  },
                                  "methods": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "continue": {
                                    "type": "boolean"
                                  },
                                  "override": {
                                    "type": "boolean"
                                  },
                                  "caseSensitive": {
                                    "type": "boolean"
                                  },
                                  "check": {
                                    "type": "boolean"
                                  },
                                  "important": {
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "type": "number"
                                  },
                                  "has": {
                                    "items": {
                                      "oneOf": [
                                        {
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "host"
                                              ]
                                            },
                                            "value": {
                                              "oneOf": [
                                                {
                                                  "type": "string"
                                                },
                                                {
                                                  "properties": {
                                                    "eq": {
                                                      "oneOf": [
                                                        {
                                                          "type": "string"
                                                        },
                                                        {
                                                          "type": "number"
                                                        }
                                                      ]
                                                    },
                                                    "neq": {
                                                      "type": "string"
                                                    },
                                                    "inc": {
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "ninc": {
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pre": {
                                                      "type": "string"
                                                    },
                                                    "suf": {
                                                      "type": "string"
                                                    },
                                                    "re": {
                                                      "type": "string"
                                                    },
                                                    "gt": {
                                                      "type": "number"
                                                    },
                                                    "gte": {
                                                      "type": "number"
                                                    },
                                                    "lt": {
                                                      "type": "number"
                                                    },
                                                    "lte": {
                                                      "type": "number"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              ]
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "value"
                                          ],
                                          "type": "object"
                                        },
                                        {
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "header",
                                                "cookie",
                                                "query"
                                              ]
                                            },
                                            "key": {
                                              "type": "string"
                                            },
                                            "value": {
                                              "oneOf": [
                                                {
                                                  "type": "string"
                                                },
                                                {
                                                  "properties": {
                                                    "eq": {
                                                      "oneOf": [
                                                        {
                                                          "type": "string"
                                                        },
                                                        {
                                                          "type": "number"
                                                        }
                                                      ]
                                                    },
                                                    "neq": {
                                                      "type": "string"
                                                    },
                                                    "inc": {
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "ninc": {
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pre": {
                                                      "type": "string"
                                                    },
                                                    "suf": {
                                                      "type": "string"
                                                    },
                                                    "re": {
                                                      "type": "string"
                                                    },
                                                    "gt": {
                                                      "type": "number"
                                                    },
                                                    "gte": {
                                                      "type": "number"
                                                    },
                                                    "lt": {
                                                      "type": "number"
                                                    },
                                                    "lte": {
                                                      "type": "number"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              ]
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "key"
                                          ],
                                          "type": "object"
                                        }
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "missing": {
                                    "items": {
                                      "oneOf": [
                                        {
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "host"
                                              ]
                                            },
                                            "value": {
                                              "oneOf": [
                                                {
                                                  "type": "string"
                                                },
                                                {
                                                  "properties": {
                                                    "eq": {
                                                      "oneOf": [
                                                        {
                                                          "type": "string"
                                                        },
                                                        {
                                                          "type": "number"
                                                        }
                                                      ]
                                                    },
                                                    "neq": {
                                                      "type": "string"
                                                    },
                                                    "inc": {
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "ninc": {
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pre": {
                                                      "type": "string"
                                                    },
                                                    "suf": {
                                                      "type": "string"
                                                    },
                                                    "re": {
                                                      "type": "string"
                                                    },
                                                    "gt": {
                                                      "type": "number"
                                                    },
                                                    "gte": {
                                                      "type": "number"
                                                    },
                                                    "lt": {
                                                      "type": "number"
                                                    },
                                                    "lte": {
                                                      "type": "number"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              ]
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "value"
                                          ],
                                          "type": "object"
                                        },
                                        {
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "header",
                                                "cookie",
                                                "query"
                                              ]
                                            },
                                            "key": {
                                              "type": "string"
                                            },
                                            "value": {
                                              "oneOf": [
                                                {
                                                  "type": "string"
                                                },
                                                {
                                                  "properties": {
                                                    "eq": {
                                                      "oneOf": [
                                                        {
                                                          "type": "string"
                                                        },
                                                        {
                                                          "type": "number"
                                                        }
                                                      ]
                                                    },
                                                    "neq": {
                                                      "type": "string"
                                                    },
                                                    "inc": {
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "ninc": {
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pre": {
                                                      "type": "string"
                                                    },
                                                    "suf": {
                                                      "type": "string"
                                                    },
                                                    "re": {
                                                      "type": "string"
                                                    },
                                                    "gt": {
                                                      "type": "number"
                                                    },
                                                    "gte": {
                                                      "type": "number"
                                                    },
                                                    "lt": {
                                                      "type": "number"
                                                    },
                                                    "lte": {
                                                      "type": "number"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              ]
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "key"
                                          ],
                                          "type": "object"
                                        }
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "mitigate": {
                                    "properties": {
                                      "action": {
                                        "type": "string",
                                        "enum": [
                                          "challenge",
                                          "deny"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "action"
                                    ],
                                    "type": "object"
                                  },
                                  "transforms": {
                                    "items": {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "request.headers",
                                            "request.query",
                                            "response.headers"
                                          ]
                                        },
                                        "op": {
                                          "type": "string",
                                          "enum": [
                                            "append",
                                            "set",
                                            "delete"
                                          ]
                                        },
                                        "target": {
                                          "properties": {
                                            "key": {
                                              "oneOf": [
                                                {
                                                  "type": "string"
                                                },
                                                {
                                                  "properties": {
                                                    "eq": {
                                                      "oneOf": [
                                                        {
                                                          "type": "string"
                                                        },
                                                        {
                                                          "type": "number"
                                                        }
                                                      ]
                                                    },
                                                    "neq": {
                                                      "type": "string"
                                                    },
                                                    "inc": {
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "ninc": {
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "pre": {
                                                      "type": "string"
                                                    },
                                                    "suf": {
                                                      "type": "string"
                                                    },
                                                    "gt": {
                                                      "type": "number"
                                                    },
                                                    "gte": {
                                                      "type": "number"
                                                    },
                                                    "lt": {
                                                      "type": "number"
                                                    },
                                                    "lte": {
                                                      "type": "number"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              ]
                                            }
                                          },
                                          "required": [
                                            "key"
                                          ],
                                          "type": "object"
                                        },
                                        "args": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "op",
                                        "target"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "locale": {
                                    "properties": {
                                      "redirect": {
                                        "additionalProperties": {
                                          "type": "string"
                                        },
                                        "type": "object"
                                      },
                                      "cookie": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "middlewarePath": {
                                    "type": "string",
                                    "description": "A middleware key within the `output` key under the build result. Overrides a `middleware` definition."
                                  },
                                  "middlewareRawSrc": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array",
                                    "description": "The original middleware matchers."
                                  },
                                  "middleware": {
                                    "type": "number",
                                    "description": "A middleware index in the `middleware` key under the build result"
                                  }
                                },
                                "required": [
                                  "src"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "handle": {
                                    "type": "string",
                                    "enum": [
                                      "error",
                                      "filesystem",
                                      "hit",
                                      "miss",
                                      "rewrite",
                                      "resource"
                                    ]
                                  },
                                  "src": {
                                    "type": "string"
                                  },
                                  "dest": {
                                    "type": "string"
                                  },
                                  "status": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "handle"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "src": {
                                    "type": "string"
                                  },
                                  "continue": {
                                    "type": "boolean"
                                  },
                                  "middleware": {
                                    "type": "number",
                                    "enum": [
                                      0
                                    ]
                                  }
                                },
                                "required": [
                                  "src",
                                  "continue",
                                  "middleware"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "type": "array"
                        },
                        "gitRepo": {
                          "nullable": true,
                          "oneOf": [
                            {
                              "properties": {
                                "namespace": {
                                  "type": "string"
                                },
                                "projectId": {
                                  "type": "number"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "gitlab"
                                  ]
                                },
                                "url": {
                                  "type": "string"
                                },
                                "path": {
                                  "type": "string"
                                },
                                "defaultBranch": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "private": {
                                  "type": "boolean"
                                },
                                "ownerType": {
                                  "type": "string",
                                  "enum": [
                                    "team",
                                    "user"
                                  ]
                                }
                              },
                              "required": [
                                "namespace",
                                "projectId",
                                "type",
                                "url",
                                "path",
                                "defaultBranch",
                                "name",
                                "private",
                                "ownerType"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "org": {
                                  "type": "string"
                                },
                                "repo": {
                                  "type": "string"
                                },
                                "repoId": {
                                  "type": "number"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github"
                                  ]
                                },
                                "repoOwnerId": {
                                  "type": "number"
                                },
                                "path": {
                                  "type": "string"
                                },
                                "defaultBranch": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "private": {
                                  "type": "boolean"
                                },
                                "ownerType": {
                                  "type": "string",
                                  "enum": [
                                    "team",
                                    "user"
                                  ]
                                }
                              },
                              "required": [
                                "org",
                                "repo",
                                "repoId",
                                "type",
                                "repoOwnerId",
                                "path",
                                "defaultBranch",
                                "name",
                                "private",
                                "ownerType"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "owner": {
                                  "type": "string"
                                },
                                "repoUuid": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "bitbucket"
                                  ]
                                },
                                "workspaceUuid": {
                                  "type": "string"
                                },
                                "path": {
                                  "type": "string"
                                },
                                "defaultBranch": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "private": {
                                  "type": "boolean"
                                },
                                "ownerType": {
                                  "type": "string",
                                  "enum": [
                                    "team",
                                    "user"
                                  ]
                                }
                              },
                              "required": [
                                "owner",
                                "repoUuid",
                                "slug",
                                "type",
                                "workspaceUuid",
                                "path",
                                "defaultBranch",
                                "name",
                                "private",
                                "ownerType"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "flags": {
                          "oneOf": [
                            {
                              "properties": {
                                "definitions": {
                                  "additionalProperties": {
                                    "properties": {
                                      "options": {
                                        "items": {
                                          "properties": {
                                            "value": {
                                              "$ref": "#/components/schemas/FlagJSONValue"
                                            },
                                            "label": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "value"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "url": {
                                        "type": "string"
                                      },
                                      "description": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "object"
                                }
                              },
                              "required": [
                                "definitions"
                              ],
                              "type": "object",
                              "description": "Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags."
                            },
                            {
                              "items": {
                                "type": "object",
                                "description": "Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags."
                              },
                              "type": "array",
                              "description": "Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags."
                            }
                          ]
                        },
                        "microfrontends": {
                          "oneOf": [
                            {
                              "properties": {
                                "isDefaultApp": {
                                  "type": "boolean"
                                },
                                "defaultAppProjectName": {
                                  "type": "string",
                                  "description": "The project name of the default app of this deployment's microfrontends group."
                                },
                                "defaultRoute": {
                                  "type": "string",
                                  "description": "A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI."
                                },
                                "groupIds": {
                                  "items": {
                                    "oneOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  "maxItems": 2,
                                  "minItems": 2,
                                  "type": "array",
                                  "description": "The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together."
                                },
                                "microfrontendsAlias2Enabled": {
                                  "type": "boolean",
                                  "description": "Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not."
                                }
                              },
                              "required": [
                                "defaultAppProjectName",
                                "groupIds"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "isDefaultApp": {
                                  "type": "boolean"
                                },
                                "applications": {
                                  "additionalProperties": {
                                    "properties": {
                                      "isDefaultApp": {
                                        "type": "boolean"
                                      },
                                      "productionHost": {
                                        "type": "string",
                                        "description": "This is the production alias, it will always show the most up to date of each application."
                                      },
                                      "deploymentAlias": {
                                        "type": "string",
                                        "description": "Use the fixed deploymentAlias and deploymentHost so that the microfrontend preview stays in sync with the deployment. These are only present for mono-repos when a single commit creates multiple deployments. If they are not present, productionHost will be used."
                                      },
                                      "deploymentHost": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "productionHost"
                                    ],
                                    "type": "object",
                                    "description": "A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment. Note: this field will be removed when MFE alias routing is fully rolled out."
                                  },
                                  "type": "object",
                                  "description": "A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment. Note: this field will be removed when MFE alias routing is fully rolled out."
                                },
                                "mfeConfigUploadState": {
                                  "type": "string",
                                  "enum": [
                                    "error",
                                    "success",
                                    "no_config"
                                  ],
                                  "description": "The result of the microfrontends config upload during deployment creation. Only set for default app deployments. - `success` - The config was uploaded successfully. - `error` - The config upload failed. - `no_config` - No config was found to upload. - `undefined` - The config upload has not been attempted yet."
                                },
                                "defaultAppProjectName": {
                                  "type": "string",
                                  "description": "The project name of the default app of this deployment's microfrontends group."
                                },
                                "defaultRoute": {
                                  "type": "string",
                                  "description": "A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI."
                                },
                                "groupIds": {
                                  "items": {
                                    "oneOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  "maxItems": 2,
                                  "minItems": 2,
                                  "type": "array",
                                  "description": "The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together."
                                },
                                "microfrontendsAlias2Enabled": {
                                  "type": "boolean",
                                  "description": "Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not."
                                }
                              },
                              "required": [
                                "isDefaultApp",
                                "defaultAppProjectName",
                                "groupIds"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "config": {
                          "properties": {
                            "version": {
                              "type": "number"
                            },
                            "functionType": {
                              "type": "string",
                              "enum": [
                                "fluid",
                                "standard"
                              ]
                            },
                            "functionMemoryType": {
                              "type": "string",
                              "enum": [
                                "standard",
                                "standard_legacy",
                                "performance"
                              ]
                            },
                            "functionTimeout": {
                              "nullable": true,
                              "type": "number"
                            },
                            "secureComputePrimaryRegion": {
                              "nullable": true,
                              "type": "string"
                            },
                            "secureComputeFallbackRegion": {
                              "nullable": true,
                              "type": "string"
                            },
                            "isUsingActiveCPU": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "functionType",
                            "functionMemoryType",
                            "functionTimeout",
                            "secureComputePrimaryRegion",
                            "secureComputeFallbackRegion"
                          ],
                          "type": "object",
                          "description": "Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured"
                        },
                        "checks": {
                          "properties": {
                            "deployment-alias": {
                              "properties": {
                                "state": {
                                  "type": "string",
                                  "enum": [
                                    "succeeded",
                                    "failed",
                                    "pending"
                                  ]
                                },
                                "startedAt": {
                                  "type": "number"
                                },
                                "completedAt": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "state",
                                "startedAt"
                              ],
                              "type": "object",
                              "description": "Condensed check data. Retrieve individual check and check run data using api-checks v2 routes."
                            }
                          },
                          "required": [
                            "deployment-alias"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "build",
                        "env",
                        "inspectorUrl",
                        "isInConcurrentBuildsQueue",
                        "isInSystemBuildsQueue",
                        "projectSettings",
                        "aliasAssigned",
                        "bootedAt",
                        "buildingAt",
                        "buildSkipped",
                        "creator",
                        "public",
                        "status",
                        "id",
                        "createdAt",
                        "readyState",
                        "name",
                        "type",
                        "meta",
                        "regions",
                        "url",
                        "version",
                        "projectId",
                        "plan",
                        "createdIn",
                        "ownerId",
                        "routes"
                      ],
                      "type": "object",
                      "description": "The deployment including both public and private information"
                    },
                    {
                      "properties": {
                        "alias": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "aliasAssigned": {
                          "type": "boolean"
                        },
                        "bootedAt": {
                          "type": "number"
                        },
                        "buildingAt": {
                          "type": "number"
                        },
                        "buildContainerFinishedAt": {
                          "type": "number",
                          "description": "Since April 2025 it necessary for On-Demand Concurrency Minutes calculation"
                        },
                        "buildSkipped": {
                          "type": "boolean"
                        },
                        "creator": {
                          "properties": {
                            "uid": {
                              "type": "string"
                            },
                            "username": {
                              "type": "string"
                            },
                            "avatar": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "uid"
                          ],
                          "type": "object"
                        },
                        "initReadyAt": {
                          "type": "number"
                        },
                        "isFirstBranchDeployment": {
                          "type": "boolean"
                        },
                        "lambdas": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "number"
                              },
                              "readyState": {
                                "type": "string",
                                "enum": [
                                  "BUILDING",
                                  "ERROR",
                                  "INITIALIZING",
                                  "READY"
                                ]
                              },
                              "entrypoint": {
                                "nullable": true,
                                "type": "string"
                              },
                              "readyStateAt": {
                                "type": "number"
                              },
                              "output": {
                                "items": {
                                  "properties": {
                                    "path": {
                                      "type": "string"
                                    },
                                    "functionName": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "path",
                                    "functionName"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "id",
                              "output"
                            ],
                            "type": "object",
                            "description": "A partial representation of a Build used by the deployment endpoint."
                          },
                          "type": "array"
                        },
                        "public": {
                          "type": "boolean"
                        },
                        "ready": {
                          "type": "number"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "QUEUED",
                            "BUILDING",
                            "ERROR",
                            "INITIALIZING",
                            "READY",
                            "CANCELED"
                          ]
                        },
                        "team": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            },
                            "avatar": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "slug"
                          ],
                          "type": "object"
                        },
                        "userAliases": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "previewCommentsEnabled": {
                          "type": "boolean"
                        },
                        "ttyBuildLogs": {
                          "type": "boolean"
                        },
                        "customEnvironment": {
                          "oneOf": [
                            {
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "Unique identifier for the custom environment (format: env_*)"
                                },
                                "slug": {
                                  "type": "string",
                                  "description": "URL-friendly name of the environment"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "production",
                                    "preview",
                                    "development"
                                  ],
                                  "description": "The type of environment (production, preview, or development)"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Optional description of the environment's purpose"
                                },
                                "branchMatcher": {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "endsWith",
                                        "startsWith",
                                        "equals"
                                      ],
                                      "description": "The type of matching to perform"
                                    },
                                    "pattern": {
                                      "type": "string",
                                      "description": "The pattern to match against branch names"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "pattern"
                                  ],
                                  "type": "object",
                                  "description": "Configuration for matching git branches to this environment"
                                },
                                "domains": {
                                  "items": {
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "apexName": {
                                        "type": "string"
                                      },
                                      "projectId": {
                                        "type": "string"
                                      },
                                      "redirect": {
                                        "nullable": true,
                                        "type": "string"
                                      },
                                      "redirectStatusCode": {
                                        "nullable": true,
                                        "type": "number",
                                        "enum": [
                                          307,
                                          301,
                                          302,
                                          308
                                        ]
                                      },
                                      "gitBranch": {
                                        "nullable": true,
                                        "type": "string"
                                      },
                                      "customEnvironmentId": {
                                        "nullable": true,
                                        "type": "string"
                                      },
                                      "updatedAt": {
                                        "type": "number"
                                      },
                                      "createdAt": {
                                        "type": "number"
                                      },
                                      "verified": {
                                        "type": "boolean",
                                        "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                                      },
                                      "verification": {
                                        "items": {
                                          "properties": {
                                            "type": {
                                              "type": "string"
                                            },
                                            "domain": {
                                              "type": "string"
                                            },
                                            "value": {
                                              "type": "string"
                                            },
                                            "reason": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "domain",
                                            "value",
                                            "reason"
                                          ],
                                          "type": "object",
                                          "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                        },
                                        "type": "array",
                                        "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "apexName",
                                      "projectId",
                                      "verified"
                                    ],
                                    "type": "object",
                                    "description": "List of domains associated with this environment"
                                  },
                                  "type": "array",
                                  "description": "List of domains associated with this environment"
                                },
                                "currentDeploymentAliases": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array",
                                  "description": "List of aliases for the current deployment"
                                },
                                "createdAt": {
                                  "type": "number",
                                  "description": "Timestamp when the environment was created"
                                },
                                "updatedAt": {
                                  "type": "number",
                                  "description": "Timestamp when the environment was last updated"
                                }
                              },
                              "required": [
                                "id",
                                "slug",
                                "type",
                                "createdAt",
                                "updatedAt"
                              ],
                              "type": "object",
                              "description": "Internal representation of a custom environment with all required properties"
                            },
                            {
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "oomReport": {
                          "type": "string",
                          "enum": [
                            "out-of-memory"
                          ]
                        },
                        "aliasWarning": {
                          "nullable": true,
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            },
                            "link": {
                              "type": "string"
                            },
                            "action": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "readyState": {
                          "type": "string",
                          "enum": [
                            "QUEUED",
                            "BUILDING",
                            "ERROR",
                            "INITIALIZING",
                            "READY",
                            "CANCELED"
                          ]
                        },
                        "name": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "LAMBDAS"
                          ]
                        },
                        "aliasError": {
                          "nullable": true,
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "code",
                            "message"
                          ],
                          "type": "object"
                        },
                        "aliasFinal": {
                          "nullable": true,
                          "type": "string"
                        },
                        "autoAssignCustomDomains": {
                          "type": "boolean",
                          "description": "applies to custom domains only, defaults to `true`"
                        },
                        "automaticAliases": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "buildErrorAt": {
                          "type": "number"
                        },
                        "checksState": {
                          "type": "string",
                          "enum": [
                            "registered",
                            "running",
                            "completed"
                          ]
                        },
                        "checksConclusion": {
                          "type": "string",
                          "enum": [
                            "succeeded",
                            "failed",
                            "skipped",
                            "canceled"
                          ]
                        },
                        "deletedAt": {
                          "nullable": true,
                          "type": "number"
                        },
                        "defaultRoute": {
                          "type": "string",
                          "description": "Computed field that is only available for deployments with a microfrontend configuration."
                        },
                        "canceledAt": {
                          "type": "number"
                        },
                        "errorCode": {
                          "type": "string"
                        },
                        "errorLink": {
                          "type": "string"
                        },
                        "errorMessage": {
                          "nullable": true,
                          "type": "string"
                        },
                        "errorStep": {
                          "type": "string"
                        },
                        "passiveRegions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "description": "Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service"
                        },
                        "gitSource": {
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github"
                                  ]
                                },
                                "repoId": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "number"
                                    }
                                  ]
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "repoId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github"
                                  ]
                                },
                                "org": {
                                  "type": "string"
                                },
                                "repo": {
                                  "type": "string"
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "org",
                                "repo"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github-custom-host"
                                  ]
                                },
                                "host": {
                                  "type": "string"
                                },
                                "repoId": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "number"
                                    }
                                  ]
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "host",
                                "repoId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github-custom-host"
                                  ]
                                },
                                "host": {
                                  "type": "string"
                                },
                                "org": {
                                  "type": "string"
                                },
                                "repo": {
                                  "type": "string"
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "host",
                                "org",
                                "repo"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github-limited"
                                  ]
                                },
                                "repoId": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "number"
                                    }
                                  ]
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "repoId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github-limited"
                                  ]
                                },
                                "org": {
                                  "type": "string"
                                },
                                "repo": {
                                  "type": "string"
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "org",
                                "repo"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "gitlab"
                                  ]
                                },
                                "projectId": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "number"
                                    }
                                  ]
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "projectId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "bitbucket"
                                  ]
                                },
                                "workspaceUuid": {
                                  "type": "string"
                                },
                                "repoUuid": {
                                  "type": "string"
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "repoUuid"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "bitbucket"
                                  ]
                                },
                                "owner": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "ref": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "prId": {
                                  "nullable": true,
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "owner",
                                "slug"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "custom"
                                  ]
                                },
                                "ref": {
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "gitUrl": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "ref",
                                "sha",
                                "gitUrl"
                              ],
                              "type": "object",
                              "description": "Allows custom git sources (local folder mounted to the container) in test mode"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github"
                                  ]
                                },
                                "ref": {
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "repoId": {
                                  "type": "number"
                                },
                                "org": {
                                  "type": "string"
                                },
                                "repo": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "ref",
                                "sha",
                                "repoId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github-custom-host"
                                  ]
                                },
                                "host": {
                                  "type": "string"
                                },
                                "ref": {
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "repoId": {
                                  "type": "number"
                                },
                                "org": {
                                  "type": "string"
                                },
                                "repo": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "host",
                                "ref",
                                "sha",
                                "repoId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github-limited"
                                  ]
                                },
                                "ref": {
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "repoId": {
                                  "type": "number"
                                },
                                "org": {
                                  "type": "string"
                                },
                                "repo": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "ref",
                                "sha",
                                "repoId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "gitlab"
                                  ]
                                },
                                "ref": {
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "projectId": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "type",
                                "ref",
                                "sha",
                                "projectId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "bitbucket"
                                  ]
                                },
                                "ref": {
                                  "type": "string"
                                },
                                "sha": {
                                  "type": "string"
                                },
                                "owner": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "workspaceUuid": {
                                  "type": "string"
                                },
                                "repoUuid": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "ref",
                                "sha",
                                "workspaceUuid",
                                "repoUuid"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "meta": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "type": "object"
                        },
                        "originCacheRegion": {
                          "type": "string"
                        },
                        "nodeVersion": {
                          "type": "string",
                          "enum": [
                            "22.x",
                            "20.x",
                            "18.x",
                            "16.x",
                            "14.x",
                            "12.x",
                            "10.x",
                            "8.10.x"
                          ],
                          "description": "If set it overrides the `projectSettings.nodeVersion` for this deployment."
                        },
                        "project": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "framework": {
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "name"
                          ],
                          "type": "object"
                        },
                        "readySubstate": {
                          "type": "string",
                          "enum": [
                            "STAGED",
                            "ROLLING",
                            "PROMOTED"
                          ],
                          "description": "Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic"
                        },
                        "regions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "softDeletedByRetention": {
                          "type": "boolean"
                        },
                        "source": {
                          "type": "string",
                          "enum": [
                            "api-trigger-git-deploy",
                            "cli",
                            "clone/repo",
                            "git",
                            "import",
                            "import/repo",
                            "redeploy",
                            "v0-web"
                          ]
                        },
                        "target": {
                          "nullable": true,
                          "type": "string",
                          "enum": [
                            "staging",
                            "production"
                          ]
                        },
                        "undeletedAt": {
                          "type": "number"
                        },
                        "url": {
                          "type": "string"
                        },
                        "version": {
                          "type": "number",
                          "enum": [
                            2
                          ]
                        },
                        "oidcTokenClaims": {
                          "properties": {
                            "iss": {
                              "type": "string"
                            },
                            "sub": {
                              "type": "string"
                            },
                            "scope": {
                              "type": "string"
                            },
                            "aud": {
                              "type": "string"
                            },
                            "owner": {
                              "type": "string"
                            },
                            "owner_id": {
                              "type": "string"
                            },
                            "project": {
                              "type": "string"
                            },
                            "project_id": {
                              "type": "string"
                            },
                            "environment": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "iss",
                            "sub",
                            "scope",
                            "aud",
                            "owner",
                            "owner_id",
                            "project",
                            "project_id",
                            "environment"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "aliasAssigned",
                        "bootedAt",
                        "buildingAt",
                        "buildSkipped",
                        "creator",
                        "public",
                        "status",
                        "id",
                        "createdAt",
                        "readyState",
                        "name",
                        "type",
                        "meta",
                        "regions",
                        "url",
                        "version"
                      ],
                      "type": "object",
                      "description": "The deployment including only public information"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The deployment was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "idOrUrl",
            "description": "The unique identifier or hostname of the deployment.",
            "in": "path",
            "required": true,
            "schema": {
              "example": "dpl_89qyp1cskzkLrVicDaZoDbjyHuDJ",
              "description": "The unique identifier or hostname of the deployment.",
              "type": "string"
            }
          },
          {
            "name": "withGitRepoInfo",
            "description": "Whether to add in gitRepo information.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Whether to add in gitRepo information.",
              "type": "string",
              "example": "true"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v13/deployments": {
      "post": {
        "description": "Create a new deployment with all the required and intended data. If the deployment is not a git deployment, all files must be provided with the request, either referenced or inlined. Additionally, a deployment id can be specified to redeploy a previous deployment.",
        "operationId": "createDeployment",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create a new deployment",
        "tags": [
          "deployments"
        ],
        "responses": {
          "200": {
            "description": "The successfully created deployment",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "aliasAssignedAt": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "boolean"
                        }
                      ]
                    },
                    "alwaysRefuseToBuild": {
                      "type": "boolean"
                    },
                    "build": {
                      "properties": {
                        "env": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "env"
                      ],
                      "type": "object"
                    },
                    "buildArtifactUrls": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "builds": {
                      "items": {
                        "properties": {
                          "use": {
                            "type": "string"
                          },
                          "src": {
                            "type": "string"
                          },
                          "config": {
                            "additionalProperties": true,
                            "type": "object"
                          }
                        },
                        "required": [
                          "use"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "env": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "inspectorUrl": {
                      "nullable": true,
                      "type": "string"
                    },
                    "isInConcurrentBuildsQueue": {
                      "type": "boolean"
                    },
                    "isInSystemBuildsQueue": {
                      "type": "boolean"
                    },
                    "projectSettings": {
                      "properties": {
                        "buildCommand": {
                          "nullable": true,
                          "type": "string"
                        },
                        "commandForIgnoringBuildStep": {
                          "nullable": true,
                          "type": "string"
                        },
                        "devCommand": {
                          "nullable": true,
                          "type": "string"
                        },
                        "framework": {
                          "nullable": true,
                          "type": "string",
                          "enum": [
                            "blitzjs",
                            "nextjs",
                            "gatsby",
                            "remix",
                            "react-router",
                            "astro",
                            "hexo",
                            "eleventy",
                            "docusaurus-2",
                            "docusaurus",
                            "preact",
                            "solidstart-1",
                            "solidstart",
                            "dojo",
                            "ember",
                            "vue",
                            "scully",
                            "ionic-angular",
                            "angular",
                            "polymer",
                            "svelte",
                            "sveltekit",
                            "sveltekit-1",
                            "ionic-react",
                            "create-react-app",
                            "gridsome",
                            "umijs",
                            "sapper",
                            "saber",
                            "stencil",
                            "nuxtjs",
                            "redwoodjs",
                            "hugo",
                            "jekyll",
                            "brunch",
                            "middleman",
                            "zola",
                            "hydrogen",
                            "vite",
                            "vitepress",
                            "vuepress",
                            "parcel",
                            "fastapi",
                            "fasthtml",
                            "sanity-v3",
                            "sanity",
                            "storybook",
                            "nitro",
                            "hono",
                            "express",
                            "xmcp"
                          ]
                        },
                        "installCommand": {
                          "nullable": true,
                          "type": "string"
                        },
                        "outputDirectory": {
                          "nullable": true,
                          "type": "string"
                        },
                        "speedInsights": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "enabledAt": {
                              "type": "number"
                            },
                            "disabledAt": {
                              "type": "number"
                            },
                            "canceledAt": {
                              "type": "number"
                            },
                            "hasData": {
                              "type": "boolean"
                            },
                            "paidAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        },
                        "webAnalytics": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "disabledAt": {
                              "type": "number"
                            },
                            "canceledAt": {
                              "type": "number"
                            },
                            "enabledAt": {
                              "type": "number"
                            },
                            "hasData": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readyStateReason": {
                      "type": "string"
                    },
                    "integrations": {
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "skipped",
                            "pending",
                            "ready",
                            "error",
                            "timeout"
                          ]
                        },
                        "startedAt": {
                          "type": "number"
                        },
                        "completedAt": {
                          "type": "number"
                        },
                        "skippedAt": {
                          "type": "number"
                        },
                        "skippedBy": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "status",
                        "startedAt"
                      ],
                      "type": "object"
                    },
                    "images": {
                      "properties": {
                        "sizes": {
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "qualities": {
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "domains": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "remotePatterns": {
                          "items": {
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "enum": [
                                  "http",
                                  "https"
                                ],
                                "description": "Must be `http` or `https`."
                              },
                              "hostname": {
                                "type": "string",
                                "description": "Can be literal or wildcard. Single `*` matches a single subdomain. Double `**` matches any number of subdomains."
                              },
                              "port": {
                                "type": "string",
                                "description": "Can be literal port such as `8080` or empty string meaning no port."
                              },
                              "pathname": {
                                "type": "string",
                                "description": "Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments."
                              },
                              "search": {
                                "type": "string",
                                "description": "Can be literal query string such as `?v=1` or empty string meaning no query string."
                              }
                            },
                            "required": [
                              "hostname"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "localPatterns": {
                          "items": {
                            "properties": {
                              "pathname": {
                                "type": "string",
                                "description": "Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments."
                              },
                              "search": {
                                "type": "string",
                                "description": "Can be literal query string such as `?v=1` or empty string meaning no query string."
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "minimumCacheTTL": {
                          "type": "number"
                        },
                        "formats": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "image/avif",
                              "image/webp"
                            ]
                          },
                          "type": "array"
                        },
                        "dangerouslyAllowSVG": {
                          "type": "boolean"
                        },
                        "contentSecurityPolicy": {
                          "type": "string"
                        },
                        "contentDispositionType": {
                          "type": "string",
                          "enum": [
                            "inline",
                            "attachment"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "alias": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "aliasAssigned": {
                      "type": "boolean"
                    },
                    "bootedAt": {
                      "type": "number"
                    },
                    "buildingAt": {
                      "type": "number"
                    },
                    "buildContainerFinishedAt": {
                      "type": "number",
                      "description": "Since April 2025 it necessary for On-Demand Concurrency Minutes calculation"
                    },
                    "buildSkipped": {
                      "type": "boolean"
                    },
                    "creator": {
                      "properties": {
                        "uid": {
                          "type": "string"
                        },
                        "username": {
                          "type": "string"
                        },
                        "avatar": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "uid"
                      ],
                      "type": "object"
                    },
                    "initReadyAt": {
                      "type": "number"
                    },
                    "isFirstBranchDeployment": {
                      "type": "boolean"
                    },
                    "lambdas": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "readyState": {
                            "type": "string",
                            "enum": [
                              "BUILDING",
                              "ERROR",
                              "INITIALIZING",
                              "READY"
                            ]
                          },
                          "entrypoint": {
                            "nullable": true,
                            "type": "string"
                          },
                          "readyStateAt": {
                            "type": "number"
                          },
                          "output": {
                            "items": {
                              "properties": {
                                "path": {
                                  "type": "string"
                                },
                                "functionName": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "path",
                                "functionName"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "id",
                          "output"
                        ],
                        "type": "object",
                        "description": "A partial representation of a Build used by the deployment endpoint."
                      },
                      "type": "array"
                    },
                    "public": {
                      "type": "boolean"
                    },
                    "ready": {
                      "type": "number"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "CANCELED",
                        "ERROR",
                        "QUEUED",
                        "BUILDING",
                        "INITIALIZING",
                        "READY"
                      ]
                    },
                    "team": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "slug": {
                          "type": "string"
                        },
                        "avatar": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "slug"
                      ],
                      "type": "object"
                    },
                    "userAliases": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "previewCommentsEnabled": {
                      "type": "boolean"
                    },
                    "ttyBuildLogs": {
                      "type": "boolean"
                    },
                    "customEnvironment": {
                      "oneOf": [
                        {
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Unique identifier for the custom environment (format: env_*)"
                            },
                            "slug": {
                              "type": "string",
                              "description": "URL-friendly name of the environment"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "production",
                                "preview",
                                "development"
                              ],
                              "description": "The type of environment (production, preview, or development)"
                            },
                            "description": {
                              "type": "string",
                              "description": "Optional description of the environment's purpose"
                            },
                            "branchMatcher": {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "endsWith",
                                    "startsWith",
                                    "equals"
                                  ],
                                  "description": "The type of matching to perform"
                                },
                                "pattern": {
                                  "type": "string",
                                  "description": "The pattern to match against branch names"
                                }
                              },
                              "required": [
                                "type",
                                "pattern"
                              ],
                              "type": "object",
                              "description": "Configuration for matching git branches to this environment"
                            },
                            "domains": {
                              "items": {
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "apexName": {
                                    "type": "string"
                                  },
                                  "projectId": {
                                    "type": "string"
                                  },
                                  "redirect": {
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "redirectStatusCode": {
                                    "nullable": true,
                                    "type": "number",
                                    "enum": [
                                      307,
                                      301,
                                      302,
                                      308
                                    ]
                                  },
                                  "gitBranch": {
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "customEnvironmentId": {
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "updatedAt": {
                                    "type": "number"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                                  },
                                  "verification": {
                                    "items": {
                                      "properties": {
                                        "type": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "value": {
                                          "type": "string"
                                        },
                                        "reason": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "domain",
                                        "value",
                                        "reason"
                                      ],
                                      "type": "object",
                                      "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                    },
                                    "type": "array",
                                    "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                  }
                                },
                                "required": [
                                  "name",
                                  "apexName",
                                  "projectId",
                                  "verified"
                                ],
                                "type": "object",
                                "description": "List of domains associated with this environment"
                              },
                              "type": "array",
                              "description": "List of domains associated with this environment"
                            },
                            "currentDeploymentAliases": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "description": "List of aliases for the current deployment"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "Timestamp when the environment was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "Timestamp when the environment was last updated"
                            }
                          },
                          "required": [
                            "id",
                            "slug",
                            "type",
                            "createdAt",
                            "updatedAt"
                          ],
                          "type": "object",
                          "description": "Internal representation of a custom environment with all required properties"
                        },
                        {
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "oomReport": {
                      "type": "string",
                      "enum": [
                        "out-of-memory"
                      ]
                    },
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "LAMBDAS"
                      ]
                    },
                    "deletedAt": {
                      "nullable": true,
                      "type": "number"
                    },
                    "version": {
                      "type": "number",
                      "enum": [
                        2
                      ]
                    },
                    "autoAssignCustomDomains": {
                      "type": "boolean",
                      "description": "applies to custom domains only, defaults to `true`"
                    },
                    "gitSource": {
                      "oneOf": [
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github"
                              ]
                            },
                            "repoId": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                }
                              ]
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "repoId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github"
                              ]
                            },
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "org",
                            "repo"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-custom-host"
                              ]
                            },
                            "host": {
                              "type": "string"
                            },
                            "repoId": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                }
                              ]
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "host",
                            "repoId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-custom-host"
                              ]
                            },
                            "host": {
                              "type": "string"
                            },
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "host",
                            "org",
                            "repo"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-limited"
                              ]
                            },
                            "repoId": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                }
                              ]
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "repoId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-limited"
                              ]
                            },
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "org",
                            "repo"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "gitlab"
                              ]
                            },
                            "projectId": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                }
                              ]
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "projectId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "bitbucket"
                              ]
                            },
                            "workspaceUuid": {
                              "type": "string"
                            },
                            "repoUuid": {
                              "type": "string"
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "repoUuid"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "bitbucket"
                              ]
                            },
                            "owner": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "owner",
                            "slug"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "custom"
                              ]
                            },
                            "ref": {
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "gitUrl": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "ref",
                            "sha",
                            "gitUrl"
                          ],
                          "type": "object",
                          "description": "Allows custom git sources (local folder mounted to the container) in test mode"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github"
                              ]
                            },
                            "ref": {
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "ref",
                            "sha",
                            "repoId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-custom-host"
                              ]
                            },
                            "host": {
                              "type": "string"
                            },
                            "ref": {
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "host",
                            "ref",
                            "sha",
                            "repoId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-limited"
                              ]
                            },
                            "ref": {
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "ref",
                            "sha",
                            "repoId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "gitlab"
                              ]
                            },
                            "ref": {
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "projectId": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "ref",
                            "sha",
                            "projectId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "bitbucket"
                              ]
                            },
                            "ref": {
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "owner": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            },
                            "workspaceUuid": {
                              "type": "string"
                            },
                            "repoUuid": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "ref",
                            "sha",
                            "workspaceUuid",
                            "repoUuid"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "meta": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object"
                    },
                    "project": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "framework": {
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name"
                      ],
                      "type": "object"
                    },
                    "nodeVersion": {
                      "type": "string",
                      "enum": [
                        "22.x",
                        "20.x",
                        "18.x",
                        "16.x",
                        "14.x",
                        "12.x",
                        "10.x",
                        "8.10.x"
                      ],
                      "description": "If set it overrides the `projectSettings.nodeVersion` for this deployment."
                    },
                    "readyState": {
                      "type": "string",
                      "enum": [
                        "CANCELED",
                        "ERROR",
                        "QUEUED",
                        "BUILDING",
                        "INITIALIZING",
                        "READY"
                      ]
                    },
                    "source": {
                      "type": "string",
                      "enum": [
                        "cli",
                        "git",
                        "import",
                        "import/repo",
                        "clone/repo",
                        "api-trigger-git-deploy",
                        "redeploy",
                        "v0-web"
                      ]
                    },
                    "target": {
                      "nullable": true,
                      "type": "string",
                      "enum": [
                        "production",
                        "staging"
                      ]
                    },
                    "errorMessage": {
                      "nullable": true,
                      "type": "string"
                    },
                    "passiveRegions": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service"
                    },
                    "regions": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "aliasError": {
                      "nullable": true,
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    },
                    "aliasFinal": {
                      "nullable": true,
                      "type": "string"
                    },
                    "aliasWarning": {
                      "nullable": true,
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        },
                        "link": {
                          "type": "string"
                        },
                        "action": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    },
                    "automaticAliases": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "buildErrorAt": {
                      "type": "number"
                    },
                    "canceledAt": {
                      "type": "number"
                    },
                    "checksConclusion": {
                      "type": "string",
                      "enum": [
                        "succeeded",
                        "failed",
                        "skipped",
                        "canceled"
                      ]
                    },
                    "checksState": {
                      "type": "string",
                      "enum": [
                        "registered",
                        "running",
                        "completed"
                      ]
                    },
                    "defaultRoute": {
                      "type": "string",
                      "description": "Computed field that is only available for deployments with a microfrontend configuration."
                    },
                    "errorCode": {
                      "type": "string"
                    },
                    "errorLink": {
                      "type": "string"
                    },
                    "errorStep": {
                      "type": "string"
                    },
                    "originCacheRegion": {
                      "type": "string"
                    },
                    "oidcTokenClaims": {
                      "properties": {
                        "iss": {
                          "type": "string"
                        },
                        "sub": {
                          "type": "string"
                        },
                        "scope": {
                          "type": "string"
                        },
                        "aud": {
                          "type": "string"
                        },
                        "owner": {
                          "type": "string"
                        },
                        "owner_id": {
                          "type": "string"
                        },
                        "project": {
                          "type": "string"
                        },
                        "project_id": {
                          "type": "string"
                        },
                        "environment": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "iss",
                        "sub",
                        "scope",
                        "aud",
                        "owner",
                        "owner_id",
                        "project",
                        "project_id",
                        "environment"
                      ],
                      "type": "object"
                    },
                    "readySubstate": {
                      "type": "string",
                      "enum": [
                        "STAGED",
                        "ROLLING",
                        "PROMOTED"
                      ],
                      "description": "Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic"
                    },
                    "softDeletedByRetention": {
                      "type": "boolean"
                    },
                    "undeletedAt": {
                      "type": "number"
                    },
                    "url": {
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string"
                    },
                    "ownerId": {
                      "type": "string"
                    },
                    "monorepoManager": {
                      "nullable": true,
                      "type": "string"
                    },
                    "plan": {
                      "type": "string",
                      "enum": [
                        "hobby",
                        "pro",
                        "enterprise"
                      ]
                    },
                    "config": {
                      "properties": {
                        "version": {
                          "type": "number"
                        },
                        "functionType": {
                          "type": "string",
                          "enum": [
                            "fluid",
                            "standard"
                          ]
                        },
                        "functionMemoryType": {
                          "type": "string",
                          "enum": [
                            "standard",
                            "standard_legacy",
                            "performance"
                          ]
                        },
                        "functionTimeout": {
                          "nullable": true,
                          "type": "number"
                        },
                        "secureComputePrimaryRegion": {
                          "nullable": true,
                          "type": "string"
                        },
                        "secureComputeFallbackRegion": {
                          "nullable": true,
                          "type": "string"
                        },
                        "isUsingActiveCPU": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "functionType",
                        "functionMemoryType",
                        "functionTimeout",
                        "secureComputePrimaryRegion",
                        "secureComputeFallbackRegion"
                      ],
                      "type": "object",
                      "description": "Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured"
                    },
                    "functions": {
                      "nullable": true,
                      "additionalProperties": {
                        "properties": {
                          "architecture": {
                            "type": "string",
                            "enum": [
                              "x86_64",
                              "arm64"
                            ]
                          },
                          "memory": {
                            "type": "number"
                          },
                          "maxDuration": {
                            "type": "number"
                          },
                          "runtime": {
                            "type": "string"
                          },
                          "includeFiles": {
                            "type": "string"
                          },
                          "excludeFiles": {
                            "type": "string"
                          },
                          "experimentalTriggers": {
                            "items": {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "queue/v1beta"
                                  ],
                                  "description": "Event type - must be \"queue/v1beta\" (REQUIRED)"
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "Name of the queue topic to consume from (REQUIRED)"
                                },
                                "consumer": {
                                  "type": "string",
                                  "description": "Name of the consumer group for this trigger (REQUIRED)"
                                },
                                "maxDeliveries": {
                                  "type": "number",
                                  "description": "Maximum number of delivery attempts for message processing (OPTIONAL) This represents the total number of times a message can be delivered, not the number of retries. Must be at least 1 if specified. Behavior when not specified depends on the server's default configuration."
                                },
                                "retryAfterSeconds": {
                                  "type": "number",
                                  "description": "Delay in seconds before retrying failed executions (OPTIONAL) Behavior when not specified depends on the server's default configuration."
                                },
                                "initialDelaySeconds": {
                                  "type": "number",
                                  "description": "Initial delay in seconds before first execution attempt (OPTIONAL) Must be 0 or greater. Use 0 for no initial delay. Behavior when not specified depends on the server's default configuration."
                                }
                              },
                              "required": [
                                "type",
                                "topic",
                                "consumer"
                              ],
                              "type": "object",
                              "description": "Queue trigger event for Vercel's queue system. Handles \"queue/v1beta\" events with queue-specific configuration."
                            },
                            "type": "array"
                          },
                          "supportsCancellation": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "type": "object"
                    },
                    "routes": {
                      "nullable": true,
                      "items": {
                        "oneOf": [
                          {
                            "properties": {
                              "src": {
                                "type": "string"
                              },
                              "dest": {
                                "type": "string"
                              },
                              "headers": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "type": "object"
                              },
                              "methods": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "continue": {
                                "type": "boolean"
                              },
                              "override": {
                                "type": "boolean"
                              },
                              "caseSensitive": {
                                "type": "boolean"
                              },
                              "check": {
                                "type": "boolean"
                              },
                              "important": {
                                "type": "boolean"
                              },
                              "status": {
                                "type": "number"
                              },
                              "has": {
                                "items": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "host"
                                          ]
                                        },
                                        "value": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "eq": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    }
                                                  ]
                                                },
                                                "neq": {
                                                  "type": "string"
                                                },
                                                "inc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "ninc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "pre": {
                                                  "type": "string"
                                                },
                                                "suf": {
                                                  "type": "string"
                                                },
                                                "re": {
                                                  "type": "string"
                                                },
                                                "gt": {
                                                  "type": "number"
                                                },
                                                "gte": {
                                                  "type": "number"
                                                },
                                                "lt": {
                                                  "type": "number"
                                                },
                                                "lte": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "value"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "header",
                                            "cookie",
                                            "query"
                                          ]
                                        },
                                        "key": {
                                          "type": "string"
                                        },
                                        "value": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "eq": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    }
                                                  ]
                                                },
                                                "neq": {
                                                  "type": "string"
                                                },
                                                "inc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "ninc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "pre": {
                                                  "type": "string"
                                                },
                                                "suf": {
                                                  "type": "string"
                                                },
                                                "re": {
                                                  "type": "string"
                                                },
                                                "gt": {
                                                  "type": "number"
                                                },
                                                "gte": {
                                                  "type": "number"
                                                },
                                                "lt": {
                                                  "type": "number"
                                                },
                                                "lte": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "key"
                                      ],
                                      "type": "object"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              "missing": {
                                "items": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "host"
                                          ]
                                        },
                                        "value": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "eq": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    }
                                                  ]
                                                },
                                                "neq": {
                                                  "type": "string"
                                                },
                                                "inc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "ninc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "pre": {
                                                  "type": "string"
                                                },
                                                "suf": {
                                                  "type": "string"
                                                },
                                                "re": {
                                                  "type": "string"
                                                },
                                                "gt": {
                                                  "type": "number"
                                                },
                                                "gte": {
                                                  "type": "number"
                                                },
                                                "lt": {
                                                  "type": "number"
                                                },
                                                "lte": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "value"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "header",
                                            "cookie",
                                            "query"
                                          ]
                                        },
                                        "key": {
                                          "type": "string"
                                        },
                                        "value": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "eq": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    }
                                                  ]
                                                },
                                                "neq": {
                                                  "type": "string"
                                                },
                                                "inc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "ninc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "pre": {
                                                  "type": "string"
                                                },
                                                "suf": {
                                                  "type": "string"
                                                },
                                                "re": {
                                                  "type": "string"
                                                },
                                                "gt": {
                                                  "type": "number"
                                                },
                                                "gte": {
                                                  "type": "number"
                                                },
                                                "lt": {
                                                  "type": "number"
                                                },
                                                "lte": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "key"
                                      ],
                                      "type": "object"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              "mitigate": {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "challenge",
                                      "deny"
                                    ]
                                  }
                                },
                                "required": [
                                  "action"
                                ],
                                "type": "object"
                              },
                              "transforms": {
                                "items": {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "request.headers",
                                        "request.query",
                                        "response.headers"
                                      ]
                                    },
                                    "op": {
                                      "type": "string",
                                      "enum": [
                                        "append",
                                        "set",
                                        "delete"
                                      ]
                                    },
                                    "target": {
                                      "properties": {
                                        "key": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "eq": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    }
                                                  ]
                                                },
                                                "neq": {
                                                  "type": "string"
                                                },
                                                "inc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "ninc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "pre": {
                                                  "type": "string"
                                                },
                                                "suf": {
                                                  "type": "string"
                                                },
                                                "gt": {
                                                  "type": "number"
                                                },
                                                "gte": {
                                                  "type": "number"
                                                },
                                                "lt": {
                                                  "type": "number"
                                                },
                                                "lte": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "key"
                                      ],
                                      "type": "object"
                                    },
                                    "args": {
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "op",
                                    "target"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "locale": {
                                "properties": {
                                  "redirect": {
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "type": "object"
                                  },
                                  "cookie": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "middlewarePath": {
                                "type": "string",
                                "description": "A middleware key within the `output` key under the build result. Overrides a `middleware` definition."
                              },
                              "middlewareRawSrc": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array",
                                "description": "The original middleware matchers."
                              },
                              "middleware": {
                                "type": "number",
                                "description": "A middleware index in the `middleware` key under the build result"
                              }
                            },
                            "required": [
                              "src"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "handle": {
                                "type": "string",
                                "enum": [
                                  "error",
                                  "filesystem",
                                  "hit",
                                  "miss",
                                  "rewrite",
                                  "resource"
                                ]
                              },
                              "src": {
                                "type": "string"
                              },
                              "dest": {
                                "type": "string"
                              },
                              "status": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "handle"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "src": {
                                "type": "string"
                              },
                              "continue": {
                                "type": "boolean"
                              },
                              "middleware": {
                                "type": "number",
                                "enum": [
                                  0
                                ]
                              }
                            },
                            "required": [
                              "src",
                              "continue",
                              "middleware"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "crons": {
                      "items": {
                        "properties": {
                          "schedule": {
                            "type": "string"
                          },
                          "path": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "schedule",
                          "path"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "checks": {
                      "properties": {
                        "deployment-alias": {
                          "properties": {
                            "state": {
                              "type": "string",
                              "enum": [
                                "succeeded",
                                "failed",
                                "pending"
                              ]
                            },
                            "startedAt": {
                              "type": "number"
                            },
                            "completedAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "state",
                            "startedAt"
                          ],
                          "type": "object",
                          "description": "Condensed check data. Retrieve individual check and check run data using api-checks v2 routes."
                        }
                      },
                      "required": [
                        "deployment-alias"
                      ],
                      "type": "object"
                    },
                    "microfrontends": {
                      "oneOf": [
                        {
                          "properties": {
                            "isDefaultApp": {
                              "type": "boolean"
                            },
                            "defaultAppProjectName": {
                              "type": "string",
                              "description": "The project name of the default app of this deployment's microfrontends group."
                            },
                            "defaultRoute": {
                              "type": "string",
                              "description": "A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI."
                            },
                            "groupIds": {
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                              "description": "The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together."
                            },
                            "microfrontendsAlias2Enabled": {
                              "type": "boolean",
                              "description": "Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not."
                            }
                          },
                          "required": [
                            "defaultAppProjectName",
                            "groupIds"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "isDefaultApp": {
                              "type": "boolean"
                            },
                            "applications": {
                              "additionalProperties": {
                                "properties": {
                                  "isDefaultApp": {
                                    "type": "boolean"
                                  },
                                  "productionHost": {
                                    "type": "string",
                                    "description": "This is the production alias, it will always show the most up to date of each application."
                                  },
                                  "deploymentAlias": {
                                    "type": "string",
                                    "description": "Use the fixed deploymentAlias and deploymentHost so that the microfrontend preview stays in sync with the deployment. These are only present for mono-repos when a single commit creates multiple deployments. If they are not present, productionHost will be used."
                                  },
                                  "deploymentHost": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "productionHost"
                                ],
                                "type": "object",
                                "description": "A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment. Note: this field will be removed when MFE alias routing is fully rolled out."
                              },
                              "type": "object",
                              "description": "A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment. Note: this field will be removed when MFE alias routing is fully rolled out."
                            },
                            "mfeConfigUploadState": {
                              "type": "string",
                              "enum": [
                                "error",
                                "success",
                                "no_config"
                              ],
                              "description": "The result of the microfrontends config upload during deployment creation. Only set for default app deployments. - `success` - The config was uploaded successfully. - `error` - The config upload failed. - `no_config` - No config was found to upload. - `undefined` - The config upload has not been attempted yet."
                            },
                            "defaultAppProjectName": {
                              "type": "string",
                              "description": "The project name of the default app of this deployment's microfrontends group."
                            },
                            "defaultRoute": {
                              "type": "string",
                              "description": "A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI."
                            },
                            "groupIds": {
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                              "description": "The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together."
                            },
                            "microfrontendsAlias2Enabled": {
                              "type": "boolean",
                              "description": "Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not."
                            }
                          },
                          "required": [
                            "isDefaultApp",
                            "defaultAppProjectName",
                            "groupIds"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "connectBuildsEnabled": {
                      "type": "boolean"
                    },
                    "connectConfigurationId": {
                      "type": "string"
                    },
                    "createdIn": {
                      "type": "string"
                    },
                    "passiveConnectConfigurationId": {
                      "type": "string",
                      "description": "Since November 2023 this field defines a Secure Compute network that will only be used to deploy passive lambdas to (as in passiveRegions)"
                    },
                    "flags": {
                      "oneOf": [
                        {
                          "properties": {
                            "definitions": {
                              "additionalProperties": {
                                "properties": {
                                  "options": {
                                    "items": {
                                      "properties": {
                                        "value": {
                                          "$ref": "#/components/schemas/FlagJSONValue"
                                        },
                                        "label": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "value"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "url": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "object"
                            }
                          },
                          "required": [
                            "definitions"
                          ],
                          "type": "object",
                          "description": "Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags."
                        },
                        {
                          "items": {
                            "type": "object",
                            "description": "Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags."
                          },
                          "type": "array",
                          "description": "Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags."
                        }
                      ]
                    },
                    "gitRepo": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "properties": {
                            "namespace": {
                              "type": "string"
                            },
                            "projectId": {
                              "type": "number"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "gitlab"
                              ]
                            },
                            "url": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "defaultBranch": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "private": {
                              "type": "boolean"
                            },
                            "ownerType": {
                              "type": "string",
                              "enum": [
                                "team",
                                "user"
                              ]
                            }
                          },
                          "required": [
                            "namespace",
                            "projectId",
                            "type",
                            "url",
                            "path",
                            "defaultBranch",
                            "name",
                            "private",
                            "ownerType"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "github"
                              ]
                            },
                            "repoOwnerId": {
                              "type": "number"
                            },
                            "path": {
                              "type": "string"
                            },
                            "defaultBranch": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "private": {
                              "type": "boolean"
                            },
                            "ownerType": {
                              "type": "string",
                              "enum": [
                                "team",
                                "user"
                              ]
                            }
                          },
                          "required": [
                            "org",
                            "repo",
                            "repoId",
                            "type",
                            "repoOwnerId",
                            "path",
                            "defaultBranch",
                            "name",
                            "private",
                            "ownerType"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "owner": {
                              "type": "string"
                            },
                            "repoUuid": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "bitbucket"
                              ]
                            },
                            "workspaceUuid": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "defaultBranch": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "private": {
                              "type": "boolean"
                            },
                            "ownerType": {
                              "type": "string",
                              "enum": [
                                "team",
                                "user"
                              ]
                            }
                          },
                          "required": [
                            "owner",
                            "repoUuid",
                            "slug",
                            "type",
                            "workspaceUuid",
                            "path",
                            "defaultBranch",
                            "name",
                            "private",
                            "ownerType"
                          ],
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "required": [
                    "build",
                    "env",
                    "inspectorUrl",
                    "isInConcurrentBuildsQueue",
                    "isInSystemBuildsQueue",
                    "projectSettings",
                    "aliasAssigned",
                    "bootedAt",
                    "buildingAt",
                    "buildSkipped",
                    "creator",
                    "public",
                    "status",
                    "id",
                    "name",
                    "createdAt",
                    "type",
                    "version",
                    "meta",
                    "readyState",
                    "regions",
                    "url",
                    "projectId",
                    "ownerId",
                    "plan",
                    "routes",
                    "createdIn"
                  ],
                  "type": "object",
                  "description": "The successfully created deployment"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated\nPro customers are allowed to deploy Serverless Functions to up to `proMaxRegions` regions, or if the project was created before the limit was introduced.\nDeploying to Serverless Functions to multiple regions requires a plan update"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "The deployment project is being transferred"
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "forceNew",
            "description": "Forces a new deployment even if there is a previous similar deployment",
            "in": "query",
            "schema": {
              "description": "Forces a new deployment even if there is a previous similar deployment",
              "enum": [
                "0",
                "1"
              ]
            }
          },
          {
            "name": "skipAutoDetectionConfirmation",
            "description": "Allows to skip framework detection so the API would not fail to ask for confirmation",
            "in": "query",
            "schema": {
              "description": "Allows to skip framework detection so the API would not fail to ask for confirmation",
              "enum": [
                "0",
                "1"
              ]
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "customEnvironmentSlugOrId": {
                    "description": "Deploy to a custom environment, which will override the default environment",
                    "type": "string"
                  },
                  "deploymentId": {
                    "description": "An deployment id for an existing deployment to redeploy",
                    "type": "string",
                    "example": "dpl_2qn7PZrx89yxY34vEZPD31Y9XVj6"
                  },
                  "files": {
                    "description": "A list of objects with the files to be deployed",
                    "items": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "description": "Used in the case you want to inline a file inside the request",
                          "properties": {
                            "data": {
                              "description": "The file content, it could be either a `base64` (useful for images, etc.) of the files or the plain content for source code",
                              "type": "string"
                            },
                            "encoding": {
                              "description": "The file content encoding, it could be either a base64 (useful for images, etc.) of the files or the plain text for source code.",
                              "enum": [
                                "base64",
                                "utf-8"
                              ]
                            },
                            "file": {
                              "description": "The file name including the whole path",
                              "example": "folder/file.js",
                              "type": "string"
                            }
                          },
                          "required": [
                            "file",
                            "data"
                          ],
                          "title": "InlinedFile",
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "description": "Used in the case you want to reference a file that was already uploaded",
                          "properties": {
                            "file": {
                              "description": "The file path relative to the project root",
                              "example": "folder/file.js",
                              "type": "string"
                            },
                            "sha": {
                              "description": "The file contents hashed with SHA1, used to check the integrity",
                              "type": "string"
                            },
                            "size": {
                              "description": "The file size in bytes",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "file"
                          ],
                          "title": "UploadedFile",
                          "type": "object"
                        }
                      ]
                    },
                    "type": "array"
                  },
                  "gitMetadata": {
                    "description": "Populates initial git metadata for different git providers.",
                    "additionalProperties": false,
                    "type": "object",
                    "properties": {
                      "remoteUrl": {
                        "type": "string",
                        "description": "The git repository's remote origin url",
                        "example": "https://github.com/vercel/next.js"
                      },
                      "commitAuthorName": {
                        "type": "string",
                        "description": "The name of the author of the commit",
                        "example": "kyliau"
                      },
                      "commitAuthorEmail": {
                        "type": "string",
                        "description": "The email of the author of the commit",
                        "example": "kyliau@example.com"
                      },
                      "commitMessage": {
                        "type": "string",
                        "description": "The commit message",
                        "example": "add method to measure Interaction to Next Paint (INP) (#36490)"
                      },
                      "commitRef": {
                        "type": "string",
                        "description": "The branch on which the commit was made",
                        "example": "main"
                      },
                      "commitSha": {
                        "type": "string",
                        "description": "The hash of the commit",
                        "example": "dc36199b2234c6586ebe05ec94078a895c707e29"
                      },
                      "dirty": {
                        "type": "boolean",
                        "description": "Whether or not there have been modifications to the working tree since the latest commit",
                        "example": true
                      },
                      "ci": {
                        "type": "boolean",
                        "description": "True if process.env.CI was set when deploying",
                        "example": true
                      },
                      "ciType": {
                        "type": "string",
                        "description": "The type of CI system used",
                        "example": "github-actions"
                      },
                      "ciGitProviderUsername": {
                        "type": "string",
                        "description": "The username used for the Git Provider (e.g. GitHub) if their CI (e.g. GitHub Actions) was used, if available",
                        "example": "rauchg"
                      },
                      "ciGitRepoVisibility": {
                        "type": "string",
                        "description": "The visibility of the Git repository if their CI (e.g. GitHub Actions) was used, if available",
                        "example": "private"
                      }
                    }
                  },
                  "gitSource": {
                    "description": "Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.",
                    "anyOf": [
                      {
                        "properties": {
                          "ref": {
                            "type": "string",
                            "example": "main"
                          },
                          "repoId": {
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "example": 123456789
                          },
                          "sha": {
                            "type": "string",
                            "example": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"
                          },
                          "type": {
                            "enum": [
                              "github"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "ref",
                          "repoId"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "org": {
                            "type": "string",
                            "example": "vercel"
                          },
                          "ref": {
                            "type": "string",
                            "example": "main"
                          },
                          "repo": {
                            "type": "string",
                            "example": "next.js"
                          },
                          "sha": {
                            "type": "string",
                            "example": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"
                          },
                          "type": {
                            "enum": [
                              "github"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "ref",
                          "org",
                          "repo"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "projectId": {
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "example": 987654321
                          },
                          "ref": {
                            "type": "string",
                            "example": "main"
                          },
                          "sha": {
                            "type": "string",
                            "example": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"
                          },
                          "type": {
                            "enum": [
                              "gitlab"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "ref",
                          "projectId"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "ref": {
                            "type": "string",
                            "example": "main"
                          },
                          "repoUuid": {
                            "type": "string",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                          },
                          "sha": {
                            "type": "string",
                            "example": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"
                          },
                          "type": {
                            "enum": [
                              "bitbucket"
                            ],
                            "type": "string"
                          },
                          "workspaceUuid": {
                            "type": "string",
                            "example": "987e6543-e21b-12d3-a456-426614174000"
                          }
                        },
                        "required": [
                          "type",
                          "ref",
                          "repoUuid"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "owner": {
                            "type": "string",
                            "example": "bitbucket_user"
                          },
                          "ref": {
                            "type": "string",
                            "example": "main"
                          },
                          "sha": {
                            "type": "string",
                            "example": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"
                          },
                          "slug": {
                            "type": "string",
                            "example": "my-awesome-project"
                          },
                          "type": {
                            "enum": [
                              "bitbucket"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "ref",
                          "owner",
                          "slug"
                        ],
                        "type": "object"
                      }
                    ]
                  },
                  "meta": {
                    "additionalProperties": {
                      "maxLength": 65536,
                      "type": "string"
                    },
                    "description": "An object containing the deployment's metadata. Multiple key-value pairs can be attached to a deployment",
                    "example": {
                      "foo": "bar"
                    },
                    "maxProperties": 100,
                    "type": "object"
                  },
                  "monorepoManager": {
                    "description": "The monorepo manager that is being used for this deployment. When `null` is used no monorepo manager is selected",
                    "type": "string",
                    "nullable": true
                  },
                  "name": {
                    "description": "A string with the project name used in the deployment URL",
                    "example": "my-instant-deployment",
                    "type": "string"
                  },
                  "project": {
                    "description": "The target project identifier in which the deployment will be created. When defined, this parameter overrides name",
                    "example": "my-deployment-project",
                    "type": "string"
                  },
                  "projectSettings": {
                    "additionalProperties": false,
                    "description": "Project settings that will be applied to the deployment. It is required for the first deployment of a project and will be saved for any following deployments",
                    "properties": {
                      "buildCommand": {
                        "description": "The build command for this project. When `null` is used this value will be automatically detected",
                        "maxLength": 256,
                        "type": "string",
                        "nullable": true,
                        "example": "next build"
                      },
                      "commandForIgnoringBuildStep": {
                        "maxLength": 256,
                        "type": "string",
                        "nullable": true
                      },
                      "devCommand": {
                        "description": "The dev command for this project. When `null` is used this value will be automatically detected",
                        "maxLength": 256,
                        "type": "string",
                        "nullable": true
                      },
                      "framework": {
                        "description": "The framework that is being used for this project. When `null` is used no framework is selected",
                        "type": "string",
                        "enum": [
                          null,
                          "blitzjs",
                          "nextjs",
                          "gatsby",
                          "remix",
                          "react-router",
                          "astro",
                          "hexo",
                          "eleventy",
                          "docusaurus-2",
                          "docusaurus",
                          "preact",
                          "solidstart-1",
                          "solidstart",
                          "dojo",
                          "ember",
                          "vue",
                          "scully",
                          "ionic-angular",
                          "angular",
                          "polymer",
                          "svelte",
                          "sveltekit",
                          "sveltekit-1",
                          "ionic-react",
                          "create-react-app",
                          "gridsome",
                          "umijs",
                          "sapper",
                          "saber",
                          "stencil",
                          "nuxtjs",
                          "redwoodjs",
                          "hugo",
                          "jekyll",
                          "brunch",
                          "middleman",
                          "zola",
                          "hydrogen",
                          "vite",
                          "vitepress",
                          "vuepress",
                          "parcel",
                          "fastapi",
                          "fasthtml",
                          "sanity-v3",
                          "sanity",
                          "storybook",
                          "nitro",
                          "hono",
                          "express",
                          "xmcp"
                        ],
                        "nullable": true
                      },
                      "installCommand": {
                        "description": "The install command for this project. When `null` is used this value will be automatically detected",
                        "maxLength": 256,
                        "type": "string",
                        "nullable": true,
                        "example": "pnpm install"
                      },
                      "nodeVersion": {
                        "description": "Override the Node.js version that should be used for this deployment",
                        "enum": [
                          "22.x",
                          "20.x",
                          "18.x",
                          "16.x",
                          "14.x",
                          "12.x",
                          "10.x",
                          "8.10.x"
                        ],
                        "type": "string"
                      },
                      "outputDirectory": {
                        "description": "The output directory of the project. When `null` is used this value will be automatically detected",
                        "maxLength": 256,
                        "type": "string",
                        "nullable": true
                      },
                      "rootDirectory": {
                        "description": "The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root",
                        "maxLength": 256,
                        "type": "string",
                        "nullable": true
                      },
                      "serverlessFunctionRegion": {
                        "description": "The region to deploy Serverless Functions in this project",
                        "maxLength": 4,
                        "type": "string",
                        "nullable": true
                      },
                      "skipGitConnectDuringLink": {
                        "description": "Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.",
                        "type": "boolean",
                        "deprecated": true
                      },
                      "sourceFilesOutsideRootDirectory": {
                        "description": "Indicates if there are source files outside of the root directory, typically used for monorepos",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "target": {
                    "description": "Either not defined, `staging`, `production`, or a custom environment identifier. If `staging`, a staging alias in the format `\u003cproject\u003e-\u003cteam\u003e.vercel.app` will be assigned. If `production`, any aliases defined in `alias` will be assigned. If omitted, the target will be `preview`.",
                    "type": "string",
                    "example": "production"
                  },
                  "withLatestCommit": {
                    "description": "When `true` and `deploymentId` is passed in, the sha from the previous deployment's `gitSource` is removed forcing the latest commit to be used.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v12/deployments/{id}/cancel": {
      "patch": {
        "description": "This endpoint allows you to cancel a deployment which is currently building, by supplying its `id` in the URL.",
        "operationId": "cancelDeployment",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Cancel a deployment",
        "tags": [
          "deployments"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "aliasAssignedAt": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "boolean"
                        }
                      ]
                    },
                    "alwaysRefuseToBuild": {
                      "type": "boolean"
                    },
                    "build": {
                      "properties": {
                        "env": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "env"
                      ],
                      "type": "object"
                    },
                    "buildArtifactUrls": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "builds": {
                      "items": {
                        "properties": {
                          "use": {
                            "type": "string"
                          },
                          "src": {
                            "type": "string"
                          },
                          "config": {
                            "additionalProperties": true,
                            "type": "object"
                          }
                        },
                        "required": [
                          "use"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "env": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "inspectorUrl": {
                      "nullable": true,
                      "type": "string"
                    },
                    "isInConcurrentBuildsQueue": {
                      "type": "boolean"
                    },
                    "isInSystemBuildsQueue": {
                      "type": "boolean"
                    },
                    "projectSettings": {
                      "properties": {
                        "buildCommand": {
                          "nullable": true,
                          "type": "string"
                        },
                        "devCommand": {
                          "nullable": true,
                          "type": "string"
                        },
                        "framework": {
                          "nullable": true,
                          "type": "string",
                          "enum": [
                            "blitzjs",
                            "nextjs",
                            "gatsby",
                            "remix",
                            "react-router",
                            "astro",
                            "hexo",
                            "eleventy",
                            "docusaurus-2",
                            "docusaurus",
                            "preact",
                            "solidstart-1",
                            "solidstart",
                            "dojo",
                            "ember",
                            "vue",
                            "scully",
                            "ionic-angular",
                            "angular",
                            "polymer",
                            "svelte",
                            "sveltekit",
                            "sveltekit-1",
                            "ionic-react",
                            "create-react-app",
                            "gridsome",
                            "umijs",
                            "sapper",
                            "saber",
                            "stencil",
                            "nuxtjs",
                            "redwoodjs",
                            "hugo",
                            "jekyll",
                            "brunch",
                            "middleman",
                            "zola",
                            "hydrogen",
                            "vite",
                            "vitepress",
                            "vuepress",
                            "parcel",
                            "fastapi",
                            "fasthtml",
                            "sanity-v3",
                            "sanity",
                            "storybook",
                            "nitro",
                            "hono",
                            "express",
                            "xmcp"
                          ]
                        },
                        "commandForIgnoringBuildStep": {
                          "nullable": true,
                          "type": "string"
                        },
                        "installCommand": {
                          "nullable": true,
                          "type": "string"
                        },
                        "outputDirectory": {
                          "nullable": true,
                          "type": "string"
                        },
                        "speedInsights": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "enabledAt": {
                              "type": "number"
                            },
                            "disabledAt": {
                              "type": "number"
                            },
                            "canceledAt": {
                              "type": "number"
                            },
                            "hasData": {
                              "type": "boolean"
                            },
                            "paidAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        },
                        "webAnalytics": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "disabledAt": {
                              "type": "number"
                            },
                            "canceledAt": {
                              "type": "number"
                            },
                            "enabledAt": {
                              "type": "number"
                            },
                            "hasData": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "readyStateReason": {
                      "type": "string"
                    },
                    "integrations": {
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "skipped",
                            "pending",
                            "ready",
                            "error",
                            "timeout"
                          ]
                        },
                        "startedAt": {
                          "type": "number"
                        },
                        "completedAt": {
                          "type": "number"
                        },
                        "skippedAt": {
                          "type": "number"
                        },
                        "skippedBy": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "status",
                        "startedAt"
                      ],
                      "type": "object"
                    },
                    "images": {
                      "properties": {
                        "sizes": {
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "qualities": {
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "domains": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "remotePatterns": {
                          "items": {
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "enum": [
                                  "http",
                                  "https"
                                ],
                                "description": "Must be `http` or `https`."
                              },
                              "hostname": {
                                "type": "string",
                                "description": "Can be literal or wildcard. Single `*` matches a single subdomain. Double `**` matches any number of subdomains."
                              },
                              "port": {
                                "type": "string",
                                "description": "Can be literal port such as `8080` or empty string meaning no port."
                              },
                              "pathname": {
                                "type": "string",
                                "description": "Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments."
                              },
                              "search": {
                                "type": "string",
                                "description": "Can be literal query string such as `?v=1` or empty string meaning no query string."
                              }
                            },
                            "required": [
                              "hostname"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "localPatterns": {
                          "items": {
                            "properties": {
                              "pathname": {
                                "type": "string",
                                "description": "Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments."
                              },
                              "search": {
                                "type": "string",
                                "description": "Can be literal query string such as `?v=1` or empty string meaning no query string."
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "minimumCacheTTL": {
                          "type": "number"
                        },
                        "formats": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "image/avif",
                              "image/webp"
                            ]
                          },
                          "type": "array"
                        },
                        "dangerouslyAllowSVG": {
                          "type": "boolean"
                        },
                        "contentSecurityPolicy": {
                          "type": "string"
                        },
                        "contentDispositionType": {
                          "type": "string",
                          "enum": [
                            "inline",
                            "attachment"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "alias": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "aliasAssigned": {
                      "type": "boolean"
                    },
                    "bootedAt": {
                      "type": "number"
                    },
                    "buildingAt": {
                      "type": "number"
                    },
                    "buildContainerFinishedAt": {
                      "type": "number",
                      "description": "Since April 2025 it necessary for On-Demand Concurrency Minutes calculation"
                    },
                    "buildSkipped": {
                      "type": "boolean"
                    },
                    "creator": {
                      "properties": {
                        "uid": {
                          "type": "string"
                        },
                        "username": {
                          "type": "string"
                        },
                        "avatar": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "uid"
                      ],
                      "type": "object"
                    },
                    "initReadyAt": {
                      "type": "number"
                    },
                    "isFirstBranchDeployment": {
                      "type": "boolean"
                    },
                    "lambdas": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "readyState": {
                            "type": "string",
                            "enum": [
                              "BUILDING",
                              "ERROR",
                              "INITIALIZING",
                              "READY"
                            ]
                          },
                          "entrypoint": {
                            "nullable": true,
                            "type": "string"
                          },
                          "readyStateAt": {
                            "type": "number"
                          },
                          "output": {
                            "items": {
                              "properties": {
                                "path": {
                                  "type": "string"
                                },
                                "functionName": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "path",
                                "functionName"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "id",
                          "output"
                        ],
                        "type": "object",
                        "description": "A partial representation of a Build used by the deployment endpoint."
                      },
                      "type": "array"
                    },
                    "public": {
                      "type": "boolean"
                    },
                    "ready": {
                      "type": "number"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "BUILDING",
                        "ERROR",
                        "INITIALIZING",
                        "QUEUED",
                        "READY",
                        "CANCELED"
                      ]
                    },
                    "team": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "avatar": {
                          "type": "string"
                        },
                        "slug": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "slug"
                      ],
                      "type": "object"
                    },
                    "userAliases": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "previewCommentsEnabled": {
                      "type": "boolean"
                    },
                    "ttyBuildLogs": {
                      "type": "boolean"
                    },
                    "customEnvironment": {
                      "oneOf": [
                        {
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Unique identifier for the custom environment (format: env_*)"
                            },
                            "slug": {
                              "type": "string",
                              "description": "URL-friendly name of the environment"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "production",
                                "preview",
                                "development"
                              ],
                              "description": "The type of environment (production, preview, or development)"
                            },
                            "description": {
                              "type": "string",
                              "description": "Optional description of the environment's purpose"
                            },
                            "branchMatcher": {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "endsWith",
                                    "startsWith",
                                    "equals"
                                  ],
                                  "description": "The type of matching to perform"
                                },
                                "pattern": {
                                  "type": "string",
                                  "description": "The pattern to match against branch names"
                                }
                              },
                              "required": [
                                "type",
                                "pattern"
                              ],
                              "type": "object",
                              "description": "Configuration for matching git branches to this environment"
                            },
                            "domains": {
                              "items": {
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "apexName": {
                                    "type": "string"
                                  },
                                  "projectId": {
                                    "type": "string"
                                  },
                                  "redirect": {
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "redirectStatusCode": {
                                    "nullable": true,
                                    "type": "number",
                                    "enum": [
                                      307,
                                      301,
                                      302,
                                      308
                                    ]
                                  },
                                  "gitBranch": {
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "customEnvironmentId": {
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "updatedAt": {
                                    "type": "number"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                                  },
                                  "verification": {
                                    "items": {
                                      "properties": {
                                        "type": {
                                          "type": "string"
                                        },
                                        "domain": {
                                          "type": "string"
                                        },
                                        "value": {
                                          "type": "string"
                                        },
                                        "reason": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "domain",
                                        "value",
                                        "reason"
                                      ],
                                      "type": "object",
                                      "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                    },
                                    "type": "array",
                                    "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                  }
                                },
                                "required": [
                                  "name",
                                  "apexName",
                                  "projectId",
                                  "verified"
                                ],
                                "type": "object",
                                "description": "List of domains associated with this environment"
                              },
                              "type": "array",
                              "description": "List of domains associated with this environment"
                            },
                            "currentDeploymentAliases": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "description": "List of aliases for the current deployment"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "Timestamp when the environment was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "Timestamp when the environment was last updated"
                            }
                          },
                          "required": [
                            "id",
                            "slug",
                            "type",
                            "createdAt",
                            "updatedAt"
                          ],
                          "type": "object",
                          "description": "Internal representation of a custom environment with all required properties"
                        },
                        {
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "oomReport": {
                      "type": "string",
                      "enum": [
                        "out-of-memory"
                      ]
                    },
                    "id": {
                      "type": "string"
                    },
                    "aliasError": {
                      "nullable": true,
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    },
                    "aliasFinal": {
                      "nullable": true,
                      "type": "string"
                    },
                    "aliasWarning": {
                      "nullable": true,
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        },
                        "link": {
                          "type": "string"
                        },
                        "action": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code",
                        "message"
                      ],
                      "type": "object"
                    },
                    "autoAssignCustomDomains": {
                      "type": "boolean",
                      "description": "applies to custom domains only, defaults to `true`"
                    },
                    "automaticAliases": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "buildErrorAt": {
                      "type": "number"
                    },
                    "checksState": {
                      "type": "string",
                      "enum": [
                        "registered",
                        "running",
                        "completed"
                      ]
                    },
                    "checksConclusion": {
                      "type": "string",
                      "enum": [
                        "skipped",
                        "succeeded",
                        "failed",
                        "canceled"
                      ]
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "deletedAt": {
                      "nullable": true,
                      "type": "number"
                    },
                    "defaultRoute": {
                      "type": "string",
                      "description": "Computed field that is only available for deployments with a microfrontend configuration."
                    },
                    "canceledAt": {
                      "type": "number"
                    },
                    "errorCode": {
                      "type": "string"
                    },
                    "errorLink": {
                      "type": "string"
                    },
                    "errorMessage": {
                      "nullable": true,
                      "type": "string"
                    },
                    "errorStep": {
                      "type": "string"
                    },
                    "passiveRegions": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service"
                    },
                    "gitSource": {
                      "oneOf": [
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github"
                              ]
                            },
                            "repoId": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                }
                              ]
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "repoId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github"
                              ]
                            },
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "org",
                            "repo"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-custom-host"
                              ]
                            },
                            "host": {
                              "type": "string"
                            },
                            "repoId": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                }
                              ]
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "host",
                            "repoId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-custom-host"
                              ]
                            },
                            "host": {
                              "type": "string"
                            },
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "host",
                            "org",
                            "repo"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-limited"
                              ]
                            },
                            "repoId": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                }
                              ]
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "repoId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-limited"
                              ]
                            },
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "org",
                            "repo"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "gitlab"
                              ]
                            },
                            "projectId": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                }
                              ]
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "projectId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "bitbucket"
                              ]
                            },
                            "workspaceUuid": {
                              "type": "string"
                            },
                            "repoUuid": {
                              "type": "string"
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "repoUuid"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "bitbucket"
                              ]
                            },
                            "owner": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            },
                            "ref": {
                              "nullable": true,
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "prId": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "owner",
                            "slug"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "custom"
                              ]
                            },
                            "ref": {
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "gitUrl": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "ref",
                            "sha",
                            "gitUrl"
                          ],
                          "type": "object",
                          "description": "Allows custom git sources (local folder mounted to the container) in test mode"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github"
                              ]
                            },
                            "ref": {
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "ref",
                            "sha",
                            "repoId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-custom-host"
                              ]
                            },
                            "host": {
                              "type": "string"
                            },
                            "ref": {
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "host",
                            "ref",
                            "sha",
                            "repoId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-limited"
                              ]
                            },
                            "ref": {
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "ref",
                            "sha",
                            "repoId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "gitlab"
                              ]
                            },
                            "ref": {
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "projectId": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "type",
                            "ref",
                            "sha",
                            "projectId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "bitbucket"
                              ]
                            },
                            "ref": {
                              "type": "string"
                            },
                            "sha": {
                              "type": "string"
                            },
                            "owner": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            },
                            "workspaceUuid": {
                              "type": "string"
                            },
                            "repoUuid": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "ref",
                            "sha",
                            "workspaceUuid",
                            "repoUuid"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "meta": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object"
                    },
                    "originCacheRegion": {
                      "type": "string"
                    },
                    "nodeVersion": {
                      "type": "string",
                      "enum": [
                        "22.x",
                        "20.x",
                        "18.x",
                        "16.x",
                        "14.x",
                        "12.x",
                        "10.x",
                        "8.10.x"
                      ],
                      "description": "If set it overrides the `projectSettings.nodeVersion` for this deployment."
                    },
                    "project": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "framework": {
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name"
                      ],
                      "type": "object"
                    },
                    "readyState": {
                      "type": "string",
                      "enum": [
                        "BUILDING",
                        "ERROR",
                        "INITIALIZING",
                        "QUEUED",
                        "READY",
                        "CANCELED"
                      ]
                    },
                    "readySubstate": {
                      "type": "string",
                      "enum": [
                        "STAGED",
                        "ROLLING",
                        "PROMOTED"
                      ],
                      "description": "Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic"
                    },
                    "regions": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "softDeletedByRetention": {
                      "type": "boolean"
                    },
                    "source": {
                      "type": "string",
                      "enum": [
                        "api-trigger-git-deploy",
                        "cli",
                        "clone/repo",
                        "git",
                        "import",
                        "import/repo",
                        "redeploy",
                        "v0-web"
                      ]
                    },
                    "target": {
                      "nullable": true,
                      "type": "string",
                      "enum": [
                        "staging",
                        "production"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "LAMBDAS"
                      ]
                    },
                    "undeletedAt": {
                      "type": "number"
                    },
                    "url": {
                      "type": "string"
                    },
                    "version": {
                      "type": "number",
                      "enum": [
                        2
                      ]
                    },
                    "oidcTokenClaims": {
                      "properties": {
                        "iss": {
                          "type": "string"
                        },
                        "sub": {
                          "type": "string"
                        },
                        "scope": {
                          "type": "string"
                        },
                        "aud": {
                          "type": "string"
                        },
                        "owner": {
                          "type": "string"
                        },
                        "owner_id": {
                          "type": "string"
                        },
                        "project": {
                          "type": "string"
                        },
                        "project_id": {
                          "type": "string"
                        },
                        "environment": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "iss",
                        "sub",
                        "scope",
                        "aud",
                        "owner",
                        "owner_id",
                        "project",
                        "project_id",
                        "environment"
                      ],
                      "type": "object"
                    },
                    "connectBuildsEnabled": {
                      "type": "boolean"
                    },
                    "connectConfigurationId": {
                      "type": "string"
                    },
                    "createdIn": {
                      "type": "string"
                    },
                    "crons": {
                      "items": {
                        "properties": {
                          "schedule": {
                            "type": "string"
                          },
                          "path": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "schedule",
                          "path"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "functions": {
                      "nullable": true,
                      "additionalProperties": {
                        "properties": {
                          "architecture": {
                            "type": "string",
                            "enum": [
                              "x86_64",
                              "arm64"
                            ]
                          },
                          "memory": {
                            "type": "number"
                          },
                          "maxDuration": {
                            "type": "number"
                          },
                          "runtime": {
                            "type": "string"
                          },
                          "includeFiles": {
                            "type": "string"
                          },
                          "excludeFiles": {
                            "type": "string"
                          },
                          "experimentalTriggers": {
                            "items": {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "queue/v1beta"
                                  ],
                                  "description": "Event type - must be \"queue/v1beta\" (REQUIRED)"
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "Name of the queue topic to consume from (REQUIRED)"
                                },
                                "consumer": {
                                  "type": "string",
                                  "description": "Name of the consumer group for this trigger (REQUIRED)"
                                },
                                "maxDeliveries": {
                                  "type": "number",
                                  "description": "Maximum number of delivery attempts for message processing (OPTIONAL) This represents the total number of times a message can be delivered, not the number of retries. Must be at least 1 if specified. Behavior when not specified depends on the server's default configuration."
                                },
                                "retryAfterSeconds": {
                                  "type": "number",
                                  "description": "Delay in seconds before retrying failed executions (OPTIONAL) Behavior when not specified depends on the server's default configuration."
                                },
                                "initialDelaySeconds": {
                                  "type": "number",
                                  "description": "Initial delay in seconds before first execution attempt (OPTIONAL) Must be 0 or greater. Use 0 for no initial delay. Behavior when not specified depends on the server's default configuration."
                                }
                              },
                              "required": [
                                "type",
                                "topic",
                                "consumer"
                              ],
                              "type": "object",
                              "description": "Queue trigger event for Vercel's queue system. Handles \"queue/v1beta\" events with queue-specific configuration."
                            },
                            "type": "array"
                          },
                          "supportsCancellation": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "type": "object"
                    },
                    "monorepoManager": {
                      "nullable": true,
                      "type": "string"
                    },
                    "ownerId": {
                      "type": "string"
                    },
                    "passiveConnectConfigurationId": {
                      "type": "string",
                      "description": "Since November 2023 this field defines a Secure Compute network that will only be used to deploy passive lambdas to (as in passiveRegions)"
                    },
                    "plan": {
                      "type": "string",
                      "enum": [
                        "pro",
                        "enterprise",
                        "hobby"
                      ]
                    },
                    "projectId": {
                      "type": "string"
                    },
                    "routes": {
                      "nullable": true,
                      "items": {
                        "oneOf": [
                          {
                            "properties": {
                              "src": {
                                "type": "string"
                              },
                              "dest": {
                                "type": "string"
                              },
                              "headers": {
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "type": "object"
                              },
                              "methods": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "continue": {
                                "type": "boolean"
                              },
                              "override": {
                                "type": "boolean"
                              },
                              "caseSensitive": {
                                "type": "boolean"
                              },
                              "check": {
                                "type": "boolean"
                              },
                              "important": {
                                "type": "boolean"
                              },
                              "status": {
                                "type": "number"
                              },
                              "has": {
                                "items": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "host"
                                          ]
                                        },
                                        "value": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "eq": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    }
                                                  ]
                                                },
                                                "neq": {
                                                  "type": "string"
                                                },
                                                "inc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "ninc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "pre": {
                                                  "type": "string"
                                                },
                                                "suf": {
                                                  "type": "string"
                                                },
                                                "re": {
                                                  "type": "string"
                                                },
                                                "gt": {
                                                  "type": "number"
                                                },
                                                "gte": {
                                                  "type": "number"
                                                },
                                                "lt": {
                                                  "type": "number"
                                                },
                                                "lte": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "value"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "header",
                                            "cookie",
                                            "query"
                                          ]
                                        },
                                        "key": {
                                          "type": "string"
                                        },
                                        "value": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "eq": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    }
                                                  ]
                                                },
                                                "neq": {
                                                  "type": "string"
                                                },
                                                "inc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "ninc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "pre": {
                                                  "type": "string"
                                                },
                                                "suf": {
                                                  "type": "string"
                                                },
                                                "re": {
                                                  "type": "string"
                                                },
                                                "gt": {
                                                  "type": "number"
                                                },
                                                "gte": {
                                                  "type": "number"
                                                },
                                                "lt": {
                                                  "type": "number"
                                                },
                                                "lte": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "key"
                                      ],
                                      "type": "object"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              "missing": {
                                "items": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "host"
                                          ]
                                        },
                                        "value": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "eq": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    }
                                                  ]
                                                },
                                                "neq": {
                                                  "type": "string"
                                                },
                                                "inc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "ninc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "pre": {
                                                  "type": "string"
                                                },
                                                "suf": {
                                                  "type": "string"
                                                },
                                                "re": {
                                                  "type": "string"
                                                },
                                                "gt": {
                                                  "type": "number"
                                                },
                                                "gte": {
                                                  "type": "number"
                                                },
                                                "lt": {
                                                  "type": "number"
                                                },
                                                "lte": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "value"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "header",
                                            "cookie",
                                            "query"
                                          ]
                                        },
                                        "key": {
                                          "type": "string"
                                        },
                                        "value": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "eq": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    }
                                                  ]
                                                },
                                                "neq": {
                                                  "type": "string"
                                                },
                                                "inc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "ninc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "pre": {
                                                  "type": "string"
                                                },
                                                "suf": {
                                                  "type": "string"
                                                },
                                                "re": {
                                                  "type": "string"
                                                },
                                                "gt": {
                                                  "type": "number"
                                                },
                                                "gte": {
                                                  "type": "number"
                                                },
                                                "lt": {
                                                  "type": "number"
                                                },
                                                "lte": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "key"
                                      ],
                                      "type": "object"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              "mitigate": {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "challenge",
                                      "deny"
                                    ]
                                  }
                                },
                                "required": [
                                  "action"
                                ],
                                "type": "object"
                              },
                              "transforms": {
                                "items": {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "request.headers",
                                        "request.query",
                                        "response.headers"
                                      ]
                                    },
                                    "op": {
                                      "type": "string",
                                      "enum": [
                                        "append",
                                        "set",
                                        "delete"
                                      ]
                                    },
                                    "target": {
                                      "properties": {
                                        "key": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "eq": {
                                                  "oneOf": [
                                                    {
                                                      "type": "string"
                                                    },
                                                    {
                                                      "type": "number"
                                                    }
                                                  ]
                                                },
                                                "neq": {
                                                  "type": "string"
                                                },
                                                "inc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "ninc": {
                                                  "items": {
                                                    "type": "string"
                                                  },
                                                  "type": "array"
                                                },
                                                "pre": {
                                                  "type": "string"
                                                },
                                                "suf": {
                                                  "type": "string"
                                                },
                                                "gt": {
                                                  "type": "number"
                                                },
                                                "gte": {
                                                  "type": "number"
                                                },
                                                "lt": {
                                                  "type": "number"
                                                },
                                                "lte": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "key"
                                      ],
                                      "type": "object"
                                    },
                                    "args": {
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "op",
                                    "target"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "locale": {
                                "properties": {
                                  "redirect": {
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "type": "object"
                                  },
                                  "cookie": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "middlewarePath": {
                                "type": "string",
                                "description": "A middleware key within the `output` key under the build result. Overrides a `middleware` definition."
                              },
                              "middlewareRawSrc": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array",
                                "description": "The original middleware matchers."
                              },
                              "middleware": {
                                "type": "number",
                                "description": "A middleware index in the `middleware` key under the build result"
                              }
                            },
                            "required": [
                              "src"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "handle": {
                                "type": "string",
                                "enum": [
                                  "error",
                                  "filesystem",
                                  "hit",
                                  "miss",
                                  "rewrite",
                                  "resource"
                                ]
                              },
                              "src": {
                                "type": "string"
                              },
                              "dest": {
                                "type": "string"
                              },
                              "status": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "handle"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "src": {
                                "type": "string"
                              },
                              "continue": {
                                "type": "boolean"
                              },
                              "middleware": {
                                "type": "number",
                                "enum": [
                                  0
                                ]
                              }
                            },
                            "required": [
                              "src",
                              "continue",
                              "middleware"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "gitRepo": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "properties": {
                            "namespace": {
                              "type": "string"
                            },
                            "projectId": {
                              "type": "number"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "gitlab"
                              ]
                            },
                            "url": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "defaultBranch": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "private": {
                              "type": "boolean"
                            },
                            "ownerType": {
                              "type": "string",
                              "enum": [
                                "team",
                                "user"
                              ]
                            }
                          },
                          "required": [
                            "namespace",
                            "projectId",
                            "type",
                            "url",
                            "path",
                            "defaultBranch",
                            "name",
                            "private",
                            "ownerType"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "org": {
                              "type": "string"
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "github"
                              ]
                            },
                            "repoOwnerId": {
                              "type": "number"
                            },
                            "path": {
                              "type": "string"
                            },
                            "defaultBranch": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "private": {
                              "type": "boolean"
                            },
                            "ownerType": {
                              "type": "string",
                              "enum": [
                                "team",
                                "user"
                              ]
                            }
                          },
                          "required": [
                            "org",
                            "repo",
                            "repoId",
                            "type",
                            "repoOwnerId",
                            "path",
                            "defaultBranch",
                            "name",
                            "private",
                            "ownerType"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "owner": {
                              "type": "string"
                            },
                            "repoUuid": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "bitbucket"
                              ]
                            },
                            "workspaceUuid": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "defaultBranch": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "private": {
                              "type": "boolean"
                            },
                            "ownerType": {
                              "type": "string",
                              "enum": [
                                "team",
                                "user"
                              ]
                            }
                          },
                          "required": [
                            "owner",
                            "repoUuid",
                            "slug",
                            "type",
                            "workspaceUuid",
                            "path",
                            "defaultBranch",
                            "name",
                            "private",
                            "ownerType"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "flags": {
                      "oneOf": [
                        {
                          "properties": {
                            "definitions": {
                              "additionalProperties": {
                                "properties": {
                                  "options": {
                                    "items": {
                                      "properties": {
                                        "value": {
                                          "$ref": "#/components/schemas/FlagJSONValue"
                                        },
                                        "label": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "value"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "url": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "object"
                            }
                          },
                          "required": [
                            "definitions"
                          ],
                          "type": "object",
                          "description": "Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags."
                        },
                        {
                          "items": {
                            "type": "object",
                            "description": "Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags."
                          },
                          "type": "array",
                          "description": "Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags."
                        }
                      ]
                    },
                    "microfrontends": {
                      "oneOf": [
                        {
                          "properties": {
                            "isDefaultApp": {
                              "type": "boolean"
                            },
                            "defaultAppProjectName": {
                              "type": "string",
                              "description": "The project name of the default app of this deployment's microfrontends group."
                            },
                            "defaultRoute": {
                              "type": "string",
                              "description": "A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI."
                            },
                            "groupIds": {
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                              "description": "The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together."
                            },
                            "microfrontendsAlias2Enabled": {
                              "type": "boolean",
                              "description": "Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not."
                            }
                          },
                          "required": [
                            "defaultAppProjectName",
                            "groupIds"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "isDefaultApp": {
                              "type": "boolean"
                            },
                            "applications": {
                              "additionalProperties": {
                                "properties": {
                                  "isDefaultApp": {
                                    "type": "boolean"
                                  },
                                  "productionHost": {
                                    "type": "string",
                                    "description": "This is the production alias, it will always show the most up to date of each application."
                                  },
                                  "deploymentAlias": {
                                    "type": "string",
                                    "description": "Use the fixed deploymentAlias and deploymentHost so that the microfrontend preview stays in sync with the deployment. These are only present for mono-repos when a single commit creates multiple deployments. If they are not present, productionHost will be used."
                                  },
                                  "deploymentHost": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "productionHost"
                                ],
                                "type": "object",
                                "description": "A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment. Note: this field will be removed when MFE alias routing is fully rolled out."
                              },
                              "type": "object",
                              "description": "A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment. Note: this field will be removed when MFE alias routing is fully rolled out."
                            },
                            "mfeConfigUploadState": {
                              "type": "string",
                              "enum": [
                                "error",
                                "success",
                                "no_config"
                              ],
                              "description": "The result of the microfrontends config upload during deployment creation. Only set for default app deployments. - `success` - The config was uploaded successfully. - `error` - The config upload failed. - `no_config` - No config was found to upload. - `undefined` - The config upload has not been attempted yet."
                            },
                            "defaultAppProjectName": {
                              "type": "string",
                              "description": "The project name of the default app of this deployment's microfrontends group."
                            },
                            "defaultRoute": {
                              "type": "string",
                              "description": "A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI."
                            },
                            "groupIds": {
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                              "description": "The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together."
                            },
                            "microfrontendsAlias2Enabled": {
                              "type": "boolean",
                              "description": "Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not."
                            }
                          },
                          "required": [
                            "isDefaultApp",
                            "defaultAppProjectName",
                            "groupIds"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "config": {
                      "properties": {
                        "version": {
                          "type": "number"
                        },
                        "functionType": {
                          "type": "string",
                          "enum": [
                            "fluid",
                            "standard"
                          ]
                        },
                        "functionMemoryType": {
                          "type": "string",
                          "enum": [
                            "standard",
                            "standard_legacy",
                            "performance"
                          ]
                        },
                        "functionTimeout": {
                          "nullable": true,
                          "type": "number"
                        },
                        "secureComputePrimaryRegion": {
                          "nullable": true,
                          "type": "string"
                        },
                        "secureComputeFallbackRegion": {
                          "nullable": true,
                          "type": "string"
                        },
                        "isUsingActiveCPU": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "functionType",
                        "functionMemoryType",
                        "functionTimeout",
                        "secureComputePrimaryRegion",
                        "secureComputeFallbackRegion"
                      ],
                      "type": "object",
                      "description": "Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured"
                    },
                    "checks": {
                      "properties": {
                        "deployment-alias": {
                          "properties": {
                            "state": {
                              "type": "string",
                              "enum": [
                                "succeeded",
                                "failed",
                                "pending"
                              ]
                            },
                            "startedAt": {
                              "type": "number"
                            },
                            "completedAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "state",
                            "startedAt"
                          ],
                          "type": "object",
                          "description": "Condensed check data. Retrieve individual check and check run data using api-checks v2 routes."
                        }
                      },
                      "required": [
                        "deployment-alias"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "build",
                    "env",
                    "inspectorUrl",
                    "isInConcurrentBuildsQueue",
                    "isInSystemBuildsQueue",
                    "projectSettings",
                    "aliasAssigned",
                    "bootedAt",
                    "buildingAt",
                    "buildSkipped",
                    "creator",
                    "public",
                    "status",
                    "id",
                    "createdAt",
                    "name",
                    "meta",
                    "readyState",
                    "regions",
                    "type",
                    "url",
                    "version",
                    "createdIn",
                    "ownerId",
                    "plan",
                    "projectId",
                    "routes"
                  ],
                  "type": "object",
                  "description": "The private deployment representation of a Deployment."
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique identifier of the deployment.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "dpl_5WJWYSyB7BpgTj3EuwF37WMRBXBtPQ2iTMJHJBJyRfd",
              "description": "The unique identifier of the deployment."
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v5/domains/buy": {
      "post": {
        "description": "Allows to purchase the specified domain.",
        "operationId": "buyDomain",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Purchase a domain",
        "tags": [
          "domains"
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "domain": {
                      "properties": {
                        "uid": {
                          "type": "string"
                        },
                        "ns": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "verified": {
                          "type": "boolean"
                        },
                        "created": {
                          "type": "number"
                        },
                        "pending": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "uid",
                        "ns",
                        "verified",
                        "created",
                        "pending"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "domain"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "domain": {
                      "properties": {
                        "uid": {
                          "type": "string"
                        },
                        "ns": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "verified": {
                          "type": "boolean"
                        },
                        "created": {
                          "type": "number"
                        },
                        "pending": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "uid",
                        "ns",
                        "verified",
                        "created",
                        "pending"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "domain"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "409": {
            "description": ""
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelRateLimitError"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "name",
                  "country",
                  "firstName",
                  "lastName",
                  "address1",
                  "city",
                  "state",
                  "postalCode",
                  "phone",
                  "email"
                ],
                "properties": {
                  "name": {
                    "description": "The domain name to purchase.",
                    "type": "string",
                    "example": "example.com"
                  },
                  "expectedPrice": {
                    "description": "The price you expect to be charged for the purchase.",
                    "type": "number",
                    "example": 10
                  },
                  "renew": {
                    "description": "Indicates whether the domain should be automatically renewed.",
                    "type": "boolean",
                    "example": true
                  },
                  "country": {
                    "description": "The country of the domain registrant",
                    "type": "string",
                    "example": "US"
                  },
                  "orgName": {
                    "description": "The company name of the domain registrant",
                    "type": "string",
                    "example": "Acme Inc."
                  },
                  "firstName": {
                    "description": "The first name of the domain registrant",
                    "type": "string",
                    "example": "Jane"
                  },
                  "lastName": {
                    "description": "The last name of the domain registrant",
                    "type": "string",
                    "example": "Doe"
                  },
                  "address1": {
                    "description": "The street address of the domain registrant",
                    "type": "string",
                    "example": "340 S Lemon Ave Suite 4133"
                  },
                  "city": {
                    "description": "The city of the domain registrant",
                    "type": "string",
                    "example": "San Francisco"
                  },
                  "state": {
                    "description": "The state of the domain registrant",
                    "type": "string",
                    "example": "CA"
                  },
                  "postalCode": {
                    "description": "The postal code of the domain registrant",
                    "type": "string",
                    "example": "91789"
                  },
                  "phone": {
                    "description": "The phone number of the domain registrant",
                    "type": "string",
                    "example": "+1.4158551452"
                  },
                  "email": {
                    "description": "The email of the domain registrant",
                    "type": "string",
                    "example": "jane.doe@someplace.com"
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v4/domains/price": {
      "get": {
        "description": "Check the price to purchase a domain and how long a single purchase period is.",
        "operationId": "checkDomainPrice",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Check the price for a domain",
        "tags": [
          "domains"
        ],
        "responses": {
          "200": {
            "description": "Successful response which returns the price of the domain and the period.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "price": {
                      "type": "number",
                      "description": "The domain price in USD.",
                      "example": 20
                    },
                    "period": {
                      "type": "number",
                      "description": "The number of years the domain could be held before paying again.",
                      "example": 1
                    }
                  },
                  "required": [
                    "price",
                    "period"
                  ],
                  "type": "object",
                  "description": "Successful response which returns the price of the domain and the period."
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the domain for which the price needs to be checked.",
            "in": "query",
            "required": true,
            "schema": {
              "description": "The name of the domain for which the price needs to be checked.",
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "name": "type",
            "description": "In which status of the domain the price needs to be checked.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "In which status of the domain the price needs to be checked.",
              "type": "string",
              "enum": [
                "new",
                "renewal",
                "transfer",
                "redemption"
              ],
              "example": "new"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v4/domains/status": {
      "get": {
        "description": "Check if a domain name is available for purchase.",
        "operationId": "checkDomainStatus",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Check a Domain Availability",
        "tags": [
          "domains"
        ],
        "responses": {
          "200": {
            "description": "Successful response checking if a Domain's name is available.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "available": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "available"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "408": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the domain for which we would like to check the status.",
            "in": "query",
            "required": true,
            "schema": {
              "description": "The name of the domain for which we would like to check the status.",
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v4/domains/{domain}/records": {
      "get": {
        "description": "Retrieves a list of DNS records created for a domain name. By default it returns 20 records if no limit is provided. The rest can be retrieved using the pagination options.",
        "operationId": "getRecords",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List existing DNS records",
        "tags": [
          "dns"
        ],
        "responses": {
          "200": {
            "description": "Successful response retrieving a list of paginated DNS records.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "properties": {
                        "records": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "slug": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "A",
                                  "AAAA",
                                  "ALIAS",
                                  "CAA",
                                  "CNAME",
                                  "HTTPS",
                                  "MX",
                                  "SRV",
                                  "TXT",
                                  "NS"
                                ]
                              },
                              "value": {
                                "type": "string"
                              },
                              "mxPriority": {
                                "type": "number"
                              },
                              "priority": {
                                "type": "number"
                              },
                              "creator": {
                                "type": "string"
                              },
                              "created": {
                                "nullable": true,
                                "type": "number"
                              },
                              "updated": {
                                "nullable": true,
                                "type": "number"
                              },
                              "createdAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "updatedAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "ttl": {
                                "type": "number"
                              },
                              "comment": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "slug",
                              "name",
                              "type",
                              "value",
                              "creator",
                              "created",
                              "updated",
                              "createdAt",
                              "updatedAt"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "records"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "records": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "slug": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "A",
                                  "AAAA",
                                  "ALIAS",
                                  "CAA",
                                  "CNAME",
                                  "HTTPS",
                                  "MX",
                                  "SRV",
                                  "TXT",
                                  "NS"
                                ]
                              },
                              "value": {
                                "type": "string"
                              },
                              "mxPriority": {
                                "type": "number"
                              },
                              "priority": {
                                "type": "number"
                              },
                              "creator": {
                                "type": "string"
                              },
                              "created": {
                                "nullable": true,
                                "type": "number"
                              },
                              "updated": {
                                "nullable": true,
                                "type": "number"
                              },
                              "createdAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "updatedAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "ttl": {
                                "type": "number"
                              },
                              "comment": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "slug",
                              "name",
                              "type",
                              "value",
                              "creator",
                              "created",
                              "updated",
                              "createdAt",
                              "updatedAt"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      },
                      "required": [
                        "records",
                        "pagination"
                      ],
                      "type": "object",
                      "description": "Successful response retrieving a list of paginated DNS records."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of records to list from a request.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Maximum number of records to list from a request.",
              "type": "string",
              "example": 20
            }
          },
          {
            "name": "since",
            "description": "Get records created after this JavaScript timestamp.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Get records created after this JavaScript timestamp.",
              "type": "string",
              "example": 1609499532000
            }
          },
          {
            "name": "until",
            "description": "Get records created before this JavaScript timestamp.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Get records created before this JavaScript timestamp.",
              "type": "string",
              "example": 1612264332000
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "x-speakeasy-test": false
      }
    },
    "/v2/domains/{domain}/records": {
      "post": {
        "description": "Creates a DNS record for a domain.",
        "operationId": "createRecord",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create a DNS record",
        "tags": [
          "dns"
        ],
        "responses": {
          "200": {
            "description": "Successful response showing the uid of the newly created DNS record.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "uid": {
                          "type": "string"
                        },
                        "updated": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "uid",
                        "updated"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "uid": {
                          "type": "string",
                          "description": "The id of the newly created DNS record",
                          "example": "rec_V0fra8eEgQwEpFhYG2vTzC3K"
                        }
                      },
                      "required": [
                        "uid"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "The domain used to create the DNS record.",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The domain used to create the DNS record.",
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "description": "The type of record, it could be one of the valid DNS records.",
                    "type": "string",
                    "enum": [
                      "A",
                      "AAAA",
                      "ALIAS",
                      "CAA",
                      "CNAME",
                      "HTTPS",
                      "MX",
                      "SRV",
                      "TXT",
                      "NS"
                    ]
                  }
                },
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "value",
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "A subdomain name or an empty string for the root domain.",
                        "type": "string",
                        "example": "subdomain"
                      },
                      "type": {
                        "description": "Must be of type `A`.",
                        "type": "string",
                        "enum": [
                          "A"
                        ]
                      },
                      "ttl": {
                        "description": "The TTL value. Must be a number between 60 and 2147483647. Default value is 60.",
                        "type": "number",
                        "minimum": 60,
                        "maximum": 2147483647,
                        "example": 60
                      },
                      "value": {
                        "description": "The record value must be a valid IPv4 address.",
                        "type": "string",
                        "format": "ipv4",
                        "example": "192.0.2.42"
                      },
                      "comment": {
                        "type": "string",
                        "description": "A comment to add context on what this DNS record is for",
                        "example": "used to verify ownership of domain",
                        "maxLength": 500
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "value",
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "A subdomain name or an empty string for the root domain.",
                        "type": "string",
                        "example": "subdomain"
                      },
                      "type": {
                        "description": "Must be of type `AAAA`.",
                        "type": "string",
                        "enum": [
                          "AAAA"
                        ]
                      },
                      "ttl": {
                        "description": "The TTL value. Must be a number between 60 and 2147483647. Default value is 60.",
                        "type": "number",
                        "minimum": 60,
                        "maximum": 2147483647,
                        "example": 60
                      },
                      "value": {
                        "description": "An AAAA record pointing to an IPv6 address.",
                        "type": "string",
                        "format": "ipv6",
                        "example": "2001:DB8::42"
                      },
                      "comment": {
                        "type": "string",
                        "description": "A comment to add context on what this DNS record is for",
                        "example": "used to verify ownership of domain",
                        "maxLength": 500
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "value",
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "A subdomain name or an empty string for the root domain.",
                        "type": "string",
                        "example": "subdomain"
                      },
                      "type": {
                        "description": "Must be of type `ALIAS`.",
                        "type": "string",
                        "enum": [
                          "ALIAS"
                        ]
                      },
                      "ttl": {
                        "description": "The TTL value. Must be a number between 60 and 2147483647. Default value is 60.",
                        "type": "number",
                        "minimum": 60,
                        "maximum": 2147483647,
                        "example": 60
                      },
                      "value": {
                        "description": "An ALIAS virtual record pointing to a hostname resolved to an A record on server side.",
                        "type": "string",
                        "example": "cname.vercel-dns.com"
                      },
                      "comment": {
                        "type": "string",
                        "description": "A comment to add context on what this DNS record is for",
                        "example": "used to verify ownership of domain",
                        "maxLength": 500
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "value",
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "A subdomain name or an empty string for the root domain.",
                        "type": "string",
                        "example": "subdomain"
                      },
                      "type": {
                        "description": "Must be of type `CAA`.",
                        "type": "string",
                        "enum": [
                          "CAA"
                        ]
                      },
                      "ttl": {
                        "description": "The TTL value. Must be a number between 60 and 2147483647. Default value is 60.",
                        "type": "number",
                        "minimum": 60,
                        "maximum": 2147483647,
                        "example": 60
                      },
                      "value": {
                        "description": "A CAA record to specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.",
                        "type": "string",
                        "example": "0 issue \\\"letsencrypt.org\\\""
                      },
                      "comment": {
                        "type": "string",
                        "description": "A comment to add context on what this DNS record is for",
                        "example": "used to verify ownership of domain",
                        "maxLength": 500
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "A subdomain name or an empty string for the root domain.",
                        "type": "string",
                        "example": "subdomain"
                      },
                      "type": {
                        "description": "Must be of type `CNAME`.",
                        "type": "string",
                        "enum": [
                          "CNAME"
                        ]
                      },
                      "ttl": {
                        "description": "The TTL value. Must be a number between 60 and 2147483647. Default value is 60.",
                        "type": "number",
                        "minimum": 60,
                        "maximum": 2147483647,
                        "example": 60
                      },
                      "value": {
                        "description": "A CNAME record mapping to another domain name.",
                        "type": "string",
                        "example": "cname.vercel-dns.com"
                      },
                      "comment": {
                        "type": "string",
                        "description": "A comment to add context on what this DNS record is for",
                        "example": "used to verify ownership of domain",
                        "maxLength": 500
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "value",
                      "name",
                      "mxPriority"
                    ],
                    "properties": {
                      "name": {
                        "description": "A subdomain name or an empty string for the root domain.",
                        "type": "string",
                        "example": "subdomain"
                      },
                      "type": {
                        "description": "Must be of type `MX`.",
                        "type": "string",
                        "enum": [
                          "MX"
                        ]
                      },
                      "ttl": {
                        "description": "The TTL value. Must be a number between 60 and 2147483647. Default value is 60.",
                        "type": "number",
                        "minimum": 60,
                        "maximum": 2147483647,
                        "example": 60
                      },
                      "value": {
                        "description": "An MX record specifying the mail server responsible for accepting messages on behalf of the domain name.",
                        "type": "string",
                        "example": "10 mail.example.com."
                      },
                      "mxPriority": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 65535,
                        "example": 10
                      },
                      "comment": {
                        "type": "string",
                        "description": "A comment to add context on what this DNS record is for",
                        "example": "used to verify ownership of domain",
                        "maxLength": 500
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "name",
                      "srv"
                    ],
                    "properties": {
                      "type": {
                        "description": "Must be of type `SRV`.",
                        "type": "string",
                        "enum": [
                          "SRV"
                        ]
                      },
                      "ttl": {
                        "description": "The TTL value. Must be a number between 60 and 2147483647. Default value is 60.",
                        "type": "number",
                        "minimum": 60,
                        "maximum": 2147483647,
                        "example": 60
                      },
                      "srv": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "weight",
                          "port",
                          "priority",
                          "target"
                        ],
                        "properties": {
                          "priority": {
                            "anyOf": [
                              {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 65535,
                                "example": 10
                              }
                            ],
                            "nullable": true
                          },
                          "weight": {
                            "anyOf": [
                              {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 65535,
                                "example": 10
                              }
                            ],
                            "nullable": true
                          },
                          "port": {
                            "anyOf": [
                              {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 65535,
                                "example": 5000
                              }
                            ],
                            "nullable": true
                          },
                          "target": {
                            "type": "string",
                            "example": "host.example.com"
                          }
                        }
                      },
                      "comment": {
                        "type": "string",
                        "description": "A comment to add context on what this DNS record is for",
                        "example": "used to verify ownership of domain",
                        "maxLength": 500
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "value",
                      "name"
                    ],
                    "properties": {
                      "type": {
                        "description": "Must be of type `TXT`.",
                        "type": "string",
                        "enum": [
                          "TXT"
                        ]
                      },
                      "ttl": {
                        "description": "The TTL value. Must be a number between 60 and 2147483647. Default value is 60.",
                        "type": "number",
                        "minimum": 60,
                        "maximum": 2147483647,
                        "example": 60
                      },
                      "value": {
                        "description": "A TXT record containing arbitrary text.",
                        "type": "string",
                        "example": "hello"
                      },
                      "comment": {
                        "type": "string",
                        "description": "A comment to add context on what this DNS record is for",
                        "example": "used to verify ownership of domain",
                        "maxLength": 500
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "A subdomain name.",
                        "type": "string",
                        "example": "subdomain"
                      },
                      "type": {
                        "description": "Must be of type `NS`.",
                        "type": "string",
                        "enum": [
                          "NS"
                        ]
                      },
                      "ttl": {
                        "description": "The TTL value. Must be a number between 60 and 2147483647. Default value is 60.",
                        "type": "number",
                        "minimum": 60,
                        "maximum": 2147483647,
                        "example": 60
                      },
                      "value": {
                        "description": "An NS domain value.",
                        "type": "string",
                        "example": "ns1.example.com"
                      },
                      "comment": {
                        "type": "string",
                        "description": "A comment to add context on what this DNS record is for",
                        "example": "used to verify ownership of domain",
                        "maxLength": 500
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "name",
                      "https"
                    ],
                    "properties": {
                      "type": {
                        "description": "Must be of type `HTTPS`.",
                        "type": "string",
                        "enum": [
                          "HTTPS"
                        ]
                      },
                      "ttl": {
                        "description": "The TTL value. Must be a number between 60 and 2147483647. Default value is 60.",
                        "type": "number",
                        "minimum": 60,
                        "maximum": 2147483647,
                        "example": 60
                      },
                      "https": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "priority",
                          "target"
                        ],
                        "properties": {
                          "priority": {
                            "anyOf": [
                              {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 65535,
                                "example": 10
                              }
                            ],
                            "nullable": true
                          },
                          "target": {
                            "type": "string",
                            "example": "host.example.com"
                          },
                          "params": {
                            "type": "string",
                            "example": "alpn=h2,h3"
                          }
                        }
                      },
                      "comment": {
                        "type": "string",
                        "description": "A comment to add context on what this DNS record is for",
                        "example": "used to verify ownership of domain",
                        "maxLength": 500
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "x-speakeasy-test": false
      }
    },
    "/v1/domains/records/{recordId}": {
      "patch": {
        "description": "Updates an existing DNS record for a domain name.",
        "operationId": "updateRecord",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update an existing DNS record",
        "tags": [
          "dns"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "createdAt": {
                      "nullable": true,
                      "type": "number"
                    },
                    "creator": {
                      "type": "string"
                    },
                    "domain": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "recordType": {
                      "type": "string",
                      "enum": [
                        "A",
                        "AAAA",
                        "ALIAS",
                        "CAA",
                        "CNAME",
                        "HTTPS",
                        "MX",
                        "SRV",
                        "TXT",
                        "NS"
                      ]
                    },
                    "ttl": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "record",
                        "record-sys"
                      ]
                    },
                    "value": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "creator",
                    "domain",
                    "id",
                    "name",
                    "recordType",
                    "type",
                    "value"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "recordId",
            "description": "The id of the DNS record",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The id of the DNS record",
              "example": "rec_2qn7pzrx89yxy34vezpd31y9",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the DNS record",
                    "example": "example-1",
                    "nullable": true
                  },
                  "value": {
                    "type": "string",
                    "description": "The value of the DNS record",
                    "example": "google.com",
                    "nullable": true
                  },
                  "type": {
                    "enum": [
                      "A",
                      "AAAA",
                      "ALIAS",
                      "CAA",
                      "CNAME",
                      "HTTPS",
                      "MX",
                      "SRV",
                      "TXT",
                      "NS"
                    ],
                    "type": "string",
                    "description": "The type of the DNS record",
                    "example": "A",
                    "maxLength": 255,
                    "nullable": true
                  },
                  "ttl": {
                    "type": "integer",
                    "description": "The Time to live (TTL) value of the DNS record",
                    "example": "60",
                    "minimum": 60,
                    "maximum": 2147483647,
                    "nullable": true
                  },
                  "mxPriority": {
                    "type": "integer",
                    "description": "The MX priority value of the DNS record",
                    "nullable": true
                  },
                  "srv": {
                    "additionalProperties": false,
                    "required": [
                      "target",
                      "weight",
                      "port",
                      "priority"
                    ],
                    "properties": {
                      "target": {
                        "type": "string",
                        "description": "",
                        "example": "example2.com.",
                        "maxLength": 255,
                        "nullable": true
                      },
                      "weight": {
                        "description": "",
                        "type": "integer",
                        "nullable": true
                      },
                      "port": {
                        "description": "",
                        "type": "integer",
                        "nullable": true
                      },
                      "priority": {
                        "description": "",
                        "type": "integer",
                        "nullable": true
                      }
                    },
                    "type": "object",
                    "nullable": true
                  },
                  "https": {
                    "additionalProperties": false,
                    "required": [
                      "priority",
                      "target"
                    ],
                    "properties": {
                      "priority": {
                        "description": "",
                        "type": "integer",
                        "nullable": true
                      },
                      "target": {
                        "type": "string",
                        "description": "",
                        "example": "example2.com.",
                        "maxLength": 255,
                        "nullable": true
                      },
                      "params": {
                        "description": "",
                        "type": "string",
                        "nullable": true
                      }
                    },
                    "type": "object",
                    "nullable": true
                  },
                  "comment": {
                    "type": "string",
                    "description": "A comment to add context on what this DNS record is for",
                    "example": "used to verify ownership of domain",
                    "maxLength": 500
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v2/domains/{domain}/records/{recordId}": {
      "delete": {
        "description": "Removes an existing DNS record from a domain name.",
        "operationId": "removeRecord",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete a DNS record",
        "tags": [
          "dns"
        ],
        "responses": {
          "200": {
            "description": "Successful response by removing the specified DNS record.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "rec_V0fra8eEgQwEpFhYG2vTzC3K"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/domains/{domain}/registry": {
      "get": {
        "description": "Fetch domain transfer availability or transfer status if a transfer is in progress.",
        "operationId": "getDomainTransfer",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get domain transfer info.",
        "tags": [
          "domains"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "transferable": {
                      "type": "boolean",
                      "description": "Whether or not the domain is transferable"
                    },
                    "transferPolicy": {
                      "nullable": true,
                      "type": "string",
                      "enum": [
                        "charge-and-renew",
                        "no-charge-no-change",
                        "no-change",
                        "new-term",
                        "not-supported"
                      ],
                      "description": "The domain's transfer policy (depends on TLD requirements). `charge-and-renew`: transfer will charge for renewal and will renew the existing domain's registration. `no-charge-no-change`: transfer will have no change to registration period and does not require charge. `no-change`: transfer charge is required, but no change in registration period. `new-term`: transfer charge is required and a new registry term is set based on the transfer date. `not-supported`: transfers are not supported for this domain or TLD. `null`: This TLD is not supported by Vercel's Registrar."
                    },
                    "reason": {
                      "type": "string",
                      "description": "Description associated with transferable state."
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending_owner",
                        "pending_admin",
                        "pending_registry",
                        "completed",
                        "cancelled",
                        "undef",
                        "unknown"
                      ],
                      "description": "The current state of an ongoing transfer. `pending_owner`: Awaiting approval by domain's admin contact (every transfer begins with this status). If approval is not given within five days, the transfer is cancelled. `pending_admin`: Waiting for approval by Vercel Registrar admin. `pending_registry`: Awaiting registry approval (the transfer completes after 7 days unless it is declined by the current registrar). `completed`: The transfer completed successfully. `cancelled`: The transfer was cancelled. `undef`: No transfer exists for this domain. `unknown`: This TLD is not supported by Vercel's Registrar."
                    }
                  },
                  "required": [
                    "transferable",
                    "transferPolicy",
                    "reason",
                    "status"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          },
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "example.com"
            }
          }
        ]
      }
    },
    "/v6/domains/{domain}/config": {
      "get": {
        "description": "Get a Domain's configuration.",
        "operationId": "getDomainConfig",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get a Domain's configuration",
        "tags": [
          "domains"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "configuredBy": {
                      "nullable": true,
                      "type": "string",
                      "enum": [
                        "CNAME",
                        "A",
                        "http",
                        "dns-01"
                      ],
                      "description": "How we see the domain's configuration. - `CNAME`: Domain has a CNAME pointing to Vercel. - `A`: Domain's A record is resolving to Vercel. - `http`: Domain is resolving to Vercel but may be behind a Proxy. - `dns-01`: Domain is not resolving to Vercel but dns-01 challenge is enabled. - `null`: Domain is not resolving to Vercel."
                    },
                    "acceptedChallenges": {
                      "items": {
                        "type": "string",
                        "enum": [
                          "dns-01",
                          "http-01"
                        ],
                        "description": "Which challenge types the domain can use for issuing certs."
                      },
                      "type": "array",
                      "description": "Which challenge types the domain can use for issuing certs."
                    },
                    "recommendedIPv4": {
                      "items": {
                        "properties": {
                          "rank": {
                            "type": "number"
                          },
                          "value": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "rank",
                          "value"
                        ],
                        "type": "object",
                        "description": "Recommended IPv4s for the domain. rank=1 is the preferred value(s) to use. Only using 1 ip value is acceptable."
                      },
                      "type": "array",
                      "description": "Recommended IPv4s for the domain. rank=1 is the preferred value(s) to use. Only using 1 ip value is acceptable."
                    },
                    "recommendedCNAME": {
                      "items": {
                        "properties": {
                          "rank": {
                            "type": "number"
                          },
                          "value": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "rank",
                          "value"
                        ],
                        "type": "object",
                        "description": "Recommended CNAMEs for the domain. rank=1 is the preferred value to use."
                      },
                      "type": "array",
                      "description": "Recommended CNAMEs for the domain. rank=1 is the preferred value to use."
                    },
                    "misconfigured": {
                      "type": "boolean",
                      "description": "Whether or not the domain is configured AND we can automatically generate a TLS certificate."
                    }
                  },
                  "required": [
                    "configuredBy",
                    "acceptedChallenges",
                    "recommendedIPv4",
                    "recommendedCNAME",
                    "misconfigured"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "The name of the domain.",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The name of the domain.",
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "name": "projectIdOrName",
            "description": "The project id or name that will be associated with the domain. Use this when the domain is not yet associated with a project.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "The project id or name that will be associated with the domain. Use this when the domain is not yet associated with a project.",
              "type": "string"
            }
          },
          {
            "name": "strict",
            "description": "When true, the response will only include the nameservers assigned directly to the specified domain. When false and there are no nameservers assigned directly to the specified domain, the response will include the nameservers of the domain's parent zone.",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "true",
                "false"
              ],
              "description": "When true, the response will only include the nameservers assigned directly to the specified domain. When false and there are no nameservers assigned directly to the specified domain, the response will include the nameservers of the domain's parent zone."
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v5/domains/{domain}": {
      "get": {
        "description": "Get information for a single domain in an account or team.",
        "operationId": "getDomain",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Information for a Single Domain",
        "tags": [
          "domains"
        ],
        "responses": {
          "200": {
            "description": "Successful response retrieving an information for a specific domains.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "domain": {
                      "properties": {
                        "suffix": {
                          "type": "boolean"
                        },
                        "verified": {
                          "type": "boolean",
                          "description": "If the domain has the ownership verified.",
                          "example": true
                        },
                        "nameservers": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "description": "A list of the current nameservers of the domain.",
                          "example": [
                            "ns1.nameserver.net",
                            "ns2.nameserver.net"
                          ]
                        },
                        "intendedNameservers": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "description": "A list of the intended nameservers for the domain to point to Vercel DNS.",
                          "example": [
                            "ns1.vercel-dns.com",
                            "ns2.vercel-dns.com"
                          ]
                        },
                        "customNameservers": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "description": "A list of custom nameservers for the domain to point to. Only applies to domains purchased with Vercel.",
                          "example": [
                            "ns1.nameserver.net",
                            "ns2.nameserver.net"
                          ]
                        },
                        "creator": {
                          "properties": {
                            "username": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "customerId": {
                              "nullable": true,
                              "type": "string"
                            },
                            "isDomainReseller": {
                              "type": "boolean"
                            },
                            "id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "username",
                            "email",
                            "id"
                          ],
                          "type": "object",
                          "description": "An object containing information of the domain creator, including the user's id, username, and email.",
                          "example": {
                            "id": "ZspSRT4ljIEEmMHgoDwKWDei",
                            "username": "vercel_user",
                            "email": "demo@example.com"
                          }
                        },
                        "registrar": {
                          "type": "string",
                          "enum": [
                            "new"
                          ],
                          "description": "Whether or not the domain is registered with Name.com. If set to `true`, the domain is registered with Name.com."
                        },
                        "teamId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "boughtAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "If it was purchased through Vercel, the timestamp in milliseconds when it was purchased.",
                          "example": 1613602938882
                        },
                        "name": {
                          "type": "string",
                          "description": "The domain name.",
                          "example": "example.com"
                        },
                        "createdAt": {
                          "type": "number",
                          "description": "Timestamp in milliseconds when the domain was created in the registry.",
                          "example": 1613602938882
                        },
                        "expiresAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "Timestamp in milliseconds at which the domain is set to expire. `null` if not bought with Vercel.",
                          "example": 1613602938882
                        },
                        "id": {
                          "type": "string",
                          "description": "The unique identifier of the domain.",
                          "example": "EmTbe5CEJyTk2yVAHBUWy4A3sRusca3GCwRjTC1bpeVnt1"
                        },
                        "orderedAt": {
                          "type": "number",
                          "description": "Timestamp in milliseconds at which the domain was ordered.",
                          "example": 1613602938882
                        },
                        "renew": {
                          "type": "boolean",
                          "description": "Indicates whether the domain is set to automatically renew.",
                          "example": true
                        },
                        "serviceType": {
                          "type": "string",
                          "enum": [
                            "zeit.world",
                            "external",
                            "na"
                          ],
                          "description": "The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.",
                          "example": "zeit.world"
                        },
                        "transferredAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "Timestamp in milliseconds at which the domain was successfully transferred into Vercel. `null` if the transfer is still processing or was never transferred in.",
                          "example": 1613602938882
                        },
                        "transferStartedAt": {
                          "type": "number",
                          "description": "If transferred into Vercel, timestamp in milliseconds when the domain transfer was initiated.",
                          "example": 1613602938882
                        },
                        "userId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "suffix",
                        "verified",
                        "nameservers",
                        "intendedNameservers",
                        "creator",
                        "teamId",
                        "boughtAt",
                        "name",
                        "createdAt",
                        "expiresAt",
                        "id",
                        "serviceType",
                        "userId"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "domain"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "The name of the domain.",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The name of the domain.",
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v5/domains": {
      "get": {
        "description": "Retrieves a list of domains registered for the authenticated user or team. By default it returns the last 20 domains if no limit is provided.",
        "operationId": "getDomains",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List all the domains",
        "tags": [
          "domains"
        ],
        "responses": {
          "200": {
            "description": "Successful response retrieving a list of domains.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "domains": {
                      "items": {
                        "properties": {
                          "verified": {
                            "type": "boolean",
                            "description": "If the domain has the ownership verified.",
                            "example": true
                          },
                          "nameservers": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "A list of the current nameservers of the domain.",
                            "example": [
                              "ns1.nameserver.net",
                              "ns2.nameserver.net"
                            ]
                          },
                          "intendedNameservers": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "A list of the intended nameservers for the domain to point to Vercel DNS.",
                            "example": [
                              "ns1.vercel-dns.com",
                              "ns2.vercel-dns.com"
                            ]
                          },
                          "customNameservers": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "A list of custom nameservers for the domain to point to. Only applies to domains purchased with Vercel.",
                            "example": [
                              "ns1.nameserver.net",
                              "ns2.nameserver.net"
                            ]
                          },
                          "creator": {
                            "properties": {
                              "username": {
                                "type": "string"
                              },
                              "email": {
                                "type": "string"
                              },
                              "customerId": {
                                "nullable": true,
                                "type": "string"
                              },
                              "isDomainReseller": {
                                "type": "boolean"
                              },
                              "id": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "username",
                              "email",
                              "id"
                            ],
                            "type": "object",
                            "description": "An object containing information of the domain creator, including the user's id, username, and email.",
                            "example": {
                              "id": "ZspSRT4ljIEEmMHgoDwKWDei",
                              "username": "vercel_user",
                              "email": "demo@example.com"
                            }
                          },
                          "registrar": {
                            "type": "string",
                            "enum": [
                              "new"
                            ],
                            "description": "Whether or not the domain is registered with Name.com. If set to `true`, the domain is registered with Name.com."
                          },
                          "teamId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "Timestamp in milliseconds when the domain was created in the registry.",
                            "example": 1613602938882
                          },
                          "boughtAt": {
                            "nullable": true,
                            "type": "number",
                            "description": "If it was purchased through Vercel, the timestamp in milliseconds when it was purchased.",
                            "example": 1613602938882
                          },
                          "expiresAt": {
                            "nullable": true,
                            "type": "number",
                            "description": "Timestamp in milliseconds at which the domain is set to expire. `null` if not bought with Vercel.",
                            "example": 1613602938882
                          },
                          "id": {
                            "type": "string",
                            "description": "The unique identifier of the domain.",
                            "example": "EmTbe5CEJyTk2yVAHBUWy4A3sRusca3GCwRjTC1bpeVnt1"
                          },
                          "name": {
                            "type": "string",
                            "description": "The domain name.",
                            "example": "example.com"
                          },
                          "orderedAt": {
                            "type": "number",
                            "description": "Timestamp in milliseconds at which the domain was ordered.",
                            "example": 1613602938882
                          },
                          "renew": {
                            "type": "boolean",
                            "description": "Indicates whether the domain is set to automatically renew.",
                            "example": true
                          },
                          "serviceType": {
                            "type": "string",
                            "enum": [
                              "zeit.world",
                              "external",
                              "na"
                            ],
                            "description": "The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.",
                            "example": "zeit.world"
                          },
                          "transferredAt": {
                            "nullable": true,
                            "type": "number",
                            "description": "Timestamp in milliseconds at which the domain was successfully transferred into Vercel. `null` if the transfer is still processing or was never transferred in.",
                            "example": 1613602938882
                          },
                          "transferStartedAt": {
                            "type": "number",
                            "description": "If transferred into Vercel, timestamp in milliseconds when the domain transfer was initiated.",
                            "example": 1613602938882
                          },
                          "userId": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "verified",
                          "nameservers",
                          "intendedNameservers",
                          "creator",
                          "teamId",
                          "createdAt",
                          "boughtAt",
                          "expiresAt",
                          "id",
                          "name",
                          "serviceType",
                          "userId"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "required": [
                    "domains",
                    "pagination"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "409": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Maximum number of domains to list from a request.",
            "in": "query",
            "schema": {
              "description": "Maximum number of domains to list from a request.",
              "type": "number",
              "example": 20
            }
          },
          {
            "name": "since",
            "description": "Get domains created after this JavaScript timestamp.",
            "in": "query",
            "schema": {
              "description": "Get domains created after this JavaScript timestamp.",
              "type": "number",
              "example": 1609499532000
            }
          },
          {
            "name": "until",
            "description": "Get domains created before this JavaScript timestamp.",
            "in": "query",
            "schema": {
              "description": "Get domains created before this JavaScript timestamp.",
              "type": "number",
              "example": 1612264332000
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v7/domains": {
      "post": {
        "description": "This endpoint is used for adding a new apex domain name with Vercel for the authenticating user. Can also be used for initiating a domain transfer request from an external Registrar to Vercel.",
        "operationId": "createOrTransferDomain",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Register or transfer-in a new Domain",
        "tags": [
          "domains"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "domain": {
                      "properties": {
                        "verified": {
                          "type": "boolean",
                          "description": "If the domain has the ownership verified.",
                          "example": true
                        },
                        "nameservers": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "description": "A list of the current nameservers of the domain.",
                          "example": [
                            "ns1.nameserver.net",
                            "ns2.nameserver.net"
                          ]
                        },
                        "intendedNameservers": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "description": "A list of the intended nameservers for the domain to point to Vercel DNS.",
                          "example": [
                            "ns1.vercel-dns.com",
                            "ns2.vercel-dns.com"
                          ]
                        },
                        "customNameservers": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "description": "A list of custom nameservers for the domain to point to. Only applies to domains purchased with Vercel.",
                          "example": [
                            "ns1.nameserver.net",
                            "ns2.nameserver.net"
                          ]
                        },
                        "creator": {
                          "properties": {
                            "username": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "customerId": {
                              "nullable": true,
                              "type": "string"
                            },
                            "isDomainReseller": {
                              "type": "boolean"
                            },
                            "id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "username",
                            "email",
                            "id"
                          ],
                          "type": "object",
                          "description": "An object containing information of the domain creator, including the user's id, username, and email.",
                          "example": {
                            "id": "ZspSRT4ljIEEmMHgoDwKWDei",
                            "username": "vercel_user",
                            "email": "demo@example.com"
                          }
                        },
                        "registrar": {
                          "type": "string",
                          "enum": [
                            "new"
                          ],
                          "description": "Whether or not the domain is registered with Name.com. If set to `true`, the domain is registered with Name.com."
                        },
                        "name": {
                          "type": "string",
                          "description": "The domain name.",
                          "example": "example.com"
                        },
                        "boughtAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "If it was purchased through Vercel, the timestamp in milliseconds when it was purchased.",
                          "example": 1613602938882
                        },
                        "createdAt": {
                          "type": "number",
                          "description": "Timestamp in milliseconds when the domain was created in the registry.",
                          "example": 1613602938882
                        },
                        "expiresAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "Timestamp in milliseconds at which the domain is set to expire. `null` if not bought with Vercel.",
                          "example": 1613602938882
                        },
                        "id": {
                          "type": "string",
                          "description": "The unique identifier of the domain.",
                          "example": "EmTbe5CEJyTk2yVAHBUWy4A3sRusca3GCwRjTC1bpeVnt1"
                        },
                        "orderedAt": {
                          "type": "number",
                          "description": "Timestamp in milliseconds at which the domain was ordered.",
                          "example": 1613602938882
                        },
                        "renew": {
                          "type": "boolean",
                          "description": "Indicates whether the domain is set to automatically renew.",
                          "example": true
                        },
                        "serviceType": {
                          "type": "string",
                          "enum": [
                            "zeit.world",
                            "external",
                            "na"
                          ],
                          "description": "The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.",
                          "example": "zeit.world"
                        },
                        "transferredAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "Timestamp in milliseconds at which the domain was successfully transferred into Vercel. `null` if the transfer is still processing or was never transferred in.",
                          "example": 1613602938882
                        },
                        "transferStartedAt": {
                          "type": "number",
                          "description": "If transferred into Vercel, timestamp in milliseconds when the domain transfer was initiated.",
                          "example": 1613602938882
                        },
                        "userId": {
                          "type": "string"
                        },
                        "teamId": {
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "required": [
                        "verified",
                        "nameservers",
                        "intendedNameservers",
                        "creator",
                        "name",
                        "boughtAt",
                        "createdAt",
                        "expiresAt",
                        "id",
                        "serviceType",
                        "userId",
                        "teamId"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "domain"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "The domain is not allowed to be used"
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "method": {
                    "description": "The domain operation to perform. It can be either `add` or `transfer-in`.",
                    "type": "string",
                    "example": "transfer-in"
                  }
                },
                "oneOf": [
                  {
                    "additionalProperties": false,
                    "type": "object",
                    "description": "add",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "The domain name you want to add.",
                        "type": "string",
                        "example": "example.com"
                      },
                      "cdnEnabled": {
                        "description": "Whether the domain has the Vercel Edge Network enabled or not.",
                        "type": "boolean",
                        "example": true
                      },
                      "zone": {
                        "type": "boolean"
                      },
                      "method": {
                        "description": "The domain operation to perform.",
                        "type": "string",
                        "example": "add"
                      }
                    }
                  },
                  {
                    "additionalProperties": false,
                    "type": "object",
                    "description": "move-in",
                    "required": [
                      "method",
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "The domain name you want to add.",
                        "type": "string",
                        "example": "example.com"
                      },
                      "method": {
                        "description": "The domain operation to perform.",
                        "type": "string",
                        "example": "move-in"
                      },
                      "token": {
                        "description": "The move-in token from Move Requested email.",
                        "type": "string",
                        "example": "fdhfr820ad#@FAdlj$$"
                      }
                    }
                  },
                  {
                    "additionalProperties": false,
                    "type": "object",
                    "description": "transfer-in",
                    "required": [
                      "method",
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "The domain name you want to add.",
                        "type": "string",
                        "example": "example.com"
                      },
                      "method": {
                        "description": "The domain operation to perform.",
                        "type": "string",
                        "example": "transfer-in"
                      },
                      "authCode": {
                        "description": "The authorization code assigned to the domain.",
                        "type": "string",
                        "example": "fdhfr820ad#@FAdlj$$"
                      },
                      "expectedPrice": {
                        "description": "The price you expect to be charged for the required 1 year renewal.",
                        "type": "number",
                        "example": 8
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/v3/domains/{domain}": {
      "patch": {
        "description": "Update or move apex domain.",
        "operationId": "patchDomain",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update or move apex domain",
        "tags": [
          "domains"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "moved": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "moved"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "moved": {
                          "type": "boolean"
                        },
                        "token": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "moved",
                        "token"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "renew": {
                          "type": "boolean"
                        },
                        "customNameservers": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "zone": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "update",
                    "additionalProperties": false,
                    "properties": {
                      "op": {
                        "example": "update",
                        "type": "string"
                      },
                      "renew": {
                        "description": "Specifies whether domain should be renewed.",
                        "type": "boolean"
                      },
                      "customNameservers": {
                        "description": "The custom nameservers for this project.",
                        "items": {
                          "type": "string"
                        },
                        "maxItems": 4,
                        "minItems": 0,
                        "type": "array",
                        "uniqueItems": true
                      },
                      "zone": {
                        "description": "Specifies whether this is a DNS zone that intends to use Vercel's nameservers.",
                        "type": "boolean"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "description": "move-out",
                    "additionalProperties": false,
                    "properties": {
                      "op": {
                        "example": "move-out",
                        "type": "string"
                      },
                      "destination": {
                        "description": "User or team to move domain to",
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "x-speakeasy-test": false
      }
    },
    "/v6/domains/{domain}": {
      "delete": {
        "description": "Delete a previously registered domain name from Vercel. Deleting a domain will automatically remove any associated aliases.",
        "operationId": "deleteDomain",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Remove a domain by name",
        "tags": [
          "domains"
        ],
        "responses": {
          "200": {
            "description": "Successful response removing a domain.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "uid": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "uid"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "The name of the domain.",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The name of the domain.",
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/edge-config": {
      "get": {
        "description": "Returns all Edge Configs.",
        "operationId": "getEdgeConfigs",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Edge Configs",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "200": {
            "description": "List of all edge configs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "List of all edge configs.",
                  "items": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "number"
                      },
                      "ownerId": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string",
                        "description": "Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores)."
                      },
                      "updatedAt": {
                        "type": "number"
                      },
                      "digest": {
                        "type": "string"
                      },
                      "transfer": {
                        "properties": {
                          "fromAccountId": {
                            "type": "string"
                          },
                          "startedAt": {
                            "type": "number"
                          },
                          "doneAt": {
                            "nullable": true,
                            "type": "number"
                          }
                        },
                        "required": [
                          "fromAccountId",
                          "startedAt",
                          "doneAt"
                        ],
                        "type": "object",
                        "description": "Keeps track of the current state of the Edge Config while it gets transferred."
                      },
                      "schema": {
                        "type": "object"
                      },
                      "purpose": {
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "flags"
                            ]
                          },
                          "projectId": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "projectId"
                        ],
                        "type": "object"
                      },
                      "sizeInBytes": {
                        "type": "number"
                      },
                      "itemCount": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "sizeInBytes",
                      "itemCount"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "post": {
        "description": "Creates an Edge Config.",
        "operationId": "createEdgeConfig",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create an Edge Config",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "createdAt": {
                      "type": "number"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "deletedAt": {
                      "type": "number"
                    },
                    "id": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string",
                      "description": "Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores)."
                    },
                    "ownerId": {
                      "type": "string"
                    },
                    "digest": {
                      "type": "string"
                    },
                    "transfer": {
                      "properties": {
                        "fromAccountId": {
                          "type": "string"
                        },
                        "startedAt": {
                          "type": "number"
                        },
                        "doneAt": {
                          "nullable": true,
                          "type": "number"
                        }
                      },
                      "required": [
                        "fromAccountId",
                        "startedAt",
                        "doneAt"
                      ],
                      "type": "object",
                      "description": "Keeps track of the current state of the Edge Config while it gets transferred."
                    },
                    "schema": {
                      "type": "object"
                    },
                    "purpose": {
                      "oneOf": [
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "flags"
                              ]
                            },
                            "projectId": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "projectId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "experimentation"
                              ]
                            },
                            "resourceId": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "resourceId"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "syncedToDynamoAt": {
                      "type": "number",
                      "description": "Timestamp of when the Edge Config was synced to DynamoDB initially. It is only set when syncing the entire Edge Config, not when updating."
                    },
                    "sizeInBytes": {
                      "type": "number"
                    },
                    "itemCount": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "createdAt",
                    "updatedAt",
                    "id",
                    "slug",
                    "ownerId",
                    "digest",
                    "sizeInBytes",
                    "itemCount"
                  ],
                  "type": "object",
                  "description": "An Edge Config"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "slug"
                ],
                "properties": {
                  "slug": {
                    "maxLength": 64,
                    "pattern": "^[\\\\w-]+$",
                    "type": "string"
                  },
                  "items": {
                    "type": "object",
                    "additionalProperties": {}
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/edge-config/{edgeConfigId}": {
      "get": {
        "description": "Returns an Edge Config.",
        "operationId": "getEdgeConfig",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get an Edge Config",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "200": {
            "description": "The EdgeConfig.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "createdAt": {
                      "type": "number"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "deletedAt": {
                      "type": "number"
                    },
                    "id": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string",
                      "description": "Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores)."
                    },
                    "ownerId": {
                      "type": "string"
                    },
                    "digest": {
                      "type": "string"
                    },
                    "transfer": {
                      "properties": {
                        "fromAccountId": {
                          "type": "string"
                        },
                        "startedAt": {
                          "type": "number"
                        },
                        "doneAt": {
                          "nullable": true,
                          "type": "number"
                        }
                      },
                      "required": [
                        "fromAccountId",
                        "startedAt",
                        "doneAt"
                      ],
                      "type": "object",
                      "description": "Keeps track of the current state of the Edge Config while it gets transferred."
                    },
                    "schema": {
                      "type": "object"
                    },
                    "purpose": {
                      "oneOf": [
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "flags"
                              ]
                            },
                            "projectId": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "projectId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "experimentation"
                              ]
                            },
                            "resourceId": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "resourceId"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "syncedToDynamoAt": {
                      "type": "number",
                      "description": "Timestamp of when the Edge Config was synced to DynamoDB initially. It is only set when syncing the entire Edge Config, not when updating."
                    },
                    "sizeInBytes": {
                      "type": "number"
                    },
                    "itemCount": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "createdAt",
                    "updatedAt",
                    "id",
                    "slug",
                    "ownerId",
                    "digest",
                    "sizeInBytes",
                    "itemCount"
                  ],
                  "type": "object",
                  "description": "The EdgeConfig."
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "put": {
        "description": "Updates an Edge Config.",
        "operationId": "updateEdgeConfig",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update an Edge Config",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "createdAt": {
                      "type": "number"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "deletedAt": {
                      "type": "number"
                    },
                    "id": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string",
                      "description": "Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores)."
                    },
                    "ownerId": {
                      "type": "string"
                    },
                    "digest": {
                      "type": "string"
                    },
                    "transfer": {
                      "properties": {
                        "fromAccountId": {
                          "type": "string"
                        },
                        "startedAt": {
                          "type": "number"
                        },
                        "doneAt": {
                          "nullable": true,
                          "type": "number"
                        }
                      },
                      "required": [
                        "fromAccountId",
                        "startedAt",
                        "doneAt"
                      ],
                      "type": "object",
                      "description": "Keeps track of the current state of the Edge Config while it gets transferred."
                    },
                    "schema": {
                      "type": "object"
                    },
                    "purpose": {
                      "oneOf": [
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "flags"
                              ]
                            },
                            "projectId": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "projectId"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "experimentation"
                              ]
                            },
                            "resourceId": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "resourceId"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "syncedToDynamoAt": {
                      "type": "number",
                      "description": "Timestamp of when the Edge Config was synced to DynamoDB initially. It is only set when syncing the entire Edge Config, not when updating."
                    },
                    "sizeInBytes": {
                      "type": "number"
                    },
                    "itemCount": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "createdAt",
                    "updatedAt",
                    "id",
                    "slug",
                    "ownerId",
                    "digest",
                    "sizeInBytes",
                    "itemCount"
                  ],
                  "type": "object",
                  "description": "An Edge Config"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "slug"
                ],
                "properties": {
                  "slug": {
                    "maxLength": 64,
                    "pattern": "^[\\\\w-]+$",
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "description": "Delete an Edge Config by id.",
        "operationId": "deleteEdgeConfig",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete an Edge Config",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/edge-config/{edgeConfigId}/items": {
      "get": {
        "description": "Returns all items of an Edge Config.",
        "operationId": "getEdgeConfigItems",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Edge Config items",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "200": {
            "description": "List of all Edge Config items.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EdgeConfigItem"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^ecfg_"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "patch": {
        "description": "Update multiple Edge Config Items in batch.",
        "operationId": "patchEdgeConfigItems",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update Edge Config items in batch",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": ""
          },
          "412": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^ecfg_"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "operation": {
                              "enum": [
                                "create",
                                "update",
                                "upsert",
                                "delete"
                              ]
                            },
                            "key": {
                              "maxLength": 256,
                              "pattern": "^[\\\\w-]+$",
                              "type": "string"
                            },
                            "value": {
                              "nullable": true
                            },
                            "description": {
                              "oneOf": [
                                {
                                  "type": "string",
                                  "maxLength": 512
                                },
                                {}
                              ],
                              "nullable": true
                            }
                          },
                          "anyOf": [
                            {
                              "properties": {
                                "operation": {
                                  "type": "string",
                                  "enum": [
                                    "create"
                                  ]
                                }
                              },
                              "required": [
                                "operation",
                                "key",
                                "value"
                              ]
                            },
                            {
                              "properties": {
                                "operation": {
                                  "enum": [
                                    "update",
                                    "upsert"
                                  ]
                                }
                              },
                              "required": [
                                "operation",
                                "key",
                                "value"
                              ]
                            },
                            {
                              "properties": {
                                "operation": {
                                  "enum": [
                                    "update",
                                    "upsert"
                                  ]
                                }
                              },
                              "required": [
                                "operation",
                                "key",
                                "description"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/edge-config/{edgeConfigId}/schema": {
      "get": {
        "description": "Returns the schema of an Edge Config.",
        "operationId": "getEdgeConfigSchema",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Edge Config schema",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "200": {
            "description": "The EdgeConfig.",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "type": "object",
                  "description": "The EdgeConfig."
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "post": {
        "description": "Update an Edge Config's schema.",
        "operationId": "patchEdgeConfigSchema",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update Edge Config schema",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "type": "object",
                  "description": "The JSON schema uploaded by the user"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dryRun",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "definition"
                ],
                "properties": {
                  "definition": {}
                }
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "description": "Deletes the schema of existing Edge Config.",
        "operationId": "deleteEdgeConfigSchema",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete an Edge Config's schema",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/edge-config/{edgeConfigId}/item/{edgeConfigItemKey}": {
      "get": {
        "description": "Returns a specific Edge Config Item.",
        "operationId": "getEdgeConfigItem",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get an Edge Config item",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "200": {
            "description": "The EdgeConfig.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeConfigItem"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^ecfg_"
            }
          },
          {
            "name": "edgeConfigItemKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/edge-config/{edgeConfigId}/tokens": {
      "get": {
        "description": "Returns all tokens of an Edge Config.",
        "operationId": "getEdgeConfigTokens",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get all tokens of an Edge Config",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "200": {
            "description": "The EdgeConfig.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeConfigToken"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "delete": {
        "description": "Deletes one or more tokens of an existing Edge Config.",
        "operationId": "deleteEdgeConfigTokens",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete one or more Edge Config tokens",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "tokens"
                ],
                "properties": {
                  "tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/edge-config/{edgeConfigId}/token/{token}": {
      "get": {
        "description": "Return meta data about an Edge Config token.",
        "operationId": "getEdgeConfigToken",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Edge Config token meta data",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "200": {
            "description": "The EdgeConfig.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeConfigToken"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/edge-config/{edgeConfigId}/token": {
      "post": {
        "description": "Adds a token to an existing Edge Config.",
        "operationId": "createEdgeConfigToken",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create an Edge Config token",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "token",
                    "id"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "label"
                ],
                "properties": {
                  "label": {
                    "maxLength": 52,
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/edge-config/{edgeConfigId}/backups/{edgeConfigBackupVersionId}": {
      "get": {
        "description": "Retrieves a specific version of an Edge Config from backup storage.",
        "operationId": "getEdgeConfigBackup",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Edge Config backup",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "lastModified": {
                          "type": "number"
                        },
                        "backup": {
                          "properties": {
                            "digest": {
                              "type": "string"
                            },
                            "items": {
                              "additionalProperties": {
                                "properties": {
                                  "updatedAt": {
                                    "type": "number"
                                  },
                                  "value": {
                                    "$ref": "#/components/schemas/EdgeConfigItemValue"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "updatedAt",
                                  "value",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              "type": "object"
                            },
                            "slug": {
                              "type": "string",
                              "description": "Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores)."
                            },
                            "updatedAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "digest",
                            "items",
                            "slug",
                            "updatedAt"
                          ],
                          "type": "object"
                        },
                        "metadata": {
                          "properties": {
                            "updatedAt": {
                              "type": "string"
                            },
                            "updatedBy": {
                              "type": "string"
                            },
                            "itemsCount": {
                              "type": "number"
                            },
                            "itemsBytes": {
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "user": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "username": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "avatar": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "username",
                            "email"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "id",
                        "lastModified",
                        "backup",
                        "metadata"
                      ],
                      "type": "object",
                      "description": "The object the API responds with when requesting an Edge Config backup"
                    },
                    {
                      "properties": {
                        "user": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "username": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "avatar": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "username",
                            "email"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "type": "string"
                        },
                        "lastModified": {
                          "type": "number"
                        },
                        "backup": {
                          "properties": {
                            "digest": {
                              "type": "string"
                            },
                            "items": {
                              "additionalProperties": {
                                "properties": {
                                  "updatedAt": {
                                    "type": "number"
                                  },
                                  "value": {
                                    "$ref": "#/components/schemas/EdgeConfigItemValue"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "updatedAt",
                                  "value",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              "type": "object"
                            },
                            "slug": {
                              "type": "string",
                              "description": "Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores)."
                            },
                            "updatedAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "digest",
                            "items",
                            "slug",
                            "updatedAt"
                          ],
                          "type": "object"
                        },
                        "metadata": {
                          "properties": {
                            "updatedAt": {
                              "type": "string"
                            },
                            "updatedBy": {
                              "type": "string"
                            },
                            "itemsCount": {
                              "type": "number"
                            },
                            "itemsBytes": {
                              "type": "number"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "required": [
                        "user",
                        "id",
                        "lastModified",
                        "backup",
                        "metadata"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "edgeConfigBackupVersionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "x-speakeasy-test": false
      }
    },
    "/v1/edge-config/{edgeConfigId}/backups": {
      "get": {
        "description": "Returns backups of an Edge Config.",
        "operationId": "getEdgeConfigBackups",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Edge Config backups",
        "tags": [
          "edge-config"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "backups": {
                      "items": {
                        "properties": {
                          "metadata": {
                            "properties": {
                              "updatedAt": {
                                "type": "string"
                              },
                              "updatedBy": {
                                "type": "string"
                              },
                              "itemsCount": {
                                "type": "number"
                              },
                              "itemsBytes": {
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "type": "string"
                          },
                          "lastModified": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "lastModified"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "properties": {
                        "hasNext": {
                          "type": "boolean"
                        },
                        "next": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "hasNext"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "backups",
                    "pagination"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "edgeConfigId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 50
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v3/events": {
      "get": {
        "description": "Retrieves a list of \"events\" generated by the User on Vercel. Events are generated when the User performs a particular action, such as logging in, creating a deployment, and joining a Team (just to name a few). When the `teamId` parameter is supplied, then the events that are returned will be in relation to the Team that was specified.",
        "operationId": "listUserEvents",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List User Events",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "events": {
                      "items": {
                        "$ref": "#/components/schemas/UserEvent"
                      },
                      "type": "array",
                      "description": "Array of events generated by the User."
                    }
                  },
                  "required": [
                    "events"
                  ],
                  "type": "object",
                  "description": "Successful response."
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Maximum number of items which may be returned.",
            "in": "query",
            "schema": {
              "description": "Maximum number of items which may be returned.",
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "since",
            "description": "Timestamp to only include items created since then.",
            "in": "query",
            "schema": {
              "description": "Timestamp to only include items created since then.",
              "example": "2019-12-08T10:00:38.976Z",
              "type": "string"
            }
          },
          {
            "name": "until",
            "description": "Timestamp to only include items created until then.",
            "in": "query",
            "schema": {
              "description": "Timestamp to only include items created until then.",
              "example": "2019-12-09T23:00:38.976Z",
              "type": "string"
            }
          },
          {
            "name": "types",
            "description": "Comma-delimited list of event \\\"types\\\" to filter the results by.",
            "in": "query",
            "schema": {
              "description": "Comma-delimited list of event \\\"types\\\" to filter the results by.",
              "example": "login,team-member-join,domain-buy",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "Deprecated. Use `principalId` instead. If `principalId` and `userId` both exist, `principalId` will be used.",
            "in": "query",
            "schema": {
              "description": "Deprecated. Use `principalId` instead. If `principalId` and `userId` both exist, `principalId` will be used.",
              "example": "aeIInYVk59zbFF2SxfyxxmuO",
              "type": "string"
            }
          },
          {
            "name": "principalId",
            "description": "When retrieving events for a Team, the `principalId` parameter may be specified to filter events generated by a specific principal.",
            "in": "query",
            "schema": {
              "description": "When retrieving events for a Team, the `principalId` parameter may be specified to filter events generated by a specific principal.",
              "example": "aeIInYVk59zbFF2SxfyxxmuO",
              "type": "string"
            }
          },
          {
            "name": "projectIds",
            "description": "Comma-delimited list of project IDs to filter the results by.",
            "in": "query",
            "schema": {
              "description": "Comma-delimited list of project IDs to filter the results by.",
              "example": "aeIInYVk59zbFF2SxfyxxmuO",
              "type": "string"
            }
          },
          {
            "name": "withPayload",
            "description": "When set to `true`, the response will include the `payload` field for each event.",
            "in": "query",
            "schema": {
              "description": "When set to `true`, the response will include the `payload` field for each event.",
              "example": "true",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/integrations/integration/{integrationIdOrSlug}/products/{productIdOrSlug}/plans": {
      "get": {
        "description": "",
        "security": [],
        "tags": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "plans": {
                      "items": {
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "prepayment",
                              "subscription"
                            ]
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "scope": {
                            "type": "string",
                            "enum": [
                              "installation",
                              "resource"
                            ]
                          },
                          "description": {
                            "type": "string"
                          },
                          "paymentMethodRequired": {
                            "type": "boolean"
                          },
                          "preauthorizationAmount": {
                            "type": "number"
                          },
                          "initialCharge": {
                            "type": "string"
                          },
                          "minimumAmount": {
                            "type": "string"
                          },
                          "maximumAmount": {
                            "type": "string"
                          },
                          "maximumAmountAutoPurchasePerPeriod": {
                            "type": "string"
                          },
                          "cost": {
                            "type": "string"
                          },
                          "details": {
                            "items": {
                              "properties": {
                                "label": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "label"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "highlightedDetails": {
                            "items": {
                              "properties": {
                                "label": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "label"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "quote": {
                            "items": {
                              "properties": {
                                "line": {
                                  "type": "string"
                                },
                                "amount": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "line",
                                "amount"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "effectiveDate": {
                            "type": "string"
                          },
                          "disabled": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "type",
                          "id",
                          "name",
                          "scope",
                          "description",
                          "paymentMethodRequired"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "plans"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationIdOrSlug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productIdOrSlug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/v1/integrations/installations/{integrationConfigurationId}/resources/{resourceId}/connections": {
      "post": {
        "description": "Connects an integration resource to a Vercel project. This endpoint establishes a connection between a provisioned integration resource (from storage APIs like `POST /v1/storage/stores/integration/direct`) and a specific Vercel project.",
        "operationId": "connectIntegrationResourceToProject",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Connect integration resource to project",
        "tags": [
          "integrations"
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "projectId"
                ],
                "properties": {
                  "projectId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/installations/{integrationConfigurationId}/account": {
      "get": {
        "description": "Fetches the best account or user’s contact info",
        "operationId": "get-account-info",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Account Information",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the team the installation is tied to."
                    },
                    "url": {
                      "type": "string",
                      "description": "A URL linking to the installation in the Vercel Dashboard."
                    },
                    "contact": {
                      "nullable": true,
                      "properties": {
                        "email": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "email"
                      ],
                      "type": "object",
                      "description": "The best contact for the integration, which can change as team members and their roles change."
                    }
                  },
                  "required": [
                    "url",
                    "contact"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/v1/installations/{integrationConfigurationId}/member/{memberId}": {
      "get": {
        "description": "Returns the member role and other information for a given member ID (\"user_id\" claim in the SSO OIDC token).",
        "operationId": "get-member",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Member Information",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "ADMIN",
                        "USER"
                      ],
                      "description": "\"The `ADMIN` role, by default, is provided to users capable of installing integrations, while the `USER` role can be granted to Vercel users with the Vercel `Billing` or Vercel `Viewer` role, which are considered to be Read-Only roles.\""
                    }
                  },
                  "required": [
                    "id",
                    "role"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/v1/installations/{integrationConfigurationId}/events": {
      "post": {
        "description": "Partner notifies Vercel of any changes made to an Installation or a Resource. Vercel is expected to use `list-resources` and other read APIs to get the new state.\u003cbr/\u003e \u003cbr/\u003e `resource.updated` event should be dispatched when any state of a resource linked to Vercel is modified by the partner.\u003cbr/\u003e `installation.updated` event should be dispatched when an installation's billing plan is changed via the provider instead of Vercel.\u003cbr/\u003e \u003cbr/\u003e Resource update use cases: \u003cbr/\u003e \u003cbr/\u003e - The user renames a database in the partner’s application. The partner should dispatch a `resource.updated` event to notify Vercel to update the resource in Vercel’s datastores.\u003cbr/\u003e - A resource has been suspended due to a lack of use. The partner should dispatch a `resource.updated` event to notify Vercel to update the resource's status in Vercel's datastores.\u003cbr/\u003e",
        "operationId": "create-event",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create Event",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "event"
                ],
                "properties": {
                  "event": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "installation.updated"
                            ]
                          },
                          "billingPlanId": {
                            "type": "string",
                            "description": "The installation-level billing plan ID"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "resource.updated"
                            ]
                          },
                          "productId": {
                            "type": "string",
                            "description": "Partner-provided product slug or id"
                          },
                          "resourceId": {
                            "type": "string",
                            "description": "Partner provided resource ID"
                          }
                        },
                        "required": [
                          "type",
                          "productId",
                          "resourceId"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/installations/{integrationConfigurationId}/resources": {
      "get": {
        "description": "Get all resources for a given installation ID.",
        "operationId": "get-integration-resources",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Integration Resources",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "resources": {
                      "items": {
                        "properties": {
                          "partnerId": {
                            "type": "string",
                            "description": "The ID provided by the partner for the given resource"
                          },
                          "internalId": {
                            "type": "string",
                            "description": "The ID assigned by Vercel for the given resource"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the resource as it is recorded in Vercel"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "ready",
                              "pending",
                              "suspended",
                              "resumed",
                              "uninstalled",
                              "error"
                            ],
                            "description": "The current status of the resource"
                          },
                          "productId": {
                            "type": "string",
                            "description": "The ID of the product the resource is derived from"
                          },
                          "protocolSettings": {
                            "properties": {
                              "experimentation": {
                                "properties": {
                                  "edgeConfigSyncingEnabled": {
                                    "type": "boolean"
                                  },
                                  "edgeConfigId": {
                                    "type": "string"
                                  },
                                  "edgeConfigTokenId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object",
                            "description": "Any settings provided for the resource to support its product's protocols"
                          },
                          "notification": {
                            "properties": {
                              "level": {
                                "type": "string",
                                "enum": [
                                  "error",
                                  "info",
                                  "warn"
                                ]
                              },
                              "title": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              },
                              "href": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "level",
                              "title"
                            ],
                            "type": "object",
                            "description": "The notification, if set, displayed to the user when viewing the resource in Vercel"
                          },
                          "billingPlanId": {
                            "type": "string",
                            "description": "The ID of the billing plan the resource is subscribed to, if applicable"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "boolean"
                                },
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array",
                                  "description": "The configured metadata for the resource as defined by its product's Metadata Schema"
                                },
                                {
                                  "items": {
                                    "type": "number"
                                  },
                                  "type": "array",
                                  "description": "The configured metadata for the resource as defined by its product's Metadata Schema"
                                }
                              ]
                            },
                            "type": "object",
                            "description": "The configured metadata for the resource as defined by its product's Metadata Schema"
                          }
                        },
                        "required": [
                          "partnerId",
                          "internalId",
                          "name",
                          "productId"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "resources"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/v1/installations/{integrationConfigurationId}/resources/{resourceId}": {
      "get": {
        "description": "Get a resource by its partner ID.",
        "operationId": "get-integration-resource",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Integration Resource",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID provided by the 3rd party provider for the given resource"
                    },
                    "internalId": {
                      "type": "string",
                      "description": "The ID assigned by Vercel for the given resource"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the resource as it is recorded in Vercel"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "ready",
                        "pending",
                        "suspended",
                        "resumed",
                        "uninstalled",
                        "error"
                      ],
                      "description": "The current status of the resource"
                    },
                    "productId": {
                      "type": "string",
                      "description": "The ID of the product the resource is derived from"
                    },
                    "protocolSettings": {
                      "properties": {
                        "experimentation": {
                          "properties": {
                            "edgeConfigSyncingEnabled": {
                              "type": "boolean"
                            },
                            "edgeConfigId": {
                              "type": "string"
                            },
                            "edgeConfigTokenId": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object",
                      "description": "Any settings provided for the resource to support its product's protocols"
                    },
                    "notification": {
                      "properties": {
                        "level": {
                          "type": "string",
                          "enum": [
                            "error",
                            "info",
                            "warn"
                          ]
                        },
                        "title": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        },
                        "href": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "level",
                        "title"
                      ],
                      "type": "object",
                      "description": "The notification, if set, displayed to the user when viewing the resource in Vercel"
                    },
                    "billingPlanId": {
                      "type": "string",
                      "description": "The ID of the billing plan the resource is subscribed to, if applicable"
                    },
                    "metadata": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "boolean"
                          },
                          {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "The configured metadata for the resource as defined by its product's Metadata Schema"
                          },
                          {
                            "items": {
                              "type": "number"
                            },
                            "type": "array",
                            "description": "The configured metadata for the resource as defined by its product's Metadata Schema"
                          }
                        ]
                      },
                      "type": "object",
                      "description": "The configured metadata for the resource as defined by its product's Metadata Schema"
                    }
                  },
                  "required": [
                    "id",
                    "internalId",
                    "name",
                    "productId"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "description": "The ID of the integration configuration (installation) the resource belongs to",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the integration configuration (installation) the resource belongs to"
            }
          },
          {
            "name": "resourceId",
            "description": "The ID provided by the 3rd party provider for the given resource",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID provided by the 3rd party provider for the given resource"
            }
          }
        ]
      },
      "delete": {
        "description": "Delete a resource owned by the selected installation ID.",
        "operationId": "delete-integration-resource",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete Integration Resource",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "description": "This endpoint imports (upserts) a resource to Vercel's installation. This may be needed if resources can be independently created on the partner's side and need to be synchronized to Vercel.",
        "operationId": "import-resource",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Import Resource",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "productId",
                  "name",
                  "status"
                ],
                "properties": {
                  "ownership": {
                    "type": "string",
                    "enum": [
                      "owned",
                      "linked",
                      "sandbox"
                    ]
                  },
                  "productId": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "ready",
                      "pending",
                      "suspended",
                      "resumed",
                      "uninstalled",
                      "error"
                    ]
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "billingPlan": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "name"
                    ],
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "prepayment",
                          "subscription"
                        ]
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "paymentMethodRequired": {
                        "type": "boolean"
                      },
                      "cost": {
                        "type": "string"
                      },
                      "details": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "label"
                          ],
                          "additionalProperties": false
                        }
                      },
                      "heightlightedDetails": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "label"
                          ],
                          "additionalProperties": false
                        }
                      },
                      "effectiveDate": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": true
                  },
                  "notification": {
                    "type": "object",
                    "required": [
                      "level",
                      "title"
                    ],
                    "properties": {
                      "level": {
                        "type": "string",
                        "enum": [
                          "info",
                          "warn",
                          "error"
                        ]
                      },
                      "title": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      },
                      "href": {
                        "type": "string",
                        "format": "uri"
                      }
                    }
                  },
                  "extras": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "secrets": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "value"
                      ],
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "prefix": {
                          "type": "string"
                        },
                        "environmentOverrides": {
                          "type": "object",
                          "description": "A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.",
                          "properties": {
                            "development": {
                              "type": "string",
                              "description": "Value used for development environment."
                            },
                            "preview": {
                              "type": "string",
                              "description": "Value used for preview environment."
                            },
                            "production": {
                              "type": "string",
                              "description": "Value used for production environment."
                            }
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/v1/installations/{integrationConfigurationId}/billing": {
      "post": {
        "description": "Sends the billing and usage data. The partner should do this at least once a day and ideally once per hour. \u003cbr/\u003e Use the `credentials.access_token` we provided in the [Upsert Installation](#upsert-installation) body to authorize this request.",
        "operationId": "submit-billing-data",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Submit Billing Data",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "timestamp": {
                    "description": "Server time of your integration, used to determine the most recent data for race conditions \u0026 updates. Only the latest usage data for a given day, week, and month will be kept.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "eod": {
                    "description": "End of Day, the UTC datetime for when the end of the billing/usage day is in UTC time. This tells us which day the usage data is for, and also allows for your \\\"end of day\\\" to be different from UTC 00:00:00. eod must be within the period dates, and cannot be older than 24h earlier from our server's current time.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "period": {
                    "type": "object",
                    "description": "Period for the billing cycle. The period end date cannot be older than 24 hours earlier than our current server's time.",
                    "properties": {
                      "start": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "end": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": [
                      "start",
                      "end"
                    ],
                    "additionalProperties": false
                  },
                  "billing": {
                    "description": "Billing data (interim invoicing data).",
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "billingPlanId": {
                              "type": "string",
                              "description": "Partner's billing plan ID."
                            },
                            "resourceId": {
                              "type": "string",
                              "description": "Partner's resource ID."
                            },
                            "start": {
                              "description": "Start and end are only needed if different from the period's start/end.",
                              "type": "string",
                              "format": "date-time"
                            },
                            "end": {
                              "description": "Start and end are only needed if different from the period's start/end.",
                              "type": "string",
                              "format": "date-time"
                            },
                            "name": {
                              "type": "string",
                              "description": "Line item name."
                            },
                            "details": {
                              "type": "string",
                              "description": "Line item details."
                            },
                            "price": {
                              "description": "Price per unit.",
                              "type": "string",
                              "pattern": "^[0-9]+(\\\\.[0-9]+)?$"
                            },
                            "quantity": {
                              "type": "number",
                              "description": "Quantity of units."
                            },
                            "units": {
                              "type": "string",
                              "description": "Units of the quantity."
                            },
                            "total": {
                              "description": "Total amount.",
                              "type": "string",
                              "pattern": "^[0-9]+(\\\\.[0-9]+)?$"
                            }
                          },
                          "required": [
                            "billingPlanId",
                            "name",
                            "price",
                            "quantity",
                            "units",
                            "total"
                          ],
                          "additionalProperties": false
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "billingPlanId": {
                                  "type": "string",
                                  "description": "Partner's billing plan ID."
                                },
                                "resourceId": {
                                  "type": "string",
                                  "description": "Partner's resource ID."
                                },
                                "start": {
                                  "description": "Start and end are only needed if different from the period's start/end.",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "end": {
                                  "description": "Start and end are only needed if different from the period's start/end.",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Line item name."
                                },
                                "details": {
                                  "type": "string",
                                  "description": "Line item details."
                                },
                                "price": {
                                  "description": "Price per unit.",
                                  "type": "string",
                                  "pattern": "^[0-9]+(\\\\.[0-9]+)?$"
                                },
                                "quantity": {
                                  "type": "number",
                                  "description": "Quantity of units."
                                },
                                "units": {
                                  "type": "string",
                                  "description": "Units of the quantity."
                                },
                                "total": {
                                  "description": "Total amount.",
                                  "type": "string",
                                  "pattern": "^[0-9]+(\\\\.[0-9]+)?$"
                                }
                              },
                              "required": [
                                "billingPlanId",
                                "name",
                                "price",
                                "quantity",
                                "units",
                                "total"
                              ],
                              "additionalProperties": false
                            }
                          },
                          "discounts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "billingPlanId": {
                                  "type": "string",
                                  "description": "Partner's billing plan ID."
                                },
                                "resourceId": {
                                  "type": "string",
                                  "description": "Partner's resource ID."
                                },
                                "start": {
                                  "description": "Start and end are only needed if different from the period's start/end.",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "end": {
                                  "description": "Start and end are only needed if different from the period's start/end.",
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Discount name."
                                },
                                "details": {
                                  "type": "string",
                                  "description": "Discount details."
                                },
                                "amount": {
                                  "description": "Discount amount.",
                                  "type": "string",
                                  "pattern": "^[0-9]+(\\\\.[0-9]+)?$"
                                }
                              },
                              "required": [
                                "billingPlanId",
                                "name",
                                "amount"
                              ],
                              "additionalProperties": false
                            }
                          }
                        },
                        "required": [
                          "items"
                        ]
                      }
                    ]
                  },
                  "usage": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "resourceId": {
                          "type": "string",
                          "description": "Partner's resource ID."
                        },
                        "name": {
                          "type": "string",
                          "description": "Metric name."
                        },
                        "type": {
                          "type": "string",
                          "description": "\\n              Type of the metric.\\n              - total: measured total value, such as Database size\\n              - interval: usage during the period, such as i/o or number of queries.\\n              - rate: rate of usage, such as queries per second.\\n            ",
                          "enum": [
                            "total",
                            "interval",
                            "rate"
                          ]
                        },
                        "units": {
                          "type": "string",
                          "description": "Metric units. Example: \\\"GB\\\""
                        },
                        "dayValue": {
                          "type": "number",
                          "description": "Metric value for the day. Could be a final or an interim value for the day."
                        },
                        "periodValue": {
                          "type": "number",
                          "description": "Metric value for the billing period. Could be a final or an interim value for the period."
                        },
                        "planValue": {
                          "type": "number",
                          "description": "The limit value of the metric for a billing period, if a limit is defined by the plan."
                        }
                      },
                      "required": [
                        "name",
                        "type",
                        "units",
                        "dayValue",
                        "periodValue"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                "required": [
                  "timestamp",
                  "eod",
                  "period",
                  "billing",
                  "usage"
                ],
                "additionalProperties": false
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/installations/{integrationConfigurationId}/billing/invoices": {
      "post": {
        "description": "This endpoint allows the partner to submit an invoice to Vercel. The invoice is created in Vercel's billing system and sent to the customer. Depending on the type of billing plan, the invoice can be sent at a time of signup, at the start of the billing period, or at the end of the billing period.\u003cbr/\u003e \u003cbr/\u003e Use the `credentials.access_token` we provided in the [Upsert Installation](#upsert-installation) body to authorize this request. \u003cbr/\u003e There are several limitations to the invoice submission:\u003cbr/\u003e \u003cbr/\u003e 1. A resource can only be billed once per the billing period and the billing plan.\u003cbr/\u003e 2. The billing plan used to bill the resource must have been active for this resource during the billing period.\u003cbr/\u003e 3. The billing plan used must be a subscription plan.\u003cbr/\u003e 4. The interim usage data must be sent hourly for all types of subscriptions. See [Send subscription billing and usage data](#send-subscription-billing-and-usage-data) API on how to send interim billing and usage data.\u003cbr/\u003e",
        "operationId": "submit-invoice",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Submit Invoice",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "invoiceId": {
                      "type": "string"
                    },
                    "test": {
                      "type": "boolean"
                    },
                    "validationErrors": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "type": "string"
                  },
                  "invoiceDate": {
                    "description": "Invoice date. Must be within the period's start and end.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "memo": {
                    "type": "string",
                    "description": "Additional memo for the invoice."
                  },
                  "period": {
                    "type": "object",
                    "description": "Subscription period for this billing cycle.",
                    "properties": {
                      "start": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "end": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": [
                      "start",
                      "end"
                    ],
                    "additionalProperties": false
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "resourceId": {
                          "type": "string",
                          "description": "Partner's resource ID."
                        },
                        "billingPlanId": {
                          "type": "string",
                          "description": "Partner's billing plan ID."
                        },
                        "start": {
                          "description": "Start and end are only needed if different from the period's start/end.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "end": {
                          "description": "Start and end are only needed if different from the period's start/end.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "name": {
                          "type": "string"
                        },
                        "details": {
                          "type": "string"
                        },
                        "price": {
                          "type": "string",
                          "pattern": "^[0-9]+(\\\\.[0-9]+)?$",
                          "description": "Currency amount as a decimal string."
                        },
                        "quantity": {
                          "type": "number"
                        },
                        "units": {
                          "type": "string"
                        },
                        "total": {
                          "type": "string",
                          "pattern": "^[0-9]+(\\\\.[0-9]+)?$",
                          "description": "Currency amount as a decimal string."
                        }
                      },
                      "required": [
                        "billingPlanId",
                        "name",
                        "price",
                        "quantity",
                        "units",
                        "total"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "discounts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "resourceId": {
                          "type": "string",
                          "description": "Partner's resource ID."
                        },
                        "billingPlanId": {
                          "type": "string",
                          "description": "Partner's billing plan ID."
                        },
                        "start": {
                          "description": "Start and end are only needed if different from the period's start/end.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "end": {
                          "description": "Start and end are only needed if different from the period's start/end.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "name": {
                          "type": "string"
                        },
                        "details": {
                          "type": "string"
                        },
                        "amount": {
                          "type": "string",
                          "pattern": "^[0-9]+(\\\\.[0-9]+)?$",
                          "description": "Currency amount as a decimal string."
                        }
                      },
                      "required": [
                        "billingPlanId",
                        "name",
                        "amount"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "test": {
                    "type": "object",
                    "description": "Test mode",
                    "properties": {
                      "validate": {
                        "type": "boolean"
                      },
                      "result": {
                        "type": "string",
                        "enum": [
                          "paid",
                          "notpaid"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "required": [
                  "invoiceDate",
                  "period",
                  "items"
                ],
                "additionalProperties": false
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/installations/{integrationConfigurationId}/billing/invoices/{invoiceId}": {
      "get": {
        "description": "Get Invoice details and status for a given invoice ID.\u003cbr/\u003e \u003cbr/\u003e See Billing Events with Webhooks documentation on how to receive invoice events. This endpoint is used to retrieve the invoice details.",
        "operationId": "get-invoice",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Invoice",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "test": {
                      "type": "boolean",
                      "description": "Whether the invoice is in the testmode (no real transaction created)."
                    },
                    "invoiceId": {
                      "type": "string",
                      "description": "Vercel Marketplace Invoice ID."
                    },
                    "externalId": {
                      "type": "string",
                      "description": "Partner-supplied Invoice ID, if applicable."
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "scheduled",
                        "invoiced",
                        "paid",
                        "notpaid",
                        "refund_requested",
                        "refunded"
                      ],
                      "description": "Invoice state."
                    },
                    "invoiceNumber": {
                      "type": "string",
                      "description": "User-readable invoice number."
                    },
                    "invoiceDate": {
                      "type": "string",
                      "description": "Invoice date. ISO 8601 timestamp."
                    },
                    "period": {
                      "properties": {
                        "start": {
                          "type": "string"
                        },
                        "end": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "start",
                        "end"
                      ],
                      "type": "object",
                      "description": "Subscription period for this billing cycle. ISO 8601 timestamps."
                    },
                    "memo": {
                      "type": "string",
                      "description": "Additional memo for the invoice."
                    },
                    "items": {
                      "items": {
                        "properties": {
                          "billingPlanId": {
                            "type": "string",
                            "description": "Partner's billing plan ID."
                          },
                          "resourceId": {
                            "type": "string",
                            "description": "Partner's resource ID. If not specified, indicates installation-wide item."
                          },
                          "start": {
                            "type": "string",
                            "description": "Start and end are only needed if different from the period's start/end. ISO 8601 timestamp."
                          },
                          "end": {
                            "type": "string",
                            "description": "Start and end are only needed if different from the period's start/end. ISO 8601 timestamp."
                          },
                          "name": {
                            "type": "string",
                            "description": "Invoice item name."
                          },
                          "details": {
                            "type": "string",
                            "description": "Additional item details."
                          },
                          "price": {
                            "type": "string",
                            "description": "Item price. A dollar-based decimal string."
                          },
                          "quantity": {
                            "type": "number",
                            "description": "Item quantity."
                          },
                          "units": {
                            "type": "string",
                            "description": "Units for item's quantity."
                          },
                          "total": {
                            "type": "string",
                            "description": "Item total. A dollar-based decimal string."
                          }
                        },
                        "required": [
                          "billingPlanId",
                          "name",
                          "price",
                          "quantity",
                          "units",
                          "total"
                        ],
                        "type": "object",
                        "description": "Invoice items."
                      },
                      "type": "array",
                      "description": "Invoice items."
                    },
                    "discounts": {
                      "items": {
                        "properties": {
                          "billingPlanId": {
                            "type": "string",
                            "description": "Partner's billing plan ID."
                          },
                          "resourceId": {
                            "type": "string",
                            "description": "Partner's resource ID. If not specified, indicates installation-wide discount."
                          },
                          "start": {
                            "type": "string",
                            "description": "Start and end are only needed if different from the period's start/end. ISO 8601 timestamp."
                          },
                          "end": {
                            "type": "string",
                            "description": "Start and end are only needed if different from the period's start/end. ISO 8601 timestamp."
                          },
                          "name": {
                            "type": "string",
                            "description": "Discount name."
                          },
                          "details": {
                            "type": "string",
                            "description": "Additional discount details."
                          },
                          "amount": {
                            "type": "string",
                            "description": "Discount amount. A dollar-based decimal string."
                          }
                        },
                        "required": [
                          "billingPlanId",
                          "name",
                          "amount"
                        ],
                        "type": "object",
                        "description": "Invoice discounts."
                      },
                      "type": "array",
                      "description": "Invoice discounts."
                    },
                    "total": {
                      "type": "string",
                      "description": "Invoice total amount. A dollar-based decimal string."
                    },
                    "refundReason": {
                      "type": "string",
                      "description": "The reason for refund. Only applicable for states \"refunded\" or \"refund_request\"."
                    },
                    "refundTotal": {
                      "type": "string",
                      "description": "Refund amount. Only applicable for states \"refunded\" or \"refund_request\". A dollar-based decimal string."
                    },
                    "created": {
                      "type": "string",
                      "description": "System creation date. ISO 8601 timestamp."
                    },
                    "updated": {
                      "type": "string",
                      "description": "System update date. ISO 8601 timestamp."
                    }
                  },
                  "required": [
                    "invoiceId",
                    "state",
                    "invoiceDate",
                    "period",
                    "items",
                    "total",
                    "created",
                    "updated"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/v1/installations/{integrationConfigurationId}/billing/invoices/{invoiceId}/actions": {
      "post": {
        "description": "This endpoint allows the partner to request a refund for an invoice to Vercel. The invoice is created using the [Submit Invoice API](#submit-invoice-api).",
        "operationId": "update-invoice",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Invoice Actions",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "refund"
                        ]
                      },
                      "reason": {
                        "type": "string",
                        "description": "Refund reason."
                      },
                      "total": {
                        "description": "The total amount to be refunded. Must be less than or equal to the total amount of the invoice.",
                        "type": "string",
                        "pattern": "^[0-9]+(\\\\.[0-9]+)?$"
                      }
                    },
                    "required": [
                      "action",
                      "reason",
                      "total"
                    ],
                    "additionalProperties": false
                  }
                ]
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/installations/{integrationConfigurationId}/billing/balance": {
      "post": {
        "description": "Sends the prepayment balances. The partner should do this at least once a day and ideally once per hour. \u003cbr/\u003e Use the `credentials.access_token` we provided in the [Upsert Installation](#upsert-installation) body to authorize this request.",
        "operationId": "submit-prepayment-balances",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Submit Prepayment Balances",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "timestamp": {
                    "description": "Server time of your integration, used to determine the most recent data for race conditions \u0026 updates. Only the latest usage data for a given day, week, and month will be kept.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "balances": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "A credit balance for a particular token type",
                      "properties": {
                        "resourceId": {
                          "type": "string",
                          "description": "Partner's resource ID, exclude if credits are tied to the installation and not an individual resource."
                        },
                        "credit": {
                          "type": "string",
                          "description": "A human-readable description of the credits the user currently has, e.g. \\\"2,000 Tokens\\\""
                        },
                        "nameLabel": {
                          "type": "string",
                          "description": "The name of the credits, for display purposes, e.g. \\\"Tokens\\\""
                        },
                        "currencyValueInCents": {
                          "type": "number",
                          "description": "The dollar value of the credit balance, in USD and provided in cents, which is used to trigger automatic purchase thresholds."
                        }
                      },
                      "required": [
                        "currencyValueInCents"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                "required": [
                  "timestamp",
                  "balances"
                ],
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/v1/installations/{integrationConfigurationId}/products/{integrationProductIdOrSlug}/resources/{resourceId}/secrets": {
      "put": {
        "description": "This endpoint is deprecated and replaced with the endpoint [Update Resource Secrets](#update-resource-secrets). \u003cbr/\u003e This endpoint updates the secrets of a resource. If a resource has projects connected, the connected secrets are updated with the new secrets. The old secrets may still be used by existing connected projects because they are not automatically redeployed. Redeployment is a manual action and must be completed by the user. All new project connections will use the new secrets.\u003cbr/\u003e \u003cbr/\u003e Use cases for this endpoint:\u003cbr/\u003e \u003cbr/\u003e - Resetting the credentials of a database in the partner. If the user requests the credentials to be updated in the partner’s application, the partner post the new set of secrets to Vercel, the user should redeploy their application and the expire the old credentials.\u003cbr/\u003e",
        "operationId": "update-resource-secrets",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update Resource Secrets (Deprecated)",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "integrationProductIdOrSlug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "secrets"
                ],
                "properties": {
                  "secrets": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "value"
                      ],
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "prefix": {
                          "type": "string"
                        },
                        "environmentOverrides": {
                          "type": "object",
                          "description": "A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.",
                          "properties": {
                            "development": {
                              "type": "string",
                              "description": "Value used for development environment."
                            },
                            "preview": {
                              "type": "string",
                              "description": "Value used for preview environment."
                            },
                            "production": {
                              "type": "string",
                              "description": "Value used for production environment."
                            }
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "partial": {
                    "type": "boolean",
                    "description": "If true, will only update the provided secrets"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/installations/{integrationConfigurationId}/resources/{resourceId}/secrets": {
      "put": {
        "description": "This endpoint updates the secrets of a resource. If a resource has projects connected, the connected secrets are updated with the new secrets. The old secrets may still be used by existing connected projects because they are not automatically redeployed. Redeployment is a manual action and must be completed by the user. All new project connections will use the new secrets.\u003cbr/\u003e \u003cbr/\u003e Use cases for this endpoint:\u003cbr/\u003e \u003cbr/\u003e - Resetting the credentials of a database in the partner. If the user requests the credentials to be updated in the partner’s application, the partner post the new set of secrets to Vercel, the user should redeploy their application and the expire the old credentials.\u003cbr/\u003e",
        "operationId": "update-resource-secrets-by-id",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update Resource Secrets",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "422": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "secrets"
                ],
                "properties": {
                  "secrets": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "value"
                      ],
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "prefix": {
                          "type": "string"
                        },
                        "environmentOverrides": {
                          "type": "object",
                          "description": "A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.",
                          "properties": {
                            "development": {
                              "type": "string",
                              "description": "Value used for development environment."
                            },
                            "preview": {
                              "type": "string",
                              "description": "Value used for preview environment."
                            },
                            "production": {
                              "type": "string",
                              "description": "Value used for production environment."
                            }
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "partial": {
                    "type": "boolean",
                    "description": "If true, will only overwrite the provided secrets instead of replacing all secrets."
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      }
    },
    "/v1/integrations/configurations": {
      "get": {
        "description": "Allows to retrieve all configurations for an authenticated integration. When the `project` view is used, configurations generated for the authorization flow will be filtered out of the results.",
        "operationId": "getConfigurations",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get configurations for the authenticated user or team",
        "tags": [
          "integrations"
        ],
        "responses": {
          "200": {
            "description": "The list of configurations for the authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "properties": {
                          "completedAt": {
                            "type": "number",
                            "description": "A timestamp that tells you when the configuration was installed successfully",
                            "example": 1558531915505
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "A timestamp that tells you when the configuration was created",
                            "example": 1558531915505
                          },
                          "id": {
                            "type": "string",
                            "description": "The unique identifier of the configuration",
                            "example": "icfg_3bwCLgxL8qt5kjRLcv2Dit7F"
                          },
                          "integrationId": {
                            "type": "string",
                            "description": "The unique identifier of the app the configuration was created for",
                            "example": "oac_xzpVzcUOgcB1nrVlirtKhbWV"
                          },
                          "ownerId": {
                            "type": "string",
                            "description": "The user or team ID that owns the configuration",
                            "example": "kr1PsOIzqEL5Xg6M4VZcZosf"
                          },
                          "projects": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.",
                            "example": [
                              "prj_xQxbutw1HpL6HLYPAzt5h75m8NjO"
                            ]
                          },
                          "source": {
                            "type": "string",
                            "enum": [
                              "marketplace",
                              "deploy-button",
                              "external",
                              "v0",
                              "resource-claims"
                            ],
                            "description": "Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.",
                            "example": "marketplace"
                          },
                          "slug": {
                            "type": "string",
                            "description": "The slug of the integration the configuration is created for.",
                            "example": "slack"
                          },
                          "teamId": {
                            "nullable": true,
                            "type": "string",
                            "description": "When the configuration was created for a team, this will show the ID of the team.",
                            "example": "team_nLlpyC6RE1qxydlFKbrxDlud"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "integration-configuration"
                            ]
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "A timestamp that tells you when the configuration was updated.",
                            "example": 1558531915505
                          },
                          "userId": {
                            "type": "string",
                            "description": "The ID of the user that created the configuration.",
                            "example": "kr1PsOIzqEL5Xg6M4VZcZosf"
                          },
                          "scopes": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "The resources that are allowed to be accessed by the configuration.",
                            "example": [
                              "read:project",
                              "read-write:log-drain"
                            ]
                          },
                          "disabledAt": {
                            "type": "number",
                            "description": "A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.",
                            "example": 1558531915505
                          },
                          "deletedAt": {
                            "nullable": true,
                            "type": "number",
                            "description": "A timestamp that tells you when the configuration was deleted.",
                            "example": 1558531915505
                          },
                          "deleteRequestedAt": {
                            "nullable": true,
                            "type": "number",
                            "description": "A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.",
                            "example": 1558531915505
                          },
                          "disabledReason": {
                            "type": "string",
                            "enum": [
                              "disabled-by-owner",
                              "feature-not-available",
                              "disabled-by-admin",
                              "original-owner-left-the-team",
                              "account-plan-downgrade",
                              "original-owner-role-downgraded"
                            ]
                          },
                          "installationType": {
                            "type": "string",
                            "enum": [
                              "marketplace",
                              "external"
                            ],
                            "description": "Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'"
                          }
                        },
                        "type": "object",
                        "description": "The list of configurations for the authenticated user"
                      },
                      "type": "array",
                      "description": "The list of configurations for the authenticated user"
                    },
                    {
                      "items": {
                        "properties": {
                          "integration": {
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "icon": {
                                "type": "string"
                              },
                              "isLegacy": {
                                "type": "boolean"
                              },
                              "flags": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "assignedBetaLabelAt": {
                                "type": "number"
                              },
                              "tagIds": {
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "tag_ai",
                                    "tag_analytics",
                                    "tag_authentication",
                                    "tag_cms",
                                    "tag_code_repository",
                                    "tag_commerce",
                                    "tag_databases",
                                    "tag_dev_tools",
                                    "tag_experimentation",
                                    "tag_flags",
                                    "tag_logging",
                                    "tag_messaging",
                                    "tag_monitoring",
                                    "tag_observability",
                                    "tag_performance",
                                    "tag_productivity",
                                    "tag_searching",
                                    "tag_security",
                                    "tag_testing",
                                    "tag_video",
                                    "tag_workflow"
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "name",
                              "icon",
                              "isLegacy"
                            ],
                            "type": "object"
                          },
                          "completedAt": {
                            "type": "number",
                            "description": "A timestamp that tells you when the configuration was installed successfully",
                            "example": 1558531915505
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "A timestamp that tells you when the configuration was created",
                            "example": 1558531915505
                          },
                          "id": {
                            "type": "string",
                            "description": "The unique identifier of the configuration",
                            "example": "icfg_3bwCLgxL8qt5kjRLcv2Dit7F"
                          },
                          "integrationId": {
                            "type": "string",
                            "description": "The unique identifier of the app the configuration was created for",
                            "example": "oac_xzpVzcUOgcB1nrVlirtKhbWV"
                          },
                          "ownerId": {
                            "type": "string",
                            "description": "The user or team ID that owns the configuration",
                            "example": "kr1PsOIzqEL5Xg6M4VZcZosf"
                          },
                          "projects": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.",
                            "example": [
                              "prj_xQxbutw1HpL6HLYPAzt5h75m8NjO"
                            ]
                          },
                          "source": {
                            "type": "string",
                            "enum": [
                              "marketplace",
                              "deploy-button",
                              "external",
                              "v0",
                              "resource-claims"
                            ],
                            "description": "Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.",
                            "example": "marketplace"
                          },
                          "slug": {
                            "type": "string",
                            "description": "The slug of the integration the configuration is created for.",
                            "example": "slack"
                          },
                          "teamId": {
                            "nullable": true,
                            "type": "string",
                            "description": "When the configuration was created for a team, this will show the ID of the team.",
                            "example": "team_nLlpyC6RE1qxydlFKbrxDlud"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "integration-configuration"
                            ]
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "A timestamp that tells you when the configuration was updated.",
                            "example": 1558531915505
                          },
                          "userId": {
                            "type": "string",
                            "description": "The ID of the user that created the configuration.",
                            "example": "kr1PsOIzqEL5Xg6M4VZcZosf"
                          },
                          "scopes": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "The resources that are allowed to be accessed by the configuration.",
                            "example": [
                              "read:project",
                              "read-write:log-drain"
                            ]
                          },
                          "disabledAt": {
                            "type": "number",
                            "description": "A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.",
                            "example": 1558531915505
                          },
                          "deletedAt": {
                            "nullable": true,
                            "type": "number",
                            "description": "A timestamp that tells you when the configuration was deleted.",
                            "example": 1558531915505
                          },
                          "deleteRequestedAt": {
                            "nullable": true,
                            "type": "number",
                            "description": "A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.",
                            "example": 1558531915505
                          },
                          "disabledReason": {
                            "type": "string",
                            "enum": [
                              "disabled-by-owner",
                              "feature-not-available",
                              "disabled-by-admin",
                              "original-owner-left-the-team",
                              "account-plan-downgrade",
                              "original-owner-role-downgraded"
                            ]
                          },
                          "installationType": {
                            "type": "string",
                            "enum": [
                              "marketplace",
                              "external"
                            ],
                            "description": "Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'"
                          }
                        },
                        "required": [
                          "integration",
                          "createdAt",
                          "id",
                          "integrationId",
                          "ownerId",
                          "slug",
                          "type",
                          "updatedAt",
                          "userId",
                          "scopes"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "account",
                "project"
              ]
            }
          },
          {
            "name": "installationType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "marketplace",
                "external"
              ]
            }
          },
          {
            "name": "integrationIdOrSlug",
            "description": "ID of the integration",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the integration"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "x-speakeasy-test": false
      }
    },
    "/v1/integrations/configuration/{id}": {
      "get": {
        "description": "Allows to retrieve a the configuration with the provided id in case it exists. The authenticated user or team must be the owner of the config in order to access it.",
        "operationId": "getConfiguration",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Retrieve an integration configuration",
        "tags": [
          "integrations"
        ],
        "responses": {
          "200": {
            "description": "The configuration with the provided id",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "completedAt": {
                          "type": "number",
                          "description": "A timestamp that tells you when the configuration was installed successfully",
                          "example": 1558531915505
                        },
                        "createdAt": {
                          "type": "number",
                          "description": "A timestamp that tells you when the configuration was created",
                          "example": 1558531915505
                        },
                        "id": {
                          "type": "string",
                          "description": "The unique identifier of the configuration",
                          "example": "icfg_3bwCLgxL8qt5kjRLcv2Dit7F"
                        },
                        "integrationId": {
                          "type": "string",
                          "description": "The unique identifier of the app the configuration was created for",
                          "example": "oac_xzpVzcUOgcB1nrVlirtKhbWV"
                        },
                        "ownerId": {
                          "type": "string",
                          "description": "The user or team ID that owns the configuration",
                          "example": "kr1PsOIzqEL5Xg6M4VZcZosf"
                        },
                        "projects": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "description": "When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.",
                          "example": [
                            "prj_xQxbutw1HpL6HLYPAzt5h75m8NjO"
                          ]
                        },
                        "source": {
                          "type": "string",
                          "enum": [
                            "marketplace",
                            "deploy-button",
                            "external",
                            "v0",
                            "resource-claims"
                          ],
                          "description": "Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.",
                          "example": "marketplace"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the integration the configuration is created for.",
                          "example": "slack"
                        },
                        "teamId": {
                          "nullable": true,
                          "type": "string",
                          "description": "When the configuration was created for a team, this will show the ID of the team.",
                          "example": "team_nLlpyC6RE1qxydlFKbrxDlud"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "integration-configuration"
                          ]
                        },
                        "updatedAt": {
                          "type": "number",
                          "description": "A timestamp that tells you when the configuration was updated.",
                          "example": 1558531915505
                        },
                        "userId": {
                          "type": "string",
                          "description": "The ID of the user that created the configuration.",
                          "example": "kr1PsOIzqEL5Xg6M4VZcZosf"
                        },
                        "scopes": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "description": "The resources that are allowed to be accessed by the configuration.",
                          "example": [
                            "read:project",
                            "read-write:log-drain"
                          ]
                        },
                        "disabledAt": {
                          "type": "number",
                          "description": "A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.",
                          "example": 1558531915505
                        },
                        "deletedAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "A timestamp that tells you when the configuration was deleted.",
                          "example": 1558531915505
                        },
                        "deleteRequestedAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.",
                          "example": 1558531915505
                        },
                        "disabledReason": {
                          "type": "string",
                          "enum": [
                            "disabled-by-owner",
                            "feature-not-available",
                            "disabled-by-admin",
                            "original-owner-left-the-team",
                            "account-plan-downgrade",
                            "original-owner-role-downgraded"
                          ]
                        },
                        "installationType": {
                          "type": "string",
                          "enum": [
                            "marketplace",
                            "external"
                          ],
                          "description": "Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'"
                        }
                      },
                      "required": [
                        "createdAt",
                        "id",
                        "integrationId",
                        "ownerId",
                        "slug",
                        "type",
                        "updatedAt",
                        "userId",
                        "scopes"
                      ],
                      "type": "object",
                      "description": "The configuration with the provided id"
                    },
                    {
                      "properties": {
                        "projectSelection": {
                          "type": "string",
                          "enum": [
                            "selected",
                            "all"
                          ],
                          "description": "A string representing the permission for projects. Possible values are `all` or `selected`.",
                          "example": "all"
                        },
                        "notification": {
                          "properties": {
                            "level": {
                              "type": "string",
                              "enum": [
                                "info",
                                "warn",
                                "error"
                              ]
                            },
                            "title": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            },
                            "href": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "level",
                            "title"
                          ],
                          "type": "object"
                        },
                        "transferRequest": {
                          "oneOf": [
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "transfer-to-marketplace"
                                  ]
                                },
                                "metadata": {
                                  "additionalProperties": true,
                                  "type": "object"
                                },
                                "billingPlan": {
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "subscription",
                                        "prepayment"
                                      ]
                                    },
                                    "scope": {
                                      "type": "string",
                                      "enum": [
                                        "installation",
                                        "resource"
                                      ]
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    },
                                    "paymentMethodRequired": {
                                      "type": "boolean"
                                    },
                                    "preauthorizationAmount": {
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type",
                                    "name",
                                    "description"
                                  ],
                                  "type": "object"
                                },
                                "requestId": {
                                  "type": "string"
                                },
                                "transferId": {
                                  "type": "string"
                                },
                                "requester": {
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "email": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ],
                                  "type": "object"
                                },
                                "createdAt": {
                                  "type": "number"
                                },
                                "expiresAt": {
                                  "type": "number"
                                },
                                "discardedAt": {
                                  "type": "number"
                                },
                                "discardedBy": {
                                  "type": "string"
                                },
                                "approvedAt": {
                                  "type": "number"
                                },
                                "approvedBy": {
                                  "type": "string"
                                },
                                "authorizationId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "kind",
                                "requestId",
                                "transferId",
                                "requester",
                                "createdAt",
                                "expiresAt"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "transfer-from-marketplace"
                                  ]
                                },
                                "requestId": {
                                  "type": "string"
                                },
                                "transferId": {
                                  "type": "string"
                                },
                                "requester": {
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "email": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ],
                                  "type": "object"
                                },
                                "createdAt": {
                                  "type": "number"
                                },
                                "expiresAt": {
                                  "type": "number"
                                },
                                "discardedAt": {
                                  "type": "number"
                                },
                                "discardedBy": {
                                  "type": "string"
                                },
                                "approvedAt": {
                                  "type": "number"
                                },
                                "approvedBy": {
                                  "type": "string"
                                },
                                "authorizationId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "kind",
                                "requestId",
                                "transferId",
                                "requester",
                                "createdAt",
                                "expiresAt"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "projects": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "description": "When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.",
                          "example": [
                            "prj_xQxbutw1HpL6HLYPAzt5h75m8NjO"
                          ]
                        },
                        "completedAt": {
                          "type": "number",
                          "description": "A timestamp that tells you when the configuration was installed successfully",
                          "example": 1558531915505
                        },
                        "createdAt": {
                          "type": "number",
                          "description": "A timestamp that tells you when the configuration was created",
                          "example": 1558531915505
                        },
                        "id": {
                          "type": "string",
                          "description": "The unique identifier of the configuration",
                          "example": "icfg_3bwCLgxL8qt5kjRLcv2Dit7F"
                        },
                        "integrationId": {
                          "type": "string",
                          "description": "The unique identifier of the app the configuration was created for",
                          "example": "oac_xzpVzcUOgcB1nrVlirtKhbWV"
                        },
                        "ownerId": {
                          "type": "string",
                          "description": "The user or team ID that owns the configuration",
                          "example": "kr1PsOIzqEL5Xg6M4VZcZosf"
                        },
                        "source": {
                          "type": "string",
                          "enum": [
                            "marketplace",
                            "deploy-button",
                            "external",
                            "v0",
                            "resource-claims"
                          ],
                          "description": "Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.",
                          "example": "marketplace"
                        },
                        "slug": {
                          "type": "string",
                          "description": "The slug of the integration the configuration is created for.",
                          "example": "slack"
                        },
                        "teamId": {
                          "nullable": true,
                          "type": "string",
                          "description": "When the configuration was created for a team, this will show the ID of the team.",
                          "example": "team_nLlpyC6RE1qxydlFKbrxDlud"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "integration-configuration"
                          ]
                        },
                        "updatedAt": {
                          "type": "number",
                          "description": "A timestamp that tells you when the configuration was updated.",
                          "example": 1558531915505
                        },
                        "userId": {
                          "type": "string",
                          "description": "The ID of the user that created the configuration.",
                          "example": "kr1PsOIzqEL5Xg6M4VZcZosf"
                        },
                        "scopes": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "description": "The resources that are allowed to be accessed by the configuration.",
                          "example": [
                            "read:project",
                            "read-write:log-drain"
                          ]
                        },
                        "disabledAt": {
                          "type": "number",
                          "description": "A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.",
                          "example": 1558531915505
                        },
                        "deletedAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "A timestamp that tells you when the configuration was deleted.",
                          "example": 1558531915505
                        },
                        "deleteRequestedAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.",
                          "example": 1558531915505
                        },
                        "disabledReason": {
                          "type": "string",
                          "enum": [
                            "disabled-by-owner",
                            "feature-not-available",
                            "disabled-by-admin",
                            "original-owner-left-the-team",
                            "account-plan-downgrade",
                            "original-owner-role-downgraded"
                          ]
                        },
                        "installationType": {
                          "type": "string",
                          "enum": [
                            "marketplace",
                            "external"
                          ],
                          "description": "Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'"
                        },
                        "canConfigureOpenTelemetry": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "projectSelection",
                        "notification",
                        "transferRequest",
                        "createdAt",
                        "id",
                        "integrationId",
                        "ownerId",
                        "slug",
                        "type",
                        "updatedAt",
                        "userId",
                        "scopes"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The configuration was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the configuration to check",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the configuration to check",
              "example": "icfg_cuwj0AdCdH3BwWT4LPijCC7t"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "delete": {
        "description": "Allows to remove the configuration with the `id` provided in the parameters. The configuration and all of its resources will be removed. This includes Webhooks, LogDrains and Project Env variables.",
        "operationId": "deleteConfiguration",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete an integration configuration",
        "tags": [
          "integrations"
        ],
        "responses": {
          "204": {
            "description": "The configuration was successfully removed"
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The configuration was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/integrations/configuration/{id}/products": {
      "get": {
        "description": "Lists all products available for an integration configuration. Use this endpoint to discover what integration products are available for your integration configuration. The returned product IDs or slugs can then be used with storage provisioning endpoints like `POST /v1/storage/stores/integration/direct`. ## Workflow 1. Get your integration configurations: `GET /v1/integrations/configurations` 2. **Use this endpoint**: Get products for a configuration: `GET /v1/integrations/configuration/{id}/products` 3. Create storage resource: `POST /v1/storage/stores/integration/direct` ## Response Returns an array of products with their IDs, slugs, names, supported protocols, and metadata requirements. Each product represents a different type of resource you can provision. The `metadataSchema` field contains a JSON Schema that defines: - **Required metadata**: Fields that must be provided during storage creation - **Optional metadata**: Fields that can be provided but are not mandatory - **Field validation**: Data types, allowed values, and constraints Use this schema to validate metadata before calling the storage creation endpoint.",
        "operationId": "getConfigurationProducts",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List products for integration configuration",
        "tags": [
          "integrations"
        ],
        "responses": {
          "200": {
            "description": "List of products available for this integration configuration",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "products": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "slug": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "protocols": {
                            "properties": {
                              "storage": {
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "disabled",
                                      "enabled"
                                    ]
                                  },
                                  "repl": {
                                    "properties": {
                                      "enabled": {
                                        "type": "boolean"
                                      },
                                      "supportsReadOnlyMode": {
                                        "type": "boolean"
                                      },
                                      "welcomeMessage": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "enabled",
                                      "supportsReadOnlyMode"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "status"
                                ],
                                "type": "object"
                              },
                              "experimentation": {
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "disabled",
                                      "enabled"
                                    ]
                                  },
                                  "edgeConfigSyncingSupport": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "status"
                                ],
                                "type": "object"
                              },
                              "ai": {
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "disabled",
                                      "enabled"
                                    ]
                                  }
                                },
                                "required": [
                                  "status"
                                ],
                                "type": "object"
                              },
                              "authentication": {
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "disabled",
                                      "enabled"
                                    ]
                                  }
                                },
                                "required": [
                                  "status"
                                ],
                                "type": "object"
                              },
                              "observability": {
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "disabled",
                                      "enabled"
                                    ]
                                  }
                                },
                                "required": [
                                  "status"
                                ],
                                "type": "object"
                              },
                              "video": {
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "disabled",
                                      "enabled"
                                    ]
                                  }
                                },
                                "required": [
                                  "status"
                                ],
                                "type": "object"
                              },
                              "workflow": {
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "disabled",
                                      "enabled"
                                    ]
                                  }
                                },
                                "required": [
                                  "status"
                                ],
                                "type": "object"
                              },
                              "checks": {
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "disabled",
                                      "enabled"
                                    ]
                                  }
                                },
                                "required": [
                                  "status"
                                ],
                                "type": "object"
                              },
                              "logDrain": {
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "disabled",
                                      "enabled"
                                    ]
                                  },
                                  "endpoint": {
                                    "type": "string"
                                  },
                                  "headers": {
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "type": "object"
                                  },
                                  "format": {
                                    "type": "string",
                                    "enum": [
                                      "json",
                                      "ndjson"
                                    ]
                                  }
                                },
                                "required": [
                                  "status",
                                  "endpoint",
                                  "format"
                                ],
                                "type": "object"
                              },
                              "traceDrain": {
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "disabled",
                                      "enabled"
                                    ]
                                  },
                                  "endpoint": {
                                    "type": "string"
                                  },
                                  "headers": {
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "type": "object"
                                  },
                                  "format": {
                                    "type": "string",
                                    "enum": [
                                      "json",
                                      "proto"
                                    ]
                                  }
                                },
                                "required": [
                                  "status",
                                  "endpoint",
                                  "format"
                                ],
                                "type": "object"
                              },
                              "messaging": {
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "disabled",
                                      "enabled"
                                    ]
                                  }
                                },
                                "required": [
                                  "status"
                                ],
                                "type": "object"
                              },
                              "other": {
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "disabled",
                                      "enabled"
                                    ]
                                  }
                                },
                                "required": [
                                  "status"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "primaryProtocol": {
                            "type": "string",
                            "enum": [
                              "storage",
                              "experimentation",
                              "ai",
                              "observability",
                              "video",
                              "authentication",
                              "workflow",
                              "checks",
                              "logDrain",
                              "traceDrain",
                              "messaging",
                              "other"
                            ]
                          },
                          "metadataSchema": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "object"
                                ]
                              },
                              "properties": {
                                "additionalProperties": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "string"
                                          ]
                                        },
                                        "ui:control": {
                                          "type": "string",
                                          "enum": [
                                            "input"
                                          ]
                                        },
                                        "description": {
                                          "type": "string"
                                        },
                                        "minLength": {
                                          "type": "object",
                                          "properties": {
                                            "__@BRAND@510349": {
                                              "type": "object"
                                            }
                                          },
                                          "required": [
                                            "__@BRAND@510349"
                                          ]
                                        },
                                        "maxLength": {
                                          "type": "object",
                                          "properties": {
                                            "__@BRAND@510349": {
                                              "type": "object"
                                            }
                                          },
                                          "required": [
                                            "__@BRAND@510349"
                                          ]
                                        },
                                        "pattern": {
                                          "type": "object",
                                          "properties": {
                                            "__@BRAND@510349": {
                                              "type": "object"
                                            }
                                          },
                                          "required": [
                                            "__@BRAND@510349"
                                          ]
                                        },
                                        "default": {
                                          "type": "string"
                                        },
                                        "enum": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "ui:label": {
                                          "type": "string"
                                        },
                                        "ui:read-only": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:hidden": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:disabled": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:description": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            }
                                          ]
                                        },
                                        "ui:formatted-value": {
                                          "properties": {
                                            "expr": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "expr"
                                          ],
                                          "type": "object"
                                        },
                                        "ui:placeholder": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "ui:control"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "number"
                                          ]
                                        },
                                        "ui:control": {
                                          "type": "string",
                                          "enum": [
                                            "input"
                                          ]
                                        },
                                        "minimum": {
                                          "type": "number"
                                        },
                                        "maximum": {
                                          "type": "number"
                                        },
                                        "description": {
                                          "type": "string"
                                        },
                                        "default": {
                                          "type": "number"
                                        },
                                        "exclusiveMinimum": {
                                          "type": "number"
                                        },
                                        "exclusiveMaximum": {
                                          "type": "number"
                                        },
                                        "ui:label": {
                                          "type": "string"
                                        },
                                        "ui:read-only": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:hidden": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:disabled": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:description": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            }
                                          ]
                                        },
                                        "ui:formatted-value": {
                                          "properties": {
                                            "expr": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "expr"
                                          ],
                                          "type": "object"
                                        },
                                        "ui:placeholder": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "ui:control"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "boolean"
                                          ]
                                        },
                                        "ui:control": {
                                          "type": "string",
                                          "enum": [
                                            "toggle"
                                          ]
                                        },
                                        "description": {
                                          "type": "string"
                                        },
                                        "default": {
                                          "type": "boolean"
                                        },
                                        "ui:label": {
                                          "type": "string"
                                        },
                                        "ui:read-only": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:hidden": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:disabled": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:description": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            }
                                          ]
                                        },
                                        "ui:formatted-value": {
                                          "properties": {
                                            "expr": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "expr"
                                          ],
                                          "type": "object"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "ui:control"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "array"
                                          ]
                                        },
                                        "ui:control": {
                                          "type": "string",
                                          "enum": [
                                            "slider"
                                          ]
                                        },
                                        "ui:steps": {
                                          "items": {
                                            "type": "number"
                                          },
                                          "type": "array"
                                        },
                                        "items": {
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "number"
                                              ]
                                            },
                                            "description": {
                                              "type": "string"
                                            },
                                            "minimum": {
                                              "type": "number"
                                            },
                                            "exclusiveMinimum": {
                                              "type": "number"
                                            },
                                            "maximum": {
                                              "type": "number"
                                            },
                                            "exclusiveMaximum": {
                                              "type": "number"
                                            },
                                            "default": {
                                              "type": "number"
                                            }
                                          },
                                          "required": [
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "description": {
                                          "type": "string"
                                        },
                                        "minItems": {
                                          "type": "number"
                                        },
                                        "maxItems": {
                                          "type": "number"
                                        },
                                        "ui:label": {
                                          "type": "string"
                                        },
                                        "ui:read-only": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:hidden": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:disabled": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:description": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            }
                                          ]
                                        },
                                        "ui:formatted-value": {
                                          "properties": {
                                            "expr": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "expr"
                                          ],
                                          "type": "object"
                                        },
                                        "default": {
                                          "items": {
                                            "type": "number"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "ui:control",
                                        "ui:steps",
                                        "items"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "string"
                                          ]
                                        },
                                        "ui:control": {
                                          "type": "string",
                                          "enum": [
                                            "select"
                                          ]
                                        },
                                        "ui:options": {
                                          "items": {
                                            "properties": {
                                              "value": {
                                                "type": "string"
                                              },
                                              "label": {
                                                "type": "string"
                                              },
                                              "disabled": {
                                                "oneOf": [
                                                  {
                                                    "type": "boolean"
                                                  },
                                                  {
                                                    "properties": {
                                                      "expr": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "expr"
                                                    ],
                                                    "type": "object"
                                                  },
                                                  {
                                                    "type": "string",
                                                    "enum": [
                                                      "update",
                                                      "create"
                                                    ]
                                                  }
                                                ]
                                              },
                                              "hidden": {
                                                "oneOf": [
                                                  {
                                                    "type": "boolean"
                                                  },
                                                  {
                                                    "properties": {
                                                      "expr": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "expr"
                                                    ],
                                                    "type": "object"
                                                  },
                                                  {
                                                    "type": "string",
                                                    "enum": [
                                                      "update",
                                                      "create"
                                                    ]
                                                  }
                                                ]
                                              }
                                            },
                                            "required": [
                                              "value",
                                              "label"
                                            ],
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "description": {
                                          "type": "string"
                                        },
                                        "minLength": {
                                          "type": "object",
                                          "properties": {
                                            "__@BRAND@510349": {
                                              "type": "object"
                                            }
                                          },
                                          "required": [
                                            "__@BRAND@510349"
                                          ]
                                        },
                                        "maxLength": {
                                          "type": "object",
                                          "properties": {
                                            "__@BRAND@510349": {
                                              "type": "object"
                                            }
                                          },
                                          "required": [
                                            "__@BRAND@510349"
                                          ]
                                        },
                                        "pattern": {
                                          "type": "object",
                                          "properties": {
                                            "__@BRAND@510349": {
                                              "type": "object"
                                            }
                                          },
                                          "required": [
                                            "__@BRAND@510349"
                                          ]
                                        },
                                        "default": {
                                          "type": "string"
                                        },
                                        "enum": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "ui:label": {
                                          "type": "string"
                                        },
                                        "ui:read-only": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:hidden": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:disabled": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:description": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            }
                                          ]
                                        },
                                        "ui:formatted-value": {
                                          "properties": {
                                            "expr": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "expr"
                                          ],
                                          "type": "object"
                                        },
                                        "ui:placeholder": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "ui:control",
                                        "ui:options"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "array"
                                          ]
                                        },
                                        "ui:control": {
                                          "type": "string",
                                          "enum": [
                                            "multi-select"
                                          ]
                                        },
                                        "items": {
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "string"
                                              ]
                                            },
                                            "description": {
                                              "type": "string"
                                            },
                                            "minLength": {
                                              "type": "object",
                                              "properties": {
                                                "__@BRAND@510349": {
                                                  "type": "object"
                                                }
                                              },
                                              "required": [
                                                "__@BRAND@510349"
                                              ]
                                            },
                                            "maxLength": {
                                              "type": "object",
                                              "properties": {
                                                "__@BRAND@510349": {
                                                  "type": "object"
                                                }
                                              },
                                              "required": [
                                                "__@BRAND@510349"
                                              ]
                                            },
                                            "pattern": {
                                              "type": "object",
                                              "properties": {
                                                "__@BRAND@510349": {
                                                  "type": "object"
                                                }
                                              },
                                              "required": [
                                                "__@BRAND@510349"
                                              ]
                                            },
                                            "default": {
                                              "type": "string"
                                            },
                                            "enum": {
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "required": [
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "ui:options": {
                                          "items": {
                                            "properties": {
                                              "value": {
                                                "type": "string"
                                              },
                                              "label": {
                                                "type": "string"
                                              },
                                              "disabled": {
                                                "oneOf": [
                                                  {
                                                    "type": "boolean"
                                                  },
                                                  {
                                                    "properties": {
                                                      "expr": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "expr"
                                                    ],
                                                    "type": "object"
                                                  },
                                                  {
                                                    "type": "string",
                                                    "enum": [
                                                      "update",
                                                      "create"
                                                    ]
                                                  }
                                                ]
                                              },
                                              "hidden": {
                                                "oneOf": [
                                                  {
                                                    "type": "boolean"
                                                  },
                                                  {
                                                    "properties": {
                                                      "expr": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "expr"
                                                    ],
                                                    "type": "object"
                                                  },
                                                  {
                                                    "type": "string",
                                                    "enum": [
                                                      "update",
                                                      "create"
                                                    ]
                                                  }
                                                ]
                                              }
                                            },
                                            "required": [
                                              "value",
                                              "label"
                                            ],
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "description": {
                                          "type": "string"
                                        },
                                        "minItems": {
                                          "type": "number"
                                        },
                                        "maxItems": {
                                          "type": "number"
                                        },
                                        "ui:label": {
                                          "type": "string"
                                        },
                                        "ui:read-only": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:hidden": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:disabled": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:description": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            }
                                          ]
                                        },
                                        "ui:formatted-value": {
                                          "properties": {
                                            "expr": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "expr"
                                          ],
                                          "type": "object"
                                        },
                                        "ui:placeholder": {
                                          "type": "string"
                                        },
                                        "default": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "example": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "ui:control",
                                        "items",
                                        "ui:options"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "string"
                                          ]
                                        },
                                        "ui:control": {
                                          "type": "string",
                                          "enum": [
                                            "vercel-region"
                                          ]
                                        },
                                        "ui:options": {
                                          "items": {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "value": {
                                                    "type": "string"
                                                  },
                                                  "label": {
                                                    "type": "string"
                                                  },
                                                  "disabled": {
                                                    "oneOf": [
                                                      {
                                                        "type": "boolean"
                                                      },
                                                      {
                                                        "properties": {
                                                          "expr": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "expr"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "update",
                                                          "create"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "hidden": {
                                                    "oneOf": [
                                                      {
                                                        "type": "boolean"
                                                      },
                                                      {
                                                        "properties": {
                                                          "expr": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "expr"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "update",
                                                          "create"
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                },
                                                "required": [
                                                  "value",
                                                  "label"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "__@BRAND@510349": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "__@BRAND@510349"
                                                ]
                                              },
                                              {
                                                "properties": {
                                                  "value": {
                                                    "type": "object",
                                                    "properties": {
                                                      "__@BRAND@510349": {
                                                        "type": "object"
                                                      }
                                                    },
                                                    "required": [
                                                      "__@BRAND@510349"
                                                    ]
                                                  },
                                                  "disabled": {
                                                    "oneOf": [
                                                      {
                                                        "type": "boolean"
                                                      },
                                                      {
                                                        "properties": {
                                                          "expr": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "expr"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "update",
                                                          "create"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "hidden": {
                                                    "oneOf": [
                                                      {
                                                        "type": "boolean"
                                                      },
                                                      {
                                                        "properties": {
                                                          "expr": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "expr"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "update",
                                                          "create"
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                },
                                                "required": [
                                                  "value"
                                                ],
                                                "type": "object"
                                              }
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        "description": {
                                          "type": "string"
                                        },
                                        "minLength": {
                                          "type": "object",
                                          "properties": {
                                            "__@BRAND@510349": {
                                              "type": "object"
                                            }
                                          },
                                          "required": [
                                            "__@BRAND@510349"
                                          ]
                                        },
                                        "maxLength": {
                                          "type": "object",
                                          "properties": {
                                            "__@BRAND@510349": {
                                              "type": "object"
                                            }
                                          },
                                          "required": [
                                            "__@BRAND@510349"
                                          ]
                                        },
                                        "pattern": {
                                          "type": "object",
                                          "properties": {
                                            "__@BRAND@510349": {
                                              "type": "object"
                                            }
                                          },
                                          "required": [
                                            "__@BRAND@510349"
                                          ]
                                        },
                                        "default": {
                                          "type": "string"
                                        },
                                        "enum": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array"
                                        },
                                        "ui:label": {
                                          "type": "string"
                                        },
                                        "ui:read-only": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:hidden": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:disabled": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:description": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            }
                                          ]
                                        },
                                        "ui:formatted-value": {
                                          "properties": {
                                            "expr": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "expr"
                                          ],
                                          "type": "object"
                                        },
                                        "ui:placeholder": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "ui:control",
                                        "ui:options"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "array"
                                          ]
                                        },
                                        "ui:control": {
                                          "type": "string",
                                          "enum": [
                                            "multi-vercel-region"
                                          ]
                                        },
                                        "items": {
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "string"
                                              ]
                                            },
                                            "description": {
                                              "type": "string"
                                            },
                                            "minLength": {
                                              "type": "object",
                                              "properties": {
                                                "__@BRAND@510349": {
                                                  "type": "object"
                                                }
                                              },
                                              "required": [
                                                "__@BRAND@510349"
                                              ]
                                            },
                                            "maxLength": {
                                              "type": "object",
                                              "properties": {
                                                "__@BRAND@510349": {
                                                  "type": "object"
                                                }
                                              },
                                              "required": [
                                                "__@BRAND@510349"
                                              ]
                                            },
                                            "pattern": {
                                              "type": "object",
                                              "properties": {
                                                "__@BRAND@510349": {
                                                  "type": "object"
                                                }
                                              },
                                              "required": [
                                                "__@BRAND@510349"
                                              ]
                                            },
                                            "default": {
                                              "type": "string"
                                            },
                                            "enum": {
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "required": [
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "ui:options": {
                                          "items": {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "value": {
                                                    "type": "string"
                                                  },
                                                  "label": {
                                                    "type": "string"
                                                  },
                                                  "disabled": {
                                                    "oneOf": [
                                                      {
                                                        "type": "boolean"
                                                      },
                                                      {
                                                        "properties": {
                                                          "expr": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "expr"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "update",
                                                          "create"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "hidden": {
                                                    "oneOf": [
                                                      {
                                                        "type": "boolean"
                                                      },
                                                      {
                                                        "properties": {
                                                          "expr": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "expr"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "update",
                                                          "create"
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                },
                                                "required": [
                                                  "value",
                                                  "label"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "__@BRAND@510349": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "__@BRAND@510349"
                                                ]
                                              },
                                              {
                                                "properties": {
                                                  "value": {
                                                    "type": "object",
                                                    "properties": {
                                                      "__@BRAND@510349": {
                                                        "type": "object"
                                                      }
                                                    },
                                                    "required": [
                                                      "__@BRAND@510349"
                                                    ]
                                                  },
                                                  "disabled": {
                                                    "oneOf": [
                                                      {
                                                        "type": "boolean"
                                                      },
                                                      {
                                                        "properties": {
                                                          "expr": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "expr"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "update",
                                                          "create"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "hidden": {
                                                    "oneOf": [
                                                      {
                                                        "type": "boolean"
                                                      },
                                                      {
                                                        "properties": {
                                                          "expr": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "expr"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      {
                                                        "type": "string",
                                                        "enum": [
                                                          "update",
                                                          "create"
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                },
                                                "required": [
                                                  "value"
                                                ],
                                                "type": "object"
                                              }
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        "description": {
                                          "type": "string"
                                        },
                                        "minItems": {
                                          "type": "number"
                                        },
                                        "maxItems": {
                                          "type": "number"
                                        },
                                        "ui:label": {
                                          "type": "string"
                                        },
                                        "ui:read-only": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:hidden": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:disabled": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "ui:description": {
                                          "oneOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            }
                                          ]
                                        },
                                        "ui:formatted-value": {
                                          "properties": {
                                            "expr": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "expr"
                                          ],
                                          "type": "object"
                                        },
                                        "ui:placeholder": {
                                          "type": "string"
                                        },
                                        "default": {
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "__@BRAND@510349": {
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "__@BRAND@510349"
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        "example": {
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "__@BRAND@510349": {
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "__@BRAND@510349"
                                            ]
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "ui:control",
                                        "items",
                                        "ui:options"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "__@BRAND@510349": {
                                              "type": "object"
                                            }
                                          },
                                          "required": [
                                            "__@BRAND@510349"
                                          ]
                                        },
                                        "disabled": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        },
                                        "hidden": {
                                          "oneOf": [
                                            {
                                              "type": "boolean"
                                            },
                                            {
                                              "properties": {
                                                "expr": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "expr"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "type": "string",
                                              "enum": [
                                                "update",
                                                "create"
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "required": [
                                        "value"
                                      ],
                                      "type": "object"
                                    }
                                  ]
                                },
                                "type": "object"
                              },
                              "required": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "type",
                              "properties"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "id",
                          "slug",
                          "name",
                          "protocols",
                          "metadataSchema"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "integration": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "slug": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "slug",
                        "name"
                      ],
                      "type": "object"
                    },
                    "configuration": {
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "products",
                    "integration",
                    "configuration"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the integration configuration",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the integration configuration",
              "example": "icfg_cuwj0AdCdH3BwWT4LPijCC7t"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/integrations/sso/token": {
      "post": {
        "description": "During the autorization process, Vercel sends the user to the provider [redirectLoginUrl](https://vercel.com/docs/integrations/create-integration/submit-integration#redirect-login-url), that includes the OAuth authorization `code` parameter. The provider then calls the SSO Token Exchange endpoint with the sent code and receives the OIDC token. They log the user in based on this token and redirects the user back to the Vercel account using deep-link parameters included the redirectLoginUrl. Providers should not persist the returned `id_token` in a database since the token will expire. See [**Authentication with SSO**](https://vercel.com/docs/integrations/create-integration/marketplace-api#authentication-with-sso) for more details.",
        "operationId": "exchange-sso-token",
        "security": [],
        "summary": "SSO Token Exchange",
        "tags": [
          "authentication",
          "marketplace"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id_token": {
                      "type": "string"
                    },
                    "access_token": {
                      "nullable": true,
                      "type": "string"
                    },
                    "token_type": {
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "required": [
                    "id_token",
                    "access_token",
                    "token_type"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "client_id",
                  "client_secret"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The sensitive code received from Vercel"
                  },
                  "state": {
                    "type": "string",
                    "description": "The state received from the initialization request"
                  },
                  "client_id": {
                    "type": "string",
                    "description": "The integration client id"
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "The integration client secret"
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "The integration redirect URI"
                  },
                  "grant_type": {
                    "type": "string",
                    "description": "The grant type, when using x-www-form-urlencoded content type",
                    "enum": [
                      "authorization_code"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v2/integrations/log-drains": {
      "get": {
        "description": "Retrieves a list of all Integration log drains that are defined for the authenticated user or team. When using an OAuth2 token, the list is limited to log drains created by the authenticated integration.",
        "operationId": "getIntegrationLogDrains",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Retrieves a list of Integration log drains",
        "tags": [
          "logDrains"
        ],
        "responses": {
          "200": {
            "description": "A list of log drains",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "clientId": {
                        "type": "string",
                        "description": "The oauth2 client application id that created this log drain",
                        "example": "oac_xRhY4LAB7yLhUADD69EvV7ct"
                      },
                      "configurationId": {
                        "type": "string",
                        "description": "The client configuration this log drain was created with",
                        "example": "icfg_3bwCLgxL8qt5kjRLcv2Dit7F"
                      },
                      "createdAt": {
                        "type": "number",
                        "description": "A timestamp that tells you when the log drain was created",
                        "example": 1558531915505
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier of the log drain. Always prefixed with `ld_`",
                        "example": "ld_nBuA7zCID8g4QZ8g"
                      },
                      "deliveryFormat": {
                        "type": "string",
                        "enum": [
                          "json",
                          "ndjson",
                          "syslog",
                          "protobuf"
                        ],
                        "description": "The delivery log format",
                        "example": "json"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the log drain",
                        "example": "My first log drain"
                      },
                      "ownerId": {
                        "type": "string",
                        "description": "The identifier of the team or user whose events will trigger the log drain",
                        "example": "kr1PsOIzqEL5Xg6M4VZcZosf"
                      },
                      "projectId": {
                        "nullable": true,
                        "type": "string",
                        "example": "AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb"
                      },
                      "projectIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "description": "The identifier of the projects this log drain is associated with",
                        "example": "AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb"
                      },
                      "url": {
                        "type": "string",
                        "description": "The URL to call when logs are generated",
                        "example": "https://example.com/log-drain"
                      },
                      "sources": {
                        "items": {
                          "type": "string",
                          "enum": [
                            "build",
                            "edge",
                            "lambda",
                            "static",
                            "external",
                            "firewall"
                          ],
                          "description": "The sources from which logs are currently being delivered to this log drain.",
                          "example": [
                            "build",
                            "edge"
                          ]
                        },
                        "type": "array",
                        "description": "The sources from which logs are currently being delivered to this log drain.",
                        "example": [
                          "build",
                          "edge"
                        ]
                      },
                      "createdFrom": {
                        "type": "string",
                        "enum": [
                          "integration",
                          "self-served"
                        ],
                        "description": "Whether the log drain was created by an integration or by a user",
                        "example": "integration"
                      },
                      "headers": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object",
                        "description": "The headers to send with the request",
                        "example": "{\"Authorization\": \"Bearer 123\"}"
                      },
                      "environments": {
                        "items": {
                          "type": "string",
                          "enum": [
                            "production",
                            "preview"
                          ],
                          "description": "The environment of log drain",
                          "example": [
                            "production"
                          ]
                        },
                        "type": "array",
                        "description": "The environment of log drain",
                        "example": [
                          "production"
                        ]
                      },
                      "branch": {
                        "type": "string",
                        "description": "The branch regexp of log drain",
                        "example": "feature/*"
                      },
                      "samplingRate": {
                        "type": "number",
                        "description": "The sampling rate of log drain",
                        "example": 0.5
                      }
                    },
                    "required": [
                      "createdAt",
                      "id",
                      "name",
                      "ownerId",
                      "url"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "post": {
        "description": "Creates an Integration log drain. This endpoint must be called with an OAuth2 client (integration), since log drains are tied to integrations. If it is called with a different token type it will produce a 400 error.",
        "operationId": "createLogDrain",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Creates a new Integration Log Drain",
        "tags": [
          "logDrains"
        ],
        "responses": {
          "200": {
            "description": "The log drain was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "clientId": {
                      "type": "string",
                      "description": "The oauth2 client application id that created this log drain",
                      "example": "oac_xRhY4LAB7yLhUADD69EvV7ct"
                    },
                    "configurationId": {
                      "type": "string",
                      "description": "The client configuration this log drain was created with",
                      "example": "icfg_3bwCLgxL8qt5kjRLcv2Dit7F"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "A timestamp that tells you when the log drain was created",
                      "example": 1558531915505
                    },
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the log drain. Always prefixed with `ld_`",
                      "example": "ld_nBuA7zCID8g4QZ8g"
                    },
                    "deliveryFormat": {
                      "type": "string",
                      "enum": [
                        "json",
                        "ndjson",
                        "syslog",
                        "protobuf"
                      ],
                      "description": "The delivery log format",
                      "example": "json"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the log drain",
                      "example": "My first log drain"
                    },
                    "ownerId": {
                      "type": "string",
                      "description": "The identifier of the team or user whose events will trigger the log drain",
                      "example": "kr1PsOIzqEL5Xg6M4VZcZosf"
                    },
                    "projectId": {
                      "nullable": true,
                      "type": "string",
                      "example": "AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb"
                    },
                    "projectIds": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "The identifier of the projects this log drain is associated with",
                      "example": "AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb"
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL to call when logs are generated",
                      "example": "https://example.com/log-drain"
                    },
                    "sources": {
                      "items": {
                        "type": "string",
                        "enum": [
                          "build",
                          "edge",
                          "lambda",
                          "static",
                          "external",
                          "firewall"
                        ],
                        "description": "The sources from which logs are currently being delivered to this log drain.",
                        "example": [
                          "build",
                          "edge"
                        ]
                      },
                      "type": "array",
                      "description": "The sources from which logs are currently being delivered to this log drain.",
                      "example": [
                        "build",
                        "edge"
                      ]
                    },
                    "createdFrom": {
                      "type": "string",
                      "enum": [
                        "integration",
                        "self-served"
                      ],
                      "description": "Whether the log drain was created by an integration or by a user",
                      "example": "integration"
                    },
                    "headers": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object",
                      "description": "The headers to send with the request",
                      "example": "{\"Authorization\": \"Bearer 123\"}"
                    },
                    "environments": {
                      "items": {
                        "type": "string",
                        "enum": [
                          "production",
                          "preview"
                        ],
                        "description": "The environment of log drain",
                        "example": [
                          "production"
                        ]
                      },
                      "type": "array",
                      "description": "The environment of log drain",
                      "example": [
                        "production"
                      ]
                    },
                    "branch": {
                      "type": "string",
                      "description": "The branch regexp of log drain",
                      "example": "feature/*"
                    },
                    "samplingRate": {
                      "type": "number",
                      "description": "The sampling rate of log drain",
                      "example": 0.5
                    }
                  },
                  "required": [
                    "createdAt",
                    "id",
                    "name",
                    "ownerId",
                    "url"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nThe provided token is not from an OAuth2 Client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of the log drain",
                    "example": "My first log drain",
                    "maxLength": 100,
                    "pattern": "^[A-z0-9_ -]+$",
                    "type": "string"
                  },
                  "projectIds": {
                    "minItems": 1,
                    "maxItems": 50,
                    "type": "array",
                    "items": {
                      "pattern": "^[a-zA-z0-9_]+$",
                      "type": "string"
                    }
                  },
                  "secret": {
                    "description": "A secret to sign log drain notification headers so a consumer can verify their authenticity",
                    "example": "a1Xsfd325fXcs",
                    "maxLength": 100,
                    "pattern": "^[A-z0-9_ -]+$",
                    "type": "string"
                  },
                  "deliveryFormat": {
                    "description": "The delivery log format",
                    "example": "json",
                    "enum": [
                      "json",
                      "ndjson",
                      "syslog"
                    ]
                  },
                  "url": {
                    "description": "The url where you will receive logs. The protocol must be `https://` or `http://` when type is `json` and `ndjson`, and `syslog+tls:` or `syslog:` when the type is `syslog`.",
                    "example": "https://example.com/log-drain",
                    "format": "uri",
                    "pattern": "^(https?|syslog\\\\+tls|syslog)://",
                    "type": "string"
                  },
                  "sources": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                      "type": "string",
                      "enum": [
                        "static",
                        "lambda",
                        "build",
                        "edge",
                        "external",
                        "firewall"
                      ]
                    },
                    "minItems": 1
                  },
                  "headers": {
                    "description": "Headers to be sent together with the request",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "environments": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                      "type": "string",
                      "enum": [
                        "preview",
                        "production"
                      ]
                    },
                    "minItems": 1
                  }
                },
                "required": [
                  "name",
                  "url"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/integrations/log-drains/{id}": {
      "delete": {
        "description": "Deletes the Integration log drain with the provided `id`. When using an OAuth2 Token, the log drain can be deleted only if the integration owns it.",
        "operationId": "deleteIntegrationLogDrain",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Deletes the Integration log drain with the provided `id`",
        "tags": [
          "logDrains"
        ],
        "responses": {
          "204": {
            "description": "The log drain was successfully deleted"
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The log drain was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the log drain to be deleted",
            "in": "path",
            "required": true,
            "schema": {
              "description": "ID of the log drain to be deleted",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/projects/{projectId}/deployments/{deploymentId}/runtime-logs": {
      "get": {
        "description": "Returns a stream of logs for a given deployment.",
        "operationId": "getRuntimeLogs",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get logs for a deployment",
        "tags": [
          "logs"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/stream+json": {
                "schema": {
                  "properties": {
                    "level": {
                      "type": "string",
                      "enum": [
                        "error",
                        "warning",
                        "info"
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "rowId": {
                      "type": "string"
                    },
                    "source": {
                      "type": "string",
                      "enum": [
                        "delimiter",
                        "edge-function",
                        "edge-middleware",
                        "serverless",
                        "request"
                      ]
                    },
                    "timestampInMs": {
                      "type": "number"
                    },
                    "domain": {
                      "type": "string"
                    },
                    "messageTruncated": {
                      "type": "boolean"
                    },
                    "requestMethod": {
                      "type": "string"
                    },
                    "requestPath": {
                      "type": "string"
                    },
                    "responseStatusCode": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "level",
                    "message",
                    "rowId",
                    "source",
                    "timestampInMs",
                    "domain",
                    "messageTruncated",
                    "requestMethod",
                    "requestPath",
                    "responseStatusCode"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/installations/{integrationConfigurationId}/resources/{resourceId}/experimentation/items": {
      "post": {
        "description": "Create one or multiple experimentation items",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create one or multiple experimentation items",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "204": {
            "description": "The items were created"
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "slug",
                        "origin"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "maxLength": 1024
                        },
                        "slug": {
                          "type": "string",
                          "maxLength": 1024
                        },
                        "origin": {
                          "type": "string",
                          "maxLength": 2048
                        },
                        "category": {
                          "type": "string",
                          "enum": [
                            "experiment",
                            "flag"
                          ]
                        },
                        "name": {
                          "type": "string",
                          "maxLength": 1024
                        },
                        "description": {
                          "type": "string",
                          "maxLength": 1024
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "createInstallationIntegrationConfiguration"
      }
    },
    "/v1/installations/{integrationConfigurationId}/resources/{resourceId}/experimentation/items/{itemId}": {
      "patch": {
        "description": "Patch an existing experimentation item",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Patch an existing experimentation item",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "204": {
            "description": "The item was updated"
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "slug",
                  "origin"
                ],
                "properties": {
                  "slug": {
                    "type": "string",
                    "maxLength": 1024
                  },
                  "origin": {
                    "type": "string",
                    "maxLength": 2048
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 1024
                  },
                  "category": {
                    "type": "string",
                    "enum": [
                      "experiment",
                      "flag"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 1024
                  },
                  "isArchived": {
                    "type": "boolean"
                  },
                  "createdAt": {
                    "type": "number"
                  },
                  "updatedAt": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "updateInstallationIntegrationConfiguration"
      },
      "delete": {
        "description": "Delete an existing experimentation item",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete an existing experimentation item",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "204": {
            "description": "The item was deleted"
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-speakeasy-name-override": "deleteInstallationIntegrationConfiguration"
      }
    },
    "/v1/installations/{integrationConfigurationId}/resources/{resourceId}/experimentation/edge-config": {
      "head": {
        "description": "When the user enabled Edge Config syncing, then this endpoint can be used by the partner to fetch the contents of the Edge Config.",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get the data of a user-provided Edge Config",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "200": {
            "description": "The Edge Config data",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "additionalProperties": {
                        "$ref": "#/components/schemas/EdgeConfigItemValue"
                      },
                      "type": "object"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "digest": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "items",
                    "updatedAt",
                    "digest"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "304": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-speakeasy-name-override": "createInstallationIntegrationEdgeConfig",
        "x-speakeasy-test": false
      },
      "put": {
        "description": "When the user enabled Edge Config syncing, then this endpoint can be used by the partner to push their configuration data into the relevant Edge Config.",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Push data into a user-provided Edge Config",
        "tags": [
          "marketplace"
        ],
        "responses": {
          "200": {
            "description": "The Edge Config was updated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "additionalProperties": {
                        "$ref": "#/components/schemas/EdgeConfigItemValue"
                      },
                      "type": "object"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "digest": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "items",
                    "updatedAt",
                    "digest"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": ""
          },
          "412": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "integrationConfigurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "type": "object",
                    "additionalProperties": {}
                  }
                }
              }
            }
          }
        },
        "x-speakeasy-name-override": "updateInstallationIntegrationEdgeConfig"
      }
    },
    "/v1/projects/{idOrName}/members": {
      "get": {
        "description": "Lists all members of a project.",
        "operationId": "getProjectMembers",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List project members",
        "tags": [
          "projectMembers"
        ],
        "responses": {
          "200": {
            "description": "Paginated list of members for the project.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object"
                    },
                    {
                      "properties": {
                        "members": {
                          "items": {
                            "properties": {
                              "avatar": {
                                "type": "string",
                                "description": "ID of the file for the Avatar of this member.",
                                "example": "123a6c5209bc3778245d011443644c8d27dc2c50"
                              },
                              "email": {
                                "type": "string",
                                "description": "The email of this member.",
                                "example": "jane.doe@example.com"
                              },
                              "role": {
                                "type": "string",
                                "enum": [
                                  "ADMIN",
                                  "PROJECT_DEVELOPER",
                                  "PROJECT_VIEWER"
                                ],
                                "description": "Role of this user in the project.",
                                "example": "ADMIN"
                              },
                              "computedProjectRole": {
                                "type": "string",
                                "enum": [
                                  "ADMIN",
                                  "PROJECT_DEVELOPER",
                                  "PROJECT_VIEWER"
                                ],
                                "description": "Role of this user in the project.",
                                "example": "ADMIN"
                              },
                              "uid": {
                                "type": "string",
                                "description": "The ID of this user.",
                                "example": "zTuNVUXEAvvnNN3IaqinkyMw"
                              },
                              "username": {
                                "type": "string",
                                "description": "The unique username of this user.",
                                "example": "jane-doe"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of this user.",
                                "example": "Jane Doe"
                              },
                              "createdAt": {
                                "type": "number",
                                "description": "Timestamp in milliseconds when this member was added.",
                                "example": 1588720733602
                              },
                              "teamRole": {
                                "type": "string",
                                "enum": [
                                  "OWNER",
                                  "MEMBER",
                                  "DEVELOPER",
                                  "SECURITY",
                                  "BILLING",
                                  "VIEWER",
                                  "VIEWER_FOR_PLUS",
                                  "CONTRIBUTOR"
                                ],
                                "description": "The role of this user in the team.",
                                "example": "CONTRIBUTOR"
                              }
                            },
                            "required": [
                              "email",
                              "role",
                              "computedProjectRole",
                              "uid",
                              "username",
                              "createdAt",
                              "teamRole"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "pagination": {
                          "properties": {
                            "hasNext": {
                              "type": "boolean"
                            },
                            "count": {
                              "type": "number",
                              "description": "Amount of items in the current page.",
                              "example": 20
                            },
                            "next": {
                              "nullable": true,
                              "type": "number",
                              "description": "Timestamp that must be used to request the next page.",
                              "example": 1540095775951
                            },
                            "prev": {
                              "nullable": true,
                              "type": "number",
                              "description": "Timestamp that must be used to request the previous page.",
                              "example": 1540095775951
                            }
                          },
                          "required": [
                            "hasNext",
                            "count",
                            "next",
                            "prev"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "members",
                        "pagination"
                      ],
                      "type": "object",
                      "description": "Paginated list of members for the project."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The ID or name of the Project.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID or name of the Project.",
              "example": "prj_pavWOn1iLObbXLRiwVvzmPrTWyTf"
            }
          },
          {
            "name": "limit",
            "description": "Limit how many project members should be returned",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Limit how many project members should be returned",
              "example": 20,
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "since",
            "description": "Timestamp in milliseconds to only include members added since then.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Timestamp in milliseconds to only include members added since then.",
              "example": 1540095775951,
              "type": "integer"
            }
          },
          {
            "name": "until",
            "description": "Timestamp in milliseconds to only include members added until then.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Timestamp in milliseconds to only include members added until then.",
              "example": 1540095775951,
              "type": "integer"
            }
          },
          {
            "name": "search",
            "description": "Search project members by their name, username, and email.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Search project members by their name, username, and email.",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "x-speakeasy-test": false
      },
      "post": {
        "description": "Adds a new member to the project.",
        "operationId": "addProjectMember",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Adds a new member to a project.",
        "tags": [
          "projectMembers"
        ],
        "responses": {
          "200": {
            "description": "Responds with the project ID on success.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object",
                  "description": "Responds with the project ID on success."
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The ID or name of the Project.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID or name of the Project.",
              "example": "prj_pavWOn1iLObbXLRiwVvzmPrTWyTf"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "role"
                ],
                "oneOf": [
                  {
                    "required": [
                      "uid"
                    ]
                  },
                  {
                    "required": [
                      "username"
                    ]
                  },
                  {
                    "required": [
                      "email"
                    ]
                  }
                ],
                "properties": {
                  "uid": {
                    "type": "string",
                    "maxLength": 256,
                    "example": "ndlgr43fadlPyCtREAqxxdyFK",
                    "description": "The ID of the team member that should be added to this project."
                  },
                  "username": {
                    "type": "string",
                    "maxLength": 256,
                    "example": "example",
                    "description": "The username of the team member that should be added to this project."
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "entity@example.com",
                    "description": "The email of the team member that should be added to this project."
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "PROJECT_DEVELOPER",
                      "PROJECT_VIEWER"
                    ],
                    "example": "ADMIN",
                    "description": "The project role of the member that will be added."
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/projects/{idOrName}/members/{uid}": {
      "delete": {
        "description": "Remove a member from a specific project",
        "operationId": "removeProjectMember",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Remove a Project Member",
        "tags": [
          "projectMembers"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The ID or name of the Project.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID or name of the Project.",
              "example": "prj_pavWOn1iLObbXLRiwVvzmPrTWyTf"
            }
          },
          {
            "name": "uid",
            "description": "The user ID of the member.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The user ID of the member.",
              "example": "ndlgr43fadlPyCtREAqxxdyFK"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v10/projects": {
      "get": {
        "description": "Allows to retrieve the list of projects of the authenticated user or team. The list will be paginated and the provided query parameters allow filtering the returned projects.",
        "operationId": "getProjects",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Retrieve a list of projects",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The paginated list of projects",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "projects": {
                      "items": {
                        "properties": {
                          "accountId": {
                            "type": "string"
                          },
                          "analytics": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "canceledAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "disabledAt": {
                                "type": "number"
                              },
                              "enabledAt": {
                                "type": "number"
                              },
                              "paidAt": {
                                "type": "number"
                              },
                              "sampleRatePercent": {
                                "nullable": true,
                                "type": "number"
                              },
                              "spendLimitInDollars": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "id",
                              "disabledAt",
                              "enabledAt"
                            ],
                            "type": "object"
                          },
                          "speedInsights": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "enabledAt": {
                                "type": "number"
                              },
                              "disabledAt": {
                                "type": "number"
                              },
                              "canceledAt": {
                                "type": "number"
                              },
                              "hasData": {
                                "type": "boolean"
                              },
                              "paidAt": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          "autoExposeSystemEnvs": {
                            "type": "boolean"
                          },
                          "autoAssignCustomDomains": {
                            "type": "boolean"
                          },
                          "autoAssignCustomDomainsUpdatedBy": {
                            "type": "string"
                          },
                          "buildCommand": {
                            "nullable": true,
                            "type": "string"
                          },
                          "commandForIgnoringBuildStep": {
                            "nullable": true,
                            "type": "string"
                          },
                          "connectConfigurations": {
                            "nullable": true,
                            "items": {
                              "properties": {
                                "envId": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "preview",
                                        "production"
                                      ]
                                    }
                                  ]
                                },
                                "connectConfigurationId": {
                                  "type": "string"
                                },
                                "dc": {
                                  "type": "string"
                                },
                                "passive": {
                                  "type": "boolean"
                                },
                                "buildsEnabled": {
                                  "type": "boolean"
                                },
                                "aws": {
                                  "properties": {
                                    "subnetIds": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "securityGroupId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "subnetIds",
                                    "securityGroupId"
                                  ],
                                  "type": "object"
                                },
                                "createdAt": {
                                  "type": "number"
                                },
                                "updatedAt": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "envId",
                                "connectConfigurationId",
                                "passive",
                                "buildsEnabled",
                                "createdAt",
                                "updatedAt"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "connectConfigurationId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "connectBuildsEnabled": {
                            "type": "boolean"
                          },
                          "passiveConnectConfigurationId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "customerSupportCodeVisibility": {
                            "type": "boolean"
                          },
                          "crons": {
                            "properties": {
                              "enabledAt": {
                                "type": "number",
                                "description": "The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs."
                              },
                              "disabledAt": {
                                "nullable": true,
                                "type": "number",
                                "description": "The time the feature was disabled for this project."
                              },
                              "updatedAt": {
                                "type": "number"
                              },
                              "deploymentId": {
                                "nullable": true,
                                "type": "string",
                                "description": "The ID of the Deployment from which the definitions originated."
                              },
                              "definitions": {
                                "items": {
                                  "properties": {
                                    "host": {
                                      "type": "string",
                                      "description": "The hostname that should be used.",
                                      "example": "vercel.com"
                                    },
                                    "path": {
                                      "type": "string",
                                      "description": "The path that should be called for the cronjob.",
                                      "example": "/api/crons/sync-something?hello=world"
                                    },
                                    "schedule": {
                                      "type": "string",
                                      "description": "The cron expression.",
                                      "example": "0 0 * * *"
                                    }
                                  },
                                  "required": [
                                    "host",
                                    "path",
                                    "schedule"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "enabledAt",
                              "disabledAt",
                              "updatedAt",
                              "deploymentId",
                              "definitions"
                            ],
                            "type": "object"
                          },
                          "dataCache": {
                            "properties": {
                              "userDisabled": {
                                "type": "boolean"
                              },
                              "storageSizeBytes": {
                                "nullable": true,
                                "type": "number"
                              },
                              "unlimited": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "userDisabled"
                            ],
                            "type": "object"
                          },
                          "deploymentExpiration": {
                            "nullable": true,
                            "properties": {
                              "expirationDays": {
                                "type": "number",
                                "description": "Number of days to keep non-production deployments (mostly preview deployments) before soft deletion."
                              },
                              "expirationDaysProduction": {
                                "type": "number",
                                "description": "Number of days to keep production deployments before soft deletion."
                              },
                              "expirationDaysCanceled": {
                                "type": "number",
                                "description": "Number of days to keep canceled deployments before soft deletion."
                              },
                              "expirationDaysErrored": {
                                "type": "number",
                                "description": "Number of days to keep errored deployments before soft deletion."
                              },
                              "deploymentsToKeep": {
                                "type": "number",
                                "description": "Minimum number of production deployments to keep for this project, even if they are over the production expiration limit."
                              }
                            },
                            "type": "object",
                            "description": "Retention policies for deployments. These are enforced at the project level, but we also maintain an instance of this at the team level as a default policy that gets applied to new projects."
                          },
                          "devCommand": {
                            "nullable": true,
                            "type": "string"
                          },
                          "directoryListing": {
                            "type": "boolean"
                          },
                          "installCommand": {
                            "nullable": true,
                            "type": "string"
                          },
                          "env": {
                            "items": {
                              "properties": {
                                "target": {
                                  "oneOf": [
                                    {
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "production",
                                          "preview",
                                          "development",
                                          "preview",
                                          "development"
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    {
                                      "type": "string",
                                      "enum": [
                                        "production",
                                        "preview",
                                        "development",
                                        "preview",
                                        "development"
                                      ]
                                    }
                                  ]
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "system",
                                    "encrypted",
                                    "plain",
                                    "sensitive",
                                    "secret"
                                  ]
                                },
                                "sunsetSecretId": {
                                  "type": "string",
                                  "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                                },
                                "decrypted": {
                                  "type": "boolean"
                                },
                                "value": {
                                  "type": "string"
                                },
                                "vsmValue": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "key": {
                                  "type": "string"
                                },
                                "configurationId": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "createdAt": {
                                  "type": "number"
                                },
                                "updatedAt": {
                                  "type": "number"
                                },
                                "createdBy": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "updatedBy": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "gitBranch": {
                                  "type": "string"
                                },
                                "edgeConfigId": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "edgeConfigTokenId": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "contentHint": {
                                  "nullable": true,
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "redis-url"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "redis-rest-api-url"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "redis-rest-api-token"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "redis-rest-api-read-only-token"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "blob-read-write-token"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "postgres-url"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "postgres-url-non-pooling"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "postgres-prisma-url"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "postgres-user"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "postgres-host"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "postgres-password"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "postgres-database"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "postgres-url-no-ssl"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "integration-store-secret"
                                          ]
                                        },
                                        "storeId": {
                                          "type": "string"
                                        },
                                        "integrationId": {
                                          "type": "string"
                                        },
                                        "integrationProductId": {
                                          "type": "string"
                                        },
                                        "integrationConfigurationId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "storeId",
                                        "integrationId",
                                        "integrationProductId",
                                        "integrationConfigurationId"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "flags-connection-string"
                                          ]
                                        },
                                        "projectId": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "projectId"
                                      ],
                                      "type": "object"
                                    }
                                  ]
                                },
                                "internalContentHint": {
                                  "nullable": true,
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "flags-secret"
                                      ]
                                    },
                                    "encryptedValue": {
                                      "type": "string",
                                      "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "encryptedValue"
                                  ],
                                  "type": "object",
                                  "description": "Similar to `contentHints`, but should not be exposed to the user."
                                },
                                "comment": {
                                  "type": "string"
                                },
                                "customEnvironmentIds": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "type",
                                "value",
                                "key"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "customEnvironments": {
                            "items": {
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "Unique identifier for the custom environment (format: env_*)"
                                },
                                "slug": {
                                  "type": "string",
                                  "description": "URL-friendly name of the environment"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "preview",
                                    "production",
                                    "development"
                                  ],
                                  "description": "The type of environment (production, preview, or development)"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Optional description of the environment's purpose"
                                },
                                "branchMatcher": {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "endsWith",
                                        "startsWith",
                                        "equals"
                                      ],
                                      "description": "The type of matching to perform"
                                    },
                                    "pattern": {
                                      "type": "string",
                                      "description": "The pattern to match against branch names"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "pattern"
                                  ],
                                  "type": "object",
                                  "description": "Configuration for matching git branches to this environment"
                                },
                                "domains": {
                                  "items": {
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "apexName": {
                                        "type": "string"
                                      },
                                      "projectId": {
                                        "type": "string"
                                      },
                                      "redirect": {
                                        "nullable": true,
                                        "type": "string"
                                      },
                                      "redirectStatusCode": {
                                        "nullable": true,
                                        "type": "number",
                                        "enum": [
                                          307,
                                          301,
                                          302,
                                          308
                                        ]
                                      },
                                      "gitBranch": {
                                        "nullable": true,
                                        "type": "string"
                                      },
                                      "customEnvironmentId": {
                                        "nullable": true,
                                        "type": "string"
                                      },
                                      "updatedAt": {
                                        "type": "number"
                                      },
                                      "createdAt": {
                                        "type": "number"
                                      },
                                      "verified": {
                                        "type": "boolean",
                                        "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                                      },
                                      "verification": {
                                        "items": {
                                          "properties": {
                                            "type": {
                                              "type": "string"
                                            },
                                            "domain": {
                                              "type": "string"
                                            },
                                            "value": {
                                              "type": "string"
                                            },
                                            "reason": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "domain",
                                            "value",
                                            "reason"
                                          ],
                                          "type": "object",
                                          "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                        },
                                        "type": "array",
                                        "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "apexName",
                                      "projectId",
                                      "verified"
                                    ],
                                    "type": "object",
                                    "description": "List of domains associated with this environment"
                                  },
                                  "type": "array",
                                  "description": "List of domains associated with this environment"
                                },
                                "currentDeploymentAliases": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array",
                                  "description": "List of aliases for the current deployment"
                                },
                                "createdAt": {
                                  "type": "number",
                                  "description": "Timestamp when the environment was created"
                                },
                                "updatedAt": {
                                  "type": "number",
                                  "description": "Timestamp when the environment was last updated"
                                }
                              },
                              "required": [
                                "id",
                                "slug",
                                "type",
                                "createdAt",
                                "updatedAt"
                              ],
                              "type": "object",
                              "description": "Internal representation of a custom environment with all required properties"
                            },
                            "type": "array"
                          },
                          "framework": {
                            "nullable": true,
                            "type": "string",
                            "enum": [
                              "blitzjs",
                              "nextjs",
                              "gatsby",
                              "remix",
                              "react-router",
                              "astro",
                              "hexo",
                              "eleventy",
                              "docusaurus-2",
                              "docusaurus",
                              "preact",
                              "solidstart-1",
                              "solidstart",
                              "dojo",
                              "ember",
                              "vue",
                              "scully",
                              "ionic-angular",
                              "angular",
                              "polymer",
                              "svelte",
                              "sveltekit",
                              "sveltekit-1",
                              "ionic-react",
                              "create-react-app",
                              "gridsome",
                              "umijs",
                              "sapper",
                              "saber",
                              "stencil",
                              "nuxtjs",
                              "redwoodjs",
                              "hugo",
                              "jekyll",
                              "brunch",
                              "middleman",
                              "zola",
                              "hydrogen",
                              "vite",
                              "vitepress",
                              "vuepress",
                              "parcel",
                              "fastapi",
                              "fasthtml",
                              "sanity-v3",
                              "sanity",
                              "storybook",
                              "nitro",
                              "hono",
                              "express",
                              "xmcp"
                            ]
                          },
                          "gitForkProtection": {
                            "type": "boolean"
                          },
                          "gitLFS": {
                            "type": "boolean"
                          },
                          "id": {
                            "type": "string"
                          },
                          "ipBuckets": {
                            "items": {
                              "properties": {
                                "bucket": {
                                  "type": "string"
                                },
                                "supportUntil": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "bucket"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "latestDeployments": {
                            "items": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "alias": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "aliasAssigned": {
                                  "nullable": true,
                                  "oneOf": [
                                    {
                                      "type": "number"
                                    },
                                    {
                                      "type": "boolean"
                                    }
                                  ]
                                },
                                "aliasError": {
                                  "nullable": true,
                                  "properties": {
                                    "code": {
                                      "type": "string"
                                    },
                                    "message": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "code",
                                    "message"
                                  ],
                                  "type": "object"
                                },
                                "aliasFinal": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "automaticAliases": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "branchMatcher": {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "endsWith",
                                        "startsWith",
                                        "equals"
                                      ],
                                      "description": "The type of matching to perform"
                                    },
                                    "pattern": {
                                      "type": "string",
                                      "description": "The pattern to match against branch names"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "pattern"
                                  ],
                                  "type": "object"
                                },
                                "buildingAt": {
                                  "type": "number"
                                },
                                "builds": {
                                  "items": {
                                    "properties": {
                                      "use": {
                                        "type": "string"
                                      },
                                      "src": {
                                        "type": "string"
                                      },
                                      "dest": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "use"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "checksConclusion": {
                                  "type": "string",
                                  "enum": [
                                    "succeeded",
                                    "failed",
                                    "skipped",
                                    "canceled"
                                  ]
                                },
                                "checksState": {
                                  "type": "string",
                                  "enum": [
                                    "registered",
                                    "running",
                                    "completed"
                                  ]
                                },
                                "connectBuildsEnabled": {
                                  "type": "boolean"
                                },
                                "connectConfigurationId": {
                                  "type": "string"
                                },
                                "createdAt": {
                                  "type": "number"
                                },
                                "createdIn": {
                                  "type": "string"
                                },
                                "creator": {
                                  "nullable": true,
                                  "properties": {
                                    "email": {
                                      "type": "string"
                                    },
                                    "githubLogin": {
                                      "type": "string"
                                    },
                                    "gitlabLogin": {
                                      "type": "string"
                                    },
                                    "uid": {
                                      "type": "string"
                                    },
                                    "username": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "email",
                                    "uid",
                                    "username"
                                  ],
                                  "type": "object"
                                },
                                "deletedAt": {
                                  "type": "number"
                                },
                                "deploymentHostname": {
                                  "type": "string"
                                },
                                "forced": {
                                  "type": "boolean"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "meta": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "type": "object"
                                },
                                "monorepoManager": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "oidcTokenClaims": {
                                  "properties": {
                                    "iss": {
                                      "type": "string"
                                    },
                                    "sub": {
                                      "type": "string"
                                    },
                                    "scope": {
                                      "type": "string"
                                    },
                                    "aud": {
                                      "type": "string"
                                    },
                                    "owner": {
                                      "type": "string"
                                    },
                                    "owner_id": {
                                      "type": "string"
                                    },
                                    "project": {
                                      "type": "string"
                                    },
                                    "project_id": {
                                      "type": "string"
                                    },
                                    "environment": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "iss",
                                    "sub",
                                    "scope",
                                    "aud",
                                    "owner",
                                    "owner_id",
                                    "project",
                                    "project_id",
                                    "environment"
                                  ],
                                  "type": "object"
                                },
                                "plan": {
                                  "type": "string",
                                  "enum": [
                                    "pro",
                                    "enterprise",
                                    "hobby"
                                  ]
                                },
                                "previewCommentsEnabled": {
                                  "type": "boolean",
                                  "description": "Whether or not preview comments are enabled for the deployment",
                                  "example": false
                                },
                                "private": {
                                  "type": "boolean"
                                },
                                "readyAt": {
                                  "type": "number"
                                },
                                "readyState": {
                                  "type": "string",
                                  "enum": [
                                    "BUILDING",
                                    "ERROR",
                                    "INITIALIZING",
                                    "QUEUED",
                                    "READY",
                                    "CANCELED"
                                  ]
                                },
                                "readySubstate": {
                                  "type": "string",
                                  "enum": [
                                    "STAGED",
                                    "ROLLING",
                                    "PROMOTED"
                                  ]
                                },
                                "requestedAt": {
                                  "type": "number"
                                },
                                "target": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "teamId": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "LAMBDAS"
                                  ]
                                },
                                "url": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                },
                                "withCache": {
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "id",
                                "createdAt",
                                "createdIn",
                                "creator",
                                "deploymentHostname",
                                "name",
                                "plan",
                                "private",
                                "readyState",
                                "type",
                                "url",
                                "userId"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "link": {
                            "oneOf": [
                              {
                                "properties": {
                                  "org": {
                                    "type": "string"
                                  },
                                  "repoOwnerId": {
                                    "type": "number",
                                    "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                                  },
                                  "repo": {
                                    "type": "string"
                                  },
                                  "repoId": {
                                    "type": "number"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "github"
                                    ]
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "deployHooks": {
                                    "items": {
                                      "properties": {
                                        "createdAt": {
                                          "type": "number"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "ref": {
                                          "type": "string"
                                        },
                                        "url": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "ref",
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "gitCredentialId": {
                                    "type": "string"
                                  },
                                  "updatedAt": {
                                    "type": "number"
                                  },
                                  "sourceless": {
                                    "type": "boolean"
                                  },
                                  "productionBranch": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "org",
                                  "type",
                                  "gitCredentialId",
                                  "productionBranch",
                                  "deployHooks"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "github-limited"
                                    ]
                                  },
                                  "repo": {
                                    "type": "string"
                                  },
                                  "repoId": {
                                    "type": "number"
                                  },
                                  "updatedAt": {
                                    "type": "number"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "org": {
                                    "type": "string"
                                  },
                                  "repoOwnerId": {
                                    "type": "number",
                                    "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                                  },
                                  "deployHooks": {
                                    "items": {
                                      "properties": {
                                        "createdAt": {
                                          "type": "number"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "ref": {
                                          "type": "string"
                                        },
                                        "url": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "ref",
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "gitCredentialId": {
                                    "type": "string"
                                  },
                                  "sourceless": {
                                    "type": "boolean"
                                  },
                                  "productionBranch": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "org",
                                  "gitCredentialId",
                                  "productionBranch",
                                  "deployHooks"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "org": {
                                    "type": "string"
                                  },
                                  "repoOwnerId": {
                                    "type": "number",
                                    "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                                  },
                                  "repo": {
                                    "type": "string"
                                  },
                                  "repoId": {
                                    "type": "number"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "github-custom-host"
                                    ]
                                  },
                                  "host": {
                                    "type": "string"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "deployHooks": {
                                    "items": {
                                      "properties": {
                                        "createdAt": {
                                          "type": "number"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "ref": {
                                          "type": "string"
                                        },
                                        "url": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "ref",
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "gitCredentialId": {
                                    "type": "string"
                                  },
                                  "updatedAt": {
                                    "type": "number"
                                  },
                                  "sourceless": {
                                    "type": "boolean"
                                  },
                                  "productionBranch": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "org",
                                  "type",
                                  "host",
                                  "gitCredentialId",
                                  "productionBranch",
                                  "deployHooks"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "projectId": {
                                    "type": "string"
                                  },
                                  "projectName": {
                                    "type": "string"
                                  },
                                  "projectNameWithNamespace": {
                                    "type": "string"
                                  },
                                  "projectNamespace": {
                                    "type": "string"
                                  },
                                  "projectOwnerId": {
                                    "type": "number",
                                    "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels)."
                                  },
                                  "projectUrl": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "gitlab"
                                    ]
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "deployHooks": {
                                    "items": {
                                      "properties": {
                                        "createdAt": {
                                          "type": "number"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "ref": {
                                          "type": "string"
                                        },
                                        "url": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "ref",
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "gitCredentialId": {
                                    "type": "string"
                                  },
                                  "updatedAt": {
                                    "type": "number"
                                  },
                                  "sourceless": {
                                    "type": "boolean"
                                  },
                                  "productionBranch": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "projectId",
                                  "projectName",
                                  "projectNameWithNamespace",
                                  "projectNamespace",
                                  "projectUrl",
                                  "type",
                                  "gitCredentialId",
                                  "productionBranch",
                                  "deployHooks"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "owner": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "bitbucket"
                                    ]
                                  },
                                  "uuid": {
                                    "type": "string"
                                  },
                                  "workspaceUuid": {
                                    "type": "string"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "deployHooks": {
                                    "items": {
                                      "properties": {
                                        "createdAt": {
                                          "type": "number"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "ref": {
                                          "type": "string"
                                        },
                                        "url": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "ref",
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "gitCredentialId": {
                                    "type": "string"
                                  },
                                  "updatedAt": {
                                    "type": "number"
                                  },
                                  "sourceless": {
                                    "type": "boolean"
                                  },
                                  "productionBranch": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "name",
                                  "slug",
                                  "owner",
                                  "type",
                                  "uuid",
                                  "workspaceUuid",
                                  "gitCredentialId",
                                  "productionBranch",
                                  "deployHooks"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "microfrontends": {
                            "oneOf": [
                              {
                                "properties": {
                                  "updatedAt": {
                                    "type": "number",
                                    "description": "Timestamp when the microfrontends settings were last updated."
                                  },
                                  "groupIds": {
                                    "items": {
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ]
                                    },
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array",
                                    "description": "The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together."
                                  },
                                  "enabled": {
                                    "type": "boolean",
                                    "description": "Whether microfrontends are enabled for this project."
                                  },
                                  "isDefaultApp": {
                                    "type": "boolean",
                                    "description": "Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends."
                                  },
                                  "defaultRoute": {
                                    "type": "string",
                                    "description": "A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`"
                                  },
                                  "routeObservabilityToThisProject": {
                                    "type": "boolean",
                                    "description": "Whether observability data should be routed to this microfrontend project or a root project."
                                  }
                                },
                                "required": [
                                  "updatedAt",
                                  "groupIds",
                                  "enabled"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "updatedAt": {
                                    "type": "number"
                                  },
                                  "groupIds": {
                                    "items": {
                                      "oneOf": []
                                    },
                                    "maxItems": 0,
                                    "minItems": 0,
                                    "type": "array"
                                  },
                                  "enabled": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "updatedAt",
                                  "groupIds",
                                  "enabled"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "name": {
                            "type": "string"
                          },
                          "nodeVersion": {
                            "type": "string",
                            "enum": [
                              "22.x",
                              "20.x",
                              "18.x",
                              "16.x",
                              "14.x",
                              "12.x",
                              "10.x",
                              "8.10.x"
                            ]
                          },
                          "optionsAllowlist": {
                            "nullable": true,
                            "properties": {
                              "paths": {
                                "items": {
                                  "properties": {
                                    "value": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "value"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "paths"
                            ],
                            "type": "object"
                          },
                          "outputDirectory": {
                            "nullable": true,
                            "type": "string"
                          },
                          "passwordProtection": {
                            "nullable": true,
                            "type": "object"
                          },
                          "productionDeploymentsFastLane": {
                            "type": "boolean"
                          },
                          "publicSource": {
                            "nullable": true,
                            "type": "boolean"
                          },
                          "resourceConfig": {
                            "properties": {
                              "elasticConcurrencyEnabled": {
                                "type": "boolean"
                              },
                              "fluid": {
                                "type": "boolean"
                              },
                              "functionDefaultRegions": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "functionDefaultTimeout": {
                                "type": "number"
                              },
                              "functionDefaultMemoryType": {
                                "type": "string",
                                "enum": [
                                  "standard_legacy",
                                  "standard",
                                  "performance"
                                ]
                              },
                              "functionZeroConfigFailover": {
                                "type": "boolean"
                              },
                              "buildMachineType": {
                                "type": "string",
                                "enum": [
                                  "enhanced",
                                  "turbo"
                                ]
                              },
                              "isNSNBDisabled": {
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "required": [
                              "functionDefaultRegions"
                            ]
                          },
                          "rollbackDescription": {
                            "properties": {
                              "userId": {
                                "type": "string",
                                "description": "The user who rolled back the project."
                              },
                              "username": {
                                "type": "string",
                                "description": "The username of the user who rolled back the project."
                              },
                              "description": {
                                "type": "string",
                                "description": "User-supplied explanation of why they rolled back the project. Limited to 250 characters."
                              },
                              "createdAt": {
                                "type": "number",
                                "description": "Timestamp of when the rollback was requested."
                              }
                            },
                            "required": [
                              "userId",
                              "username",
                              "description",
                              "createdAt"
                            ],
                            "type": "object",
                            "description": "Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback."
                          },
                          "rollingRelease": {
                            "nullable": true,
                            "properties": {
                              "target": {
                                "type": "string",
                                "description": "The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.",
                                "example": "production"
                              },
                              "stages": {
                                "nullable": true,
                                "items": {
                                  "properties": {
                                    "targetPercentage": {
                                      "type": "number",
                                      "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                                      "example": 25
                                    },
                                    "requireApproval": {
                                      "type": "boolean",
                                      "description": "Whether or not this stage requires manual approval to proceed",
                                      "example": false
                                    },
                                    "duration": {
                                      "type": "number",
                                      "description": "Duration in minutes for automatic advancement to the next stage",
                                      "example": 600
                                    }
                                  },
                                  "required": [
                                    "targetPercentage"
                                  ],
                                  "type": "object",
                                  "description": "An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100."
                                },
                                "type": "array",
                                "description": "An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100."
                              },
                              "canaryResponseHeader": {
                                "type": "boolean",
                                "description": "Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.",
                                "example": false
                              }
                            },
                            "required": [
                              "target"
                            ],
                            "type": "object",
                            "description": "Project-level rolling release configuration that defines how deployments should be gradually rolled out"
                          },
                          "defaultResourceConfig": {
                            "properties": {
                              "elasticConcurrencyEnabled": {
                                "type": "boolean"
                              },
                              "fluid": {
                                "type": "boolean"
                              },
                              "functionDefaultRegions": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "functionDefaultTimeout": {
                                "type": "number"
                              },
                              "functionDefaultMemoryType": {
                                "type": "string",
                                "enum": [
                                  "standard_legacy",
                                  "standard",
                                  "performance"
                                ]
                              },
                              "functionZeroConfigFailover": {
                                "type": "boolean"
                              },
                              "buildMachineType": {
                                "type": "string",
                                "enum": [
                                  "enhanced",
                                  "turbo"
                                ]
                              },
                              "isNSNBDisabled": {
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "required": [
                              "functionDefaultRegions"
                            ]
                          },
                          "rootDirectory": {
                            "nullable": true,
                            "type": "string"
                          },
                          "serverlessFunctionZeroConfigFailover": {
                            "type": "boolean"
                          },
                          "skewProtectionBoundaryAt": {
                            "type": "number"
                          },
                          "skewProtectionMaxAge": {
                            "type": "number"
                          },
                          "skipGitConnectDuringLink": {
                            "type": "boolean"
                          },
                          "sourceFilesOutsideRootDirectory": {
                            "type": "boolean"
                          },
                          "enableAffectedProjectsDeployments": {
                            "type": "boolean"
                          },
                          "ssoProtection": {
                            "nullable": true,
                            "properties": {
                              "deploymentType": {
                                "type": "string",
                                "enum": [
                                  "preview",
                                  "all",
                                  "prod_deployment_urls_and_all_previews",
                                  "all_except_custom_domains"
                                ]
                              }
                            },
                            "required": [
                              "deploymentType"
                            ],
                            "type": "object"
                          },
                          "targets": {
                            "additionalProperties": {
                              "nullable": true,
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "alias": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "aliasAssigned": {
                                  "nullable": true,
                                  "oneOf": [
                                    {
                                      "type": "number"
                                    },
                                    {
                                      "type": "boolean"
                                    }
                                  ]
                                },
                                "aliasError": {
                                  "nullable": true,
                                  "properties": {
                                    "code": {
                                      "type": "string"
                                    },
                                    "message": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "code",
                                    "message"
                                  ],
                                  "type": "object"
                                },
                                "aliasFinal": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "automaticAliases": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "branchMatcher": {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "endsWith",
                                        "startsWith",
                                        "equals"
                                      ],
                                      "description": "The type of matching to perform"
                                    },
                                    "pattern": {
                                      "type": "string",
                                      "description": "The pattern to match against branch names"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "pattern"
                                  ],
                                  "type": "object"
                                },
                                "buildingAt": {
                                  "type": "number"
                                },
                                "builds": {
                                  "items": {
                                    "properties": {
                                      "use": {
                                        "type": "string"
                                      },
                                      "src": {
                                        "type": "string"
                                      },
                                      "dest": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "use"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "checksConclusion": {
                                  "type": "string",
                                  "enum": [
                                    "succeeded",
                                    "failed",
                                    "skipped",
                                    "canceled"
                                  ]
                                },
                                "checksState": {
                                  "type": "string",
                                  "enum": [
                                    "registered",
                                    "running",
                                    "completed"
                                  ]
                                },
                                "connectBuildsEnabled": {
                                  "type": "boolean"
                                },
                                "connectConfigurationId": {
                                  "type": "string"
                                },
                                "createdAt": {
                                  "type": "number"
                                },
                                "createdIn": {
                                  "type": "string"
                                },
                                "creator": {
                                  "nullable": true,
                                  "properties": {
                                    "email": {
                                      "type": "string"
                                    },
                                    "githubLogin": {
                                      "type": "string"
                                    },
                                    "gitlabLogin": {
                                      "type": "string"
                                    },
                                    "uid": {
                                      "type": "string"
                                    },
                                    "username": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "email",
                                    "uid",
                                    "username"
                                  ],
                                  "type": "object"
                                },
                                "deletedAt": {
                                  "type": "number"
                                },
                                "deploymentHostname": {
                                  "type": "string"
                                },
                                "forced": {
                                  "type": "boolean"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "meta": {
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "type": "object"
                                },
                                "monorepoManager": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "oidcTokenClaims": {
                                  "properties": {
                                    "iss": {
                                      "type": "string"
                                    },
                                    "sub": {
                                      "type": "string"
                                    },
                                    "scope": {
                                      "type": "string"
                                    },
                                    "aud": {
                                      "type": "string"
                                    },
                                    "owner": {
                                      "type": "string"
                                    },
                                    "owner_id": {
                                      "type": "string"
                                    },
                                    "project": {
                                      "type": "string"
                                    },
                                    "project_id": {
                                      "type": "string"
                                    },
                                    "environment": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "iss",
                                    "sub",
                                    "scope",
                                    "aud",
                                    "owner",
                                    "owner_id",
                                    "project",
                                    "project_id",
                                    "environment"
                                  ],
                                  "type": "object"
                                },
                                "plan": {
                                  "type": "string",
                                  "enum": [
                                    "pro",
                                    "enterprise",
                                    "hobby"
                                  ]
                                },
                                "previewCommentsEnabled": {
                                  "type": "boolean",
                                  "description": "Whether or not preview comments are enabled for the deployment",
                                  "example": false
                                },
                                "private": {
                                  "type": "boolean"
                                },
                                "readyAt": {
                                  "type": "number"
                                },
                                "readyState": {
                                  "type": "string",
                                  "enum": [
                                    "BUILDING",
                                    "ERROR",
                                    "INITIALIZING",
                                    "QUEUED",
                                    "READY",
                                    "CANCELED"
                                  ]
                                },
                                "readySubstate": {
                                  "type": "string",
                                  "enum": [
                                    "STAGED",
                                    "ROLLING",
                                    "PROMOTED"
                                  ]
                                },
                                "requestedAt": {
                                  "type": "number"
                                },
                                "target": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "teamId": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "LAMBDAS"
                                  ]
                                },
                                "url": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                },
                                "withCache": {
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "id",
                                "createdAt",
                                "createdIn",
                                "creator",
                                "deploymentHostname",
                                "name",
                                "plan",
                                "private",
                                "readyState",
                                "type",
                                "url",
                                "userId"
                              ],
                              "type": "object"
                            },
                            "type": "object"
                          },
                          "transferCompletedAt": {
                            "type": "number"
                          },
                          "transferStartedAt": {
                            "type": "number"
                          },
                          "transferToAccountId": {
                            "type": "string"
                          },
                          "transferredFromAccountId": {
                            "type": "string"
                          },
                          "updatedAt": {
                            "type": "number"
                          },
                          "live": {
                            "type": "boolean"
                          },
                          "enablePreviewFeedback": {
                            "nullable": true,
                            "type": "boolean"
                          },
                          "enableProductionFeedback": {
                            "nullable": true,
                            "type": "boolean"
                          },
                          "permissions": {
                            "properties": {
                              "aliasProject": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "aliasProtectionBypass": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "buildMachine": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "productionAliasProtectionBypass": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "connectConfigurationLink": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "dataCacheNamespace": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "deployment": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "deploymentBuildLogs": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "deploymentCheck": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "deploymentCheckPreview": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "deploymentCheckReRunFromProductionBranch": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "deploymentProductionGit": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "deploymentV0": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "deploymentPreview": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "deploymentPrivate": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "deploymentPromote": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "deploymentRollback": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "edgeCacheNamespace": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "environments": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "logs": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "logsPreset": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "passwordProtection": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "optionsAllowlist": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "job": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "observabilityData": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "onDemandBuild": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "onDemandConcurrency": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "project": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectFromV0": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectAccessGroup": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectAnalyticsSampling": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectCheck": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectCheckRun": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectDeploymentHook": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectDomain": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectDomainMove": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectDomainCheckConfig": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectEnvVars": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectEnvVarsProduction": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectEnvVarsUnownedByIntegration": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectFlags": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectId": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectIntegrationConfiguration": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectLink": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectMember": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectMonitoring": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectPermissions": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectProductionBranch": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectTransfer": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectTransferOut": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectProtectionBypass": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectUsage": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectAnalyticsUsage": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectSupportCase": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectSupportCaseComment": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectDeploymentExpiration": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectRollingRelease": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectTier": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectOIDCToken": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "seawallConfig": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "skewProtection": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "analytics": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "trustedIps": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "v0Chat": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "webAnalytics": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "sharedEnvVarConnection": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "sonar": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "oauth2Connection": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "user": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "userConnection": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "userSudo": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "webAuthn": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "accessGroup": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "aliasGlobal": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "analyticsSampling": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "analyticsUsage": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "auditLog": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "billingAddress": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "billingInformation": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "billingInvoice": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "billingInvoiceEmailRecipient": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "billingInvoiceLanguage": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "billingPlan": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "billingPurchaseOrder": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "billingRefund": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "billingTaxId": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "blob": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "budget": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "cacheArtifact": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "cacheArtifactUsageEvent": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "codeChecks": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "concurrentBuilds": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "connect": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "connectConfiguration": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "defaultDeploymentProtection": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "domain": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "domainAcceptDelegation": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "domainAuthCodes": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "domainCertificate": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "domainCheckConfig": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "domainMove": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "domainPurchase": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "domainRecord": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "domainTransferIn": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "event": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "ownEvent": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "sensitiveEnvironmentVariablePolicy": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "fileUpload": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "flagsExplorerSubscription": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "gitRepository": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "ipBlocking": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "imageOptimizationNewPrice": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integration": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integrationAccount": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integrationConfiguration": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integrationConfigurationTransfer": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integrationConfigurationProjects": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integrationVercelConfigurationOverride": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integrationConfigurationRole": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integrationSSOSession": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integrationResource": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integrationEvent": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integrationResourceSecrets": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integrationDeploymentAction": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "marketplaceInstallationMember": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "marketplaceBillingData": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "marketplaceInvoice": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "marketplaceSettings": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "marketplaceExperimentationItem": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "marketplaceExperimentationEdgeConfigData": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "jobGlobal": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "drain": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "logDrain": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "traceDrain": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "Monitoring": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "monitoringSettings": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "monitoringQuery": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "monitoringChart": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "monitoringAlert": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "notificationDeploymentFailed": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "notificationDomainConfiguration": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "notificationDomainExpire": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "notificationDomainMoved": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "notificationDomainPurchase": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "notificationDomainRenewal": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "notificationDomainTransfer": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "notificationDomainUnverified": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "NotificationMonitoringAlert": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "notificationPaymentFailed": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "notificationUsageAlert": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "notificationPreferences": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "notificationCustomerBudget": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "notificationStatementOfReasons": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "observabilityConfiguration": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "alerts": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "observabilityNotebook": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "observabilityFunnel": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "openTelemetryEndpoint": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "vercelAppInstallation": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "vercelAppInstallationRequest": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "paymentMethod": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "permissions": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "postgres": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "previewDeploymentSuffix": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "proTrialOnboarding": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "sharedEnvVars": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "sharedEnvVarsProduction": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "space": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "spaceRun": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "passwordProtectionInvoiceItem": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "rateLimit": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "redis": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "repository": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "remoteCaching": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "samlConfig": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "secret": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "redisStoreTokenSet": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "blobStoreTokenSet": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "postgresStoreTokenSet": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integrationStoreTokenSet": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "integrationResourceReplCommand": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "storeTransfer": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "supportCase": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "supportCaseComment": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "dataCacheBillingSettings": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "team": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "teamAccessRequest": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "teamFellowMembership": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "teamGitExclusivity": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "teamInvite": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "teamInviteCode": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "teamJoin": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "teamMemberMfaStatus": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "teamMicrofrontends": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "teamOwnMembership": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "teamOwnMembershipDisconnectSAML": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "token": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "usage": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "usageCycle": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "vpcPeeringConnection": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "webAnalyticsPlan": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "edgeConfig": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "edgeConfigItem": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "edgeConfigSchema": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "edgeConfigToken": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "webhook": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "webhook-event": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "endpointVerification": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "projectTransferIn": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "oauth2Application": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "vercelRun": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "vercelRunExec": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "apiKey": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              },
                              "apiKeyOwnedBySelf": {
                                "items": {
                                  "$ref": "#/components/schemas/ACLAction"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "lastRollbackTarget": {
                            "nullable": true,
                            "type": "object"
                          },
                          "lastAliasRequest": {
                            "nullable": true,
                            "properties": {
                              "fromDeploymentId": {
                                "type": "string"
                              },
                              "toDeploymentId": {
                                "type": "string"
                              },
                              "fromRollingReleaseId": {
                                "type": "string",
                                "description": "If rolling back from a rolling release, fromDeploymentId captures the \"base\" of that rolling release, and fromRollingReleaseId captures the \"target\" of that rolling release."
                              },
                              "jobStatus": {
                                "type": "string",
                                "enum": [
                                  "succeeded",
                                  "failed",
                                  "skipped",
                                  "pending",
                                  "in-progress"
                                ]
                              },
                              "requestedAt": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "promote",
                                  "rollback"
                                ]
                              }
                            },
                            "required": [
                              "fromDeploymentId",
                              "toDeploymentId",
                              "jobStatus",
                              "requestedAt",
                              "type"
                            ],
                            "type": "object"
                          },
                          "protectionBypass": {
                            "additionalProperties": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "createdAt": {
                                      "type": "number"
                                    },
                                    "createdBy": {
                                      "type": "string"
                                    },
                                    "scope": {
                                      "type": "string",
                                      "enum": [
                                        "integration-automation-bypass"
                                      ]
                                    },
                                    "integrationId": {
                                      "type": "string"
                                    },
                                    "configurationId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "createdAt",
                                    "createdBy",
                                    "scope",
                                    "integrationId",
                                    "configurationId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "createdAt": {
                                      "type": "number"
                                    },
                                    "createdBy": {
                                      "type": "string"
                                    },
                                    "scope": {
                                      "type": "string",
                                      "enum": [
                                        "automation-bypass"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "createdAt",
                                    "createdBy",
                                    "scope"
                                  ],
                                  "type": "object"
                                }
                              ]
                            },
                            "type": "object"
                          },
                          "hasActiveBranches": {
                            "type": "boolean"
                          },
                          "trustedIps": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "properties": {
                                  "deploymentType": {
                                    "type": "string",
                                    "enum": [
                                      "preview",
                                      "production",
                                      "all",
                                      "prod_deployment_urls_and_all_previews",
                                      "all_except_custom_domains"
                                    ]
                                  },
                                  "addresses": {
                                    "items": {
                                      "properties": {
                                        "value": {
                                          "type": "string"
                                        },
                                        "note": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "value"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "protectionMode": {
                                    "type": "string",
                                    "enum": [
                                      "additional",
                                      "exclusive"
                                    ]
                                  }
                                },
                                "required": [
                                  "deploymentType",
                                  "addresses",
                                  "protectionMode"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "deploymentType": {
                                    "type": "string",
                                    "enum": [
                                      "preview",
                                      "production",
                                      "all",
                                      "prod_deployment_urls_and_all_previews",
                                      "all_except_custom_domains"
                                    ]
                                  }
                                },
                                "required": [
                                  "deploymentType"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "gitComments": {
                            "properties": {
                              "onPullRequest": {
                                "type": "boolean",
                                "description": "Whether the Vercel bot should comment on PRs"
                              },
                              "onCommit": {
                                "type": "boolean",
                                "description": "Whether the Vercel bot should comment on commits"
                              }
                            },
                            "required": [
                              "onPullRequest",
                              "onCommit"
                            ],
                            "type": "object"
                          },
                          "gitProviderOptions": {
                            "properties": {
                              "createDeployments": {
                                "type": "string",
                                "enum": [
                                  "enabled",
                                  "disabled"
                                ],
                                "description": "Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead"
                              },
                              "disableRepositoryDispatchEvents": {
                                "type": "boolean",
                                "description": "Whether the Vercel bot should not automatically create GitHub repository-dispatch events on deployment events. https://vercel.com/docs/git/vercel-for-github#repository-dispatch-events"
                              }
                            },
                            "required": [
                              "createDeployments"
                            ],
                            "type": "object"
                          },
                          "paused": {
                            "type": "boolean"
                          },
                          "concurrencyBucketName": {
                            "type": "string"
                          },
                          "webAnalytics": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "disabledAt": {
                                "type": "number"
                              },
                              "canceledAt": {
                                "type": "number"
                              },
                              "enabledAt": {
                                "type": "number"
                              },
                              "hasData": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          "security": {
                            "properties": {
                              "attackModeEnabled": {
                                "type": "boolean"
                              },
                              "attackModeUpdatedAt": {
                                "type": "number"
                              },
                              "firewallEnabled": {
                                "type": "boolean"
                              },
                              "firewallUpdatedAt": {
                                "type": "number"
                              },
                              "attackModeActiveUntil": {
                                "nullable": true,
                                "type": "number"
                              },
                              "firewallConfigVersion": {
                                "type": "number"
                              },
                              "firewallSeawallEnabled": {
                                "type": "boolean"
                              },
                              "ja3Enabled": {
                                "type": "boolean"
                              },
                              "ja4Enabled": {
                                "type": "boolean"
                              },
                              "firewallBypassIps": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "managedRules": {
                                "nullable": true,
                                "properties": {
                                  "bot_filter": {
                                    "properties": {
                                      "active": {
                                        "type": "boolean"
                                      },
                                      "action": {
                                        "type": "string",
                                        "enum": [
                                          "log",
                                          "challenge",
                                          "deny"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "active"
                                    ],
                                    "type": "object"
                                  },
                                  "ai_bots": {
                                    "properties": {
                                      "active": {
                                        "type": "boolean"
                                      },
                                      "action": {
                                        "type": "string",
                                        "enum": [
                                          "log",
                                          "challenge",
                                          "deny"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "active"
                                    ],
                                    "type": "object"
                                  },
                                  "owasp": {
                                    "properties": {
                                      "active": {
                                        "type": "boolean"
                                      },
                                      "action": {
                                        "type": "string",
                                        "enum": [
                                          "log",
                                          "challenge",
                                          "deny"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "active"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "bot_filter",
                                  "ai_bots",
                                  "owasp"
                                ],
                                "type": "object"
                              },
                              "botIdEnabled": {
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "oidcTokenConfig": {
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "description": "Whether or not to generate OpenID Connect JSON Web Tokens."
                              },
                              "issuerMode": {
                                "type": "string",
                                "enum": [
                                  "team",
                                  "global"
                                ],
                                "description": "- team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`"
                              }
                            },
                            "type": "object"
                          },
                          "tier": {
                            "type": "string",
                            "enum": [
                              "standard",
                              "advanced",
                              "critical"
                            ]
                          },
                          "features": {
                            "properties": {
                              "webAnalytics": {
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "v0": {
                            "type": "boolean"
                          },
                          "abuse": {
                            "properties": {
                              "scanner": {
                                "type": "string"
                              },
                              "history": {
                                "items": {
                                  "properties": {
                                    "scanner": {
                                      "type": "string"
                                    },
                                    "reason": {
                                      "type": "string"
                                    },
                                    "by": {
                                      "type": "string"
                                    },
                                    "byId": {
                                      "type": "string"
                                    },
                                    "at": {
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "scanner",
                                    "reason",
                                    "by",
                                    "byId",
                                    "at"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "updatedAt": {
                                "type": "number"
                              },
                              "block": {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "blocked"
                                    ]
                                  },
                                  "reason": {
                                    "type": "string"
                                  },
                                  "statusCode": {
                                    "type": "number"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "reason",
                                  "statusCode",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              "blockHistory": {
                                "items": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "action": {
                                          "type": "string",
                                          "enum": [
                                            "blocked"
                                          ]
                                        },
                                        "reason": {
                                          "type": "string"
                                        },
                                        "statusCode": {
                                          "type": "number"
                                        },
                                        "createdAt": {
                                          "type": "number"
                                        },
                                        "caseId": {
                                          "type": "string"
                                        },
                                        "actor": {
                                          "type": "string"
                                        },
                                        "comment": {
                                          "type": "string"
                                        },
                                        "isCascading": {
                                          "type": "boolean"
                                        }
                                      },
                                      "required": [
                                        "action",
                                        "reason",
                                        "statusCode",
                                        "createdAt"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "action": {
                                          "type": "string",
                                          "enum": [
                                            "unblocked"
                                          ]
                                        },
                                        "createdAt": {
                                          "type": "number"
                                        },
                                        "caseId": {
                                          "type": "string"
                                        },
                                        "actor": {
                                          "type": "string"
                                        },
                                        "comment": {
                                          "type": "string"
                                        },
                                        "isCascading": {
                                          "type": "boolean"
                                        }
                                      },
                                      "required": [
                                        "action",
                                        "createdAt"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "action": {
                                          "type": "string",
                                          "enum": [
                                            "route-blocked"
                                          ]
                                        },
                                        "route": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "src": {
                                                  "type": "string"
                                                },
                                                "status": {
                                                  "type": "number"
                                                }
                                              },
                                              "required": [
                                                "src",
                                                "status"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "properties": {
                                                "has": {
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "header"
                                                            ]
                                                          },
                                                          "key": {
                                                            "type": "string",
                                                            "enum": [
                                                              "x-vercel-ip-country"
                                                            ]
                                                          },
                                                          "value": {
                                                            "properties": {
                                                              "eq": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "required": [
                                                              "eq"
                                                            ],
                                                            "type": "object"
                                                          }
                                                        },
                                                        "required": [
                                                          "type",
                                                          "key",
                                                          "value"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      {
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "host"
                                                            ]
                                                          },
                                                          "value": {
                                                            "properties": {
                                                              "eq": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "required": [
                                                              "eq"
                                                            ],
                                                            "type": "object"
                                                          }
                                                        },
                                                        "required": [
                                                          "type",
                                                          "value"
                                                        ],
                                                        "type": "object"
                                                      }
                                                    ]
                                                  },
                                                  "type": "array"
                                                },
                                                "mitigate": {
                                                  "properties": {
                                                    "action": {
                                                      "type": "string",
                                                      "enum": [
                                                        "block_legal_cwc"
                                                      ]
                                                    }
                                                  },
                                                  "required": [
                                                    "action"
                                                  ],
                                                  "type": "object"
                                                },
                                                "src": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "has",
                                                "mitigate"
                                              ],
                                              "type": "object"
                                            }
                                          ]
                                        },
                                        "reason": {
                                          "type": "string"
                                        },
                                        "createdAt": {
                                          "type": "number"
                                        },
                                        "caseId": {
                                          "type": "string"
                                        },
                                        "actor": {
                                          "type": "string"
                                        },
                                        "comment": {
                                          "type": "string"
                                        },
                                        "isCascading": {
                                          "type": "boolean"
                                        }
                                      },
                                      "required": [
                                        "action",
                                        "route",
                                        "reason",
                                        "createdAt"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "action": {
                                          "type": "string",
                                          "enum": [
                                            "route-unblocked"
                                          ]
                                        },
                                        "route": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "src": {
                                                  "type": "string"
                                                },
                                                "status": {
                                                  "type": "number"
                                                }
                                              },
                                              "required": [
                                                "src",
                                                "status"
                                              ],
                                              "type": "object"
                                            },
                                            {
                                              "properties": {
                                                "has": {
                                                  "items": {
                                                    "oneOf": [
                                                      {
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "header"
                                                            ]
                                                          },
                                                          "key": {
                                                            "type": "string",
                                                            "enum": [
                                                              "x-vercel-ip-country"
                                                            ]
                                                          },
                                                          "value": {
                                                            "properties": {
                                                              "eq": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "required": [
                                                              "eq"
                                                            ],
                                                            "type": "object"
                                                          }
                                                        },
                                                        "required": [
                                                          "type",
                                                          "key",
                                                          "value"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      {
                                                        "properties": {
                                                          "type": {
                                                            "type": "string",
                                                            "enum": [
                                                              "host"
                                                            ]
                                                          },
                                                          "value": {
                                                            "properties": {
                                                              "eq": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "required": [
                                                              "eq"
                                                            ],
                                                            "type": "object"
                                                          }
                                                        },
                                                        "required": [
                                                          "type",
                                                          "value"
                                                        ],
                                                        "type": "object"
                                                      }
                                                    ]
                                                  },
                                                  "type": "array"
                                                },
                                                "mitigate": {
                                                  "properties": {
                                                    "action": {
                                                      "type": "string",
                                                      "enum": [
                                                        "block_legal_cwc"
                                                      ]
                                                    }
                                                  },
                                                  "required": [
                                                    "action"
                                                  ],
                                                  "type": "object"
                                                },
                                                "src": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "has",
                                                "mitigate"
                                              ],
                                              "type": "object"
                                            }
                                          ]
                                        },
                                        "statusCode": {
                                          "type": "number"
                                        },
                                        "createdAt": {
                                          "type": "number"
                                        },
                                        "caseId": {
                                          "type": "string"
                                        },
                                        "actor": {
                                          "type": "string"
                                        },
                                        "comment": {
                                          "type": "string"
                                        },
                                        "isCascading": {
                                          "type": "boolean"
                                        }
                                      },
                                      "required": [
                                        "action",
                                        "route",
                                        "createdAt"
                                      ],
                                      "type": "object"
                                    }
                                  ]
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "history",
                              "updatedAt"
                            ],
                            "type": "object"
                          },
                          "internalRoutes": {
                            "items": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "src": {
                                      "type": "string"
                                    },
                                    "status": {
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "src",
                                    "status"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "has": {
                                      "items": {
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "header"
                                                ]
                                              },
                                              "key": {
                                                "type": "string",
                                                "enum": [
                                                  "x-vercel-ip-country"
                                                ]
                                              },
                                              "value": {
                                                "properties": {
                                                  "eq": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "eq"
                                                ],
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "key",
                                              "value"
                                            ],
                                            "type": "object"
                                          },
                                          {
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "host"
                                                ]
                                              },
                                              "value": {
                                                "properties": {
                                                  "eq": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "eq"
                                                ],
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "value"
                                            ],
                                            "type": "object"
                                          }
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    "mitigate": {
                                      "properties": {
                                        "action": {
                                          "type": "string",
                                          "enum": [
                                            "block_legal_cwc"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "action"
                                      ],
                                      "type": "object"
                                    },
                                    "src": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "has",
                                    "mitigate"
                                  ],
                                  "type": "object"
                                }
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "accountId",
                          "directoryListing",
                          "id",
                          "name",
                          "nodeVersion",
                          "resourceConfig",
                          "defaultResourceConfig"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "required": [
                    "projects",
                    "pagination"
                  ],
                  "type": "object",
                  "description": "The paginated list of projects"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "from",
            "description": "Query only projects updated after the given timestamp",
            "in": "query",
            "schema": {
              "description": "Query only projects updated after the given timestamp",
              "type": "string"
            }
          },
          {
            "name": "gitForkProtection",
            "description": "Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed",
            "in": "query",
            "schema": {
              "description": "Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed",
              "type": "string",
              "enum": [
                "1",
                "0"
              ],
              "example": "1"
            }
          },
          {
            "name": "limit",
            "description": "Limit the number of projects returned",
            "in": "query",
            "schema": {
              "description": "Limit the number of projects returned",
              "type": "string"
            }
          },
          {
            "name": "search",
            "description": "Search projects by the name field",
            "in": "query",
            "schema": {
              "description": "Search projects by the name field",
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "name": "repo",
            "description": "Filter results by repo. Also used for project count",
            "in": "query",
            "schema": {
              "description": "Filter results by repo. Also used for project count",
              "type": "string"
            }
          },
          {
            "name": "repoId",
            "description": "Filter results by Repository ID.",
            "in": "query",
            "schema": {
              "description": "Filter results by Repository ID.",
              "type": "string"
            }
          },
          {
            "name": "repoUrl",
            "description": "Filter results by Repository URL.",
            "in": "query",
            "schema": {
              "description": "Filter results by Repository URL.",
              "type": "string",
              "example": "https://github.com/vercel/next.js"
            }
          },
          {
            "name": "excludeRepos",
            "description": "Filter results by excluding those projects that belong to a repo",
            "in": "query",
            "schema": {
              "description": "Filter results by excluding those projects that belong to a repo",
              "type": "string"
            }
          },
          {
            "name": "edgeConfigId",
            "description": "Filter results by connected Edge Config ID",
            "in": "query",
            "schema": {
              "description": "Filter results by connected Edge Config ID",
              "type": "string"
            }
          },
          {
            "name": "edgeConfigTokenId",
            "description": "Filter results by connected Edge Config Token ID",
            "in": "query",
            "schema": {
              "description": "Filter results by connected Edge Config Token ID",
              "type": "string"
            }
          },
          {
            "name": "deprecated",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "elasticConcurrencyEnabled",
            "description": "Filter results by projects with elastic concurrency enabled",
            "in": "query",
            "schema": {
              "description": "Filter results by projects with elastic concurrency enabled",
              "type": "string",
              "enum": [
                "1",
                "0"
              ],
              "example": "1"
            }
          },
          {
            "name": "sortByElasticConcurrency",
            "description": "Sort results by elastic concurrency status. desc = enabled projects first, asc = disabled projects first",
            "in": "query",
            "schema": {
              "description": "Sort results by elastic concurrency status. desc = enabled projects first, asc = disabled projects first",
              "type": "string",
              "enum": [
                "desc",
                "asc"
              ],
              "example": "desc"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v11/projects": {
      "post": {
        "description": "Allows to create a new project with the provided configuration. It only requires the project `name` but more configuration can be provided to override the defaults.",
        "operationId": "createProject",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create a new project",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The project was successfuly created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accountId": {
                      "type": "string"
                    },
                    "analytics": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "canceledAt": {
                          "nullable": true,
                          "type": "number"
                        },
                        "disabledAt": {
                          "type": "number"
                        },
                        "enabledAt": {
                          "type": "number"
                        },
                        "paidAt": {
                          "type": "number"
                        },
                        "sampleRatePercent": {
                          "nullable": true,
                          "type": "number"
                        },
                        "spendLimitInDollars": {
                          "nullable": true,
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "disabledAt",
                        "enabledAt"
                      ],
                      "type": "object"
                    },
                    "speedInsights": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "enabledAt": {
                          "type": "number"
                        },
                        "disabledAt": {
                          "type": "number"
                        },
                        "canceledAt": {
                          "type": "number"
                        },
                        "hasData": {
                          "type": "boolean"
                        },
                        "paidAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    "autoExposeSystemEnvs": {
                      "type": "boolean"
                    },
                    "autoAssignCustomDomains": {
                      "type": "boolean"
                    },
                    "autoAssignCustomDomainsUpdatedBy": {
                      "type": "string"
                    },
                    "buildCommand": {
                      "nullable": true,
                      "type": "string"
                    },
                    "commandForIgnoringBuildStep": {
                      "nullable": true,
                      "type": "string"
                    },
                    "connectConfigurations": {
                      "nullable": true,
                      "items": {
                        "properties": {
                          "envId": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "preview",
                                  "production"
                                ]
                              }
                            ]
                          },
                          "connectConfigurationId": {
                            "type": "string"
                          },
                          "dc": {
                            "type": "string"
                          },
                          "passive": {
                            "type": "boolean"
                          },
                          "buildsEnabled": {
                            "type": "boolean"
                          },
                          "aws": {
                            "properties": {
                              "subnetIds": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "securityGroupId": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "subnetIds",
                              "securityGroupId"
                            ],
                            "type": "object"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "envId",
                          "connectConfigurationId",
                          "passive",
                          "buildsEnabled",
                          "createdAt",
                          "updatedAt"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "connectConfigurationId": {
                      "nullable": true,
                      "type": "string"
                    },
                    "connectBuildsEnabled": {
                      "type": "boolean"
                    },
                    "passiveConnectConfigurationId": {
                      "nullable": true,
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "customerSupportCodeVisibility": {
                      "type": "boolean"
                    },
                    "crons": {
                      "properties": {
                        "enabledAt": {
                          "type": "number",
                          "description": "The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs."
                        },
                        "disabledAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "The time the feature was disabled for this project."
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "deploymentId": {
                          "nullable": true,
                          "type": "string",
                          "description": "The ID of the Deployment from which the definitions originated."
                        },
                        "definitions": {
                          "items": {
                            "properties": {
                              "host": {
                                "type": "string",
                                "description": "The hostname that should be used.",
                                "example": "vercel.com"
                              },
                              "path": {
                                "type": "string",
                                "description": "The path that should be called for the cronjob.",
                                "example": "/api/crons/sync-something?hello=world"
                              },
                              "schedule": {
                                "type": "string",
                                "description": "The cron expression.",
                                "example": "0 0 * * *"
                              }
                            },
                            "required": [
                              "host",
                              "path",
                              "schedule"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "enabledAt",
                        "disabledAt",
                        "updatedAt",
                        "deploymentId",
                        "definitions"
                      ],
                      "type": "object"
                    },
                    "dataCache": {
                      "properties": {
                        "userDisabled": {
                          "type": "boolean"
                        },
                        "storageSizeBytes": {
                          "nullable": true,
                          "type": "number"
                        },
                        "unlimited": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "userDisabled"
                      ],
                      "type": "object"
                    },
                    "deploymentExpiration": {
                      "nullable": true,
                      "properties": {
                        "expirationDays": {
                          "type": "number",
                          "description": "Number of days to keep non-production deployments (mostly preview deployments) before soft deletion."
                        },
                        "expirationDaysProduction": {
                          "type": "number",
                          "description": "Number of days to keep production deployments before soft deletion."
                        },
                        "expirationDaysCanceled": {
                          "type": "number",
                          "description": "Number of days to keep canceled deployments before soft deletion."
                        },
                        "expirationDaysErrored": {
                          "type": "number",
                          "description": "Number of days to keep errored deployments before soft deletion."
                        },
                        "deploymentsToKeep": {
                          "type": "number",
                          "description": "Minimum number of production deployments to keep for this project, even if they are over the production expiration limit."
                        }
                      },
                      "type": "object",
                      "description": "Retention policies for deployments. These are enforced at the project level, but we also maintain an instance of this at the team level as a default policy that gets applied to new projects."
                    },
                    "devCommand": {
                      "nullable": true,
                      "type": "string"
                    },
                    "directoryListing": {
                      "type": "boolean"
                    },
                    "installCommand": {
                      "nullable": true,
                      "type": "string"
                    },
                    "env": {
                      "items": {
                        "properties": {
                          "target": {
                            "oneOf": [
                              {
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "production",
                                    "preview",
                                    "development",
                                    "preview",
                                    "development"
                                  ]
                                },
                                "type": "array"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "production",
                                  "preview",
                                  "development",
                                  "preview",
                                  "development"
                                ]
                              }
                            ]
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "system",
                              "encrypted",
                              "plain",
                              "sensitive",
                              "secret"
                            ]
                          },
                          "sunsetSecretId": {
                            "type": "string",
                            "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                          },
                          "decrypted": {
                            "type": "boolean"
                          },
                          "value": {
                            "type": "string"
                          },
                          "vsmValue": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "key": {
                            "type": "string"
                          },
                          "configurationId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          },
                          "createdBy": {
                            "nullable": true,
                            "type": "string"
                          },
                          "updatedBy": {
                            "nullable": true,
                            "type": "string"
                          },
                          "gitBranch": {
                            "type": "string"
                          },
                          "edgeConfigId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "edgeConfigTokenId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "contentHint": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-read-only-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "blob-read-write-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url-non-pooling"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-prisma-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-user"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-host"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-password"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-database"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url-no-ssl"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "integration-store-secret"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  },
                                  "integrationId": {
                                    "type": "string"
                                  },
                                  "integrationProductId": {
                                    "type": "string"
                                  },
                                  "integrationConfigurationId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId",
                                  "integrationId",
                                  "integrationProductId",
                                  "integrationConfigurationId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "flags-connection-string"
                                    ]
                                  },
                                  "projectId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "projectId"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "internalContentHint": {
                            "nullable": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "flags-secret"
                                ]
                              },
                              "encryptedValue": {
                                "type": "string",
                                "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                              }
                            },
                            "required": [
                              "type",
                              "encryptedValue"
                            ],
                            "type": "object",
                            "description": "Similar to `contentHints`, but should not be exposed to the user."
                          },
                          "comment": {
                            "type": "string"
                          },
                          "customEnvironmentIds": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "type",
                          "value",
                          "key"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "customEnvironments": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier for the custom environment (format: env_*)"
                          },
                          "slug": {
                            "type": "string",
                            "description": "URL-friendly name of the environment"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "preview",
                              "production",
                              "development"
                            ],
                            "description": "The type of environment (production, preview, or development)"
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional description of the environment's purpose"
                          },
                          "branchMatcher": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "endsWith",
                                  "startsWith",
                                  "equals"
                                ],
                                "description": "The type of matching to perform"
                              },
                              "pattern": {
                                "type": "string",
                                "description": "The pattern to match against branch names"
                              }
                            },
                            "required": [
                              "type",
                              "pattern"
                            ],
                            "type": "object",
                            "description": "Configuration for matching git branches to this environment"
                          },
                          "domains": {
                            "items": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "apexName": {
                                  "type": "string"
                                },
                                "projectId": {
                                  "type": "string"
                                },
                                "redirect": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "redirectStatusCode": {
                                  "nullable": true,
                                  "type": "number",
                                  "enum": [
                                    307,
                                    301,
                                    302,
                                    308
                                  ]
                                },
                                "gitBranch": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "customEnvironmentId": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "updatedAt": {
                                  "type": "number"
                                },
                                "createdAt": {
                                  "type": "number"
                                },
                                "verified": {
                                  "type": "boolean",
                                  "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                                },
                                "verification": {
                                  "items": {
                                    "properties": {
                                      "type": {
                                        "type": "string"
                                      },
                                      "domain": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "type": "string"
                                      },
                                      "reason": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "domain",
                                      "value",
                                      "reason"
                                    ],
                                    "type": "object",
                                    "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                  },
                                  "type": "array",
                                  "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                }
                              },
                              "required": [
                                "name",
                                "apexName",
                                "projectId",
                                "verified"
                              ],
                              "type": "object",
                              "description": "List of domains associated with this environment"
                            },
                            "type": "array",
                            "description": "List of domains associated with this environment"
                          },
                          "currentDeploymentAliases": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "List of aliases for the current deployment"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "Timestamp when the environment was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "Timestamp when the environment was last updated"
                          }
                        },
                        "required": [
                          "id",
                          "slug",
                          "type",
                          "createdAt",
                          "updatedAt"
                        ],
                        "type": "object",
                        "description": "Internal representation of a custom environment with all required properties"
                      },
                      "type": "array"
                    },
                    "framework": {
                      "nullable": true,
                      "type": "string",
                      "enum": [
                        "blitzjs",
                        "nextjs",
                        "gatsby",
                        "remix",
                        "react-router",
                        "astro",
                        "hexo",
                        "eleventy",
                        "docusaurus-2",
                        "docusaurus",
                        "preact",
                        "solidstart-1",
                        "solidstart",
                        "dojo",
                        "ember",
                        "vue",
                        "scully",
                        "ionic-angular",
                        "angular",
                        "polymer",
                        "svelte",
                        "sveltekit",
                        "sveltekit-1",
                        "ionic-react",
                        "create-react-app",
                        "gridsome",
                        "umijs",
                        "sapper",
                        "saber",
                        "stencil",
                        "nuxtjs",
                        "redwoodjs",
                        "hugo",
                        "jekyll",
                        "brunch",
                        "middleman",
                        "zola",
                        "hydrogen",
                        "vite",
                        "vitepress",
                        "vuepress",
                        "parcel",
                        "fastapi",
                        "fasthtml",
                        "sanity-v3",
                        "sanity",
                        "storybook",
                        "nitro",
                        "hono",
                        "express",
                        "xmcp"
                      ]
                    },
                    "gitForkProtection": {
                      "type": "boolean"
                    },
                    "gitLFS": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    },
                    "ipBuckets": {
                      "items": {
                        "properties": {
                          "bucket": {
                            "type": "string"
                          },
                          "supportUntil": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "bucket"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "latestDeployments": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "alias": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "aliasAssigned": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "boolean"
                              }
                            ]
                          },
                          "aliasError": {
                            "nullable": true,
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "code",
                              "message"
                            ],
                            "type": "object"
                          },
                          "aliasFinal": {
                            "nullable": true,
                            "type": "string"
                          },
                          "automaticAliases": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "branchMatcher": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "endsWith",
                                  "startsWith",
                                  "equals"
                                ],
                                "description": "The type of matching to perform"
                              },
                              "pattern": {
                                "type": "string",
                                "description": "The pattern to match against branch names"
                              }
                            },
                            "required": [
                              "type",
                              "pattern"
                            ],
                            "type": "object"
                          },
                          "buildingAt": {
                            "type": "number"
                          },
                          "builds": {
                            "items": {
                              "properties": {
                                "use": {
                                  "type": "string"
                                },
                                "src": {
                                  "type": "string"
                                },
                                "dest": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "use"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "checksConclusion": {
                            "type": "string",
                            "enum": [
                              "succeeded",
                              "failed",
                              "skipped",
                              "canceled"
                            ]
                          },
                          "checksState": {
                            "type": "string",
                            "enum": [
                              "registered",
                              "running",
                              "completed"
                            ]
                          },
                          "connectBuildsEnabled": {
                            "type": "boolean"
                          },
                          "connectConfigurationId": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "createdIn": {
                            "type": "string"
                          },
                          "creator": {
                            "nullable": true,
                            "properties": {
                              "email": {
                                "type": "string"
                              },
                              "githubLogin": {
                                "type": "string"
                              },
                              "gitlabLogin": {
                                "type": "string"
                              },
                              "uid": {
                                "type": "string"
                              },
                              "username": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "email",
                              "uid",
                              "username"
                            ],
                            "type": "object"
                          },
                          "deletedAt": {
                            "type": "number"
                          },
                          "deploymentHostname": {
                            "type": "string"
                          },
                          "forced": {
                            "type": "boolean"
                          },
                          "name": {
                            "type": "string"
                          },
                          "meta": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "monorepoManager": {
                            "nullable": true,
                            "type": "string"
                          },
                          "oidcTokenClaims": {
                            "properties": {
                              "iss": {
                                "type": "string"
                              },
                              "sub": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string"
                              },
                              "aud": {
                                "type": "string"
                              },
                              "owner": {
                                "type": "string"
                              },
                              "owner_id": {
                                "type": "string"
                              },
                              "project": {
                                "type": "string"
                              },
                              "project_id": {
                                "type": "string"
                              },
                              "environment": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "iss",
                              "sub",
                              "scope",
                              "aud",
                              "owner",
                              "owner_id",
                              "project",
                              "project_id",
                              "environment"
                            ],
                            "type": "object"
                          },
                          "plan": {
                            "type": "string",
                            "enum": [
                              "pro",
                              "enterprise",
                              "hobby"
                            ]
                          },
                          "previewCommentsEnabled": {
                            "type": "boolean",
                            "description": "Whether or not preview comments are enabled for the deployment",
                            "example": false
                          },
                          "private": {
                            "type": "boolean"
                          },
                          "readyAt": {
                            "type": "number"
                          },
                          "readyState": {
                            "type": "string",
                            "enum": [
                              "BUILDING",
                              "ERROR",
                              "INITIALIZING",
                              "QUEUED",
                              "READY",
                              "CANCELED"
                            ]
                          },
                          "readySubstate": {
                            "type": "string",
                            "enum": [
                              "STAGED",
                              "ROLLING",
                              "PROMOTED"
                            ]
                          },
                          "requestedAt": {
                            "type": "number"
                          },
                          "target": {
                            "nullable": true,
                            "type": "string"
                          },
                          "teamId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "LAMBDAS"
                            ]
                          },
                          "url": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "withCache": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "createdIn",
                          "creator",
                          "deploymentHostname",
                          "name",
                          "plan",
                          "private",
                          "readyState",
                          "type",
                          "url",
                          "userId"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "link": {
                      "oneOf": [
                        {
                          "properties": {
                            "org": {
                              "type": "string"
                            },
                            "repoOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "github"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "org",
                            "type",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-limited"
                              ]
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "org": {
                              "type": "string"
                            },
                            "repoOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "org",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "org": {
                              "type": "string"
                            },
                            "repoOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-custom-host"
                              ]
                            },
                            "host": {
                              "type": "string"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "org",
                            "type",
                            "host",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "projectId": {
                              "type": "string"
                            },
                            "projectName": {
                              "type": "string"
                            },
                            "projectNameWithNamespace": {
                              "type": "string"
                            },
                            "projectNamespace": {
                              "type": "string"
                            },
                            "projectOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels)."
                            },
                            "projectUrl": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "gitlab"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "projectId",
                            "projectName",
                            "projectNameWithNamespace",
                            "projectNamespace",
                            "projectUrl",
                            "type",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            },
                            "owner": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "bitbucket"
                              ]
                            },
                            "uuid": {
                              "type": "string"
                            },
                            "workspaceUuid": {
                              "type": "string"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "slug",
                            "owner",
                            "type",
                            "uuid",
                            "workspaceUuid",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "microfrontends": {
                      "oneOf": [
                        {
                          "properties": {
                            "updatedAt": {
                              "type": "number",
                              "description": "Timestamp when the microfrontends settings were last updated."
                            },
                            "groupIds": {
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                              "description": "The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together."
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "Whether microfrontends are enabled for this project."
                            },
                            "isDefaultApp": {
                              "type": "boolean",
                              "description": "Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends."
                            },
                            "defaultRoute": {
                              "type": "string",
                              "description": "A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`"
                            },
                            "routeObservabilityToThisProject": {
                              "type": "boolean",
                              "description": "Whether observability data should be routed to this microfrontend project or a root project."
                            }
                          },
                          "required": [
                            "updatedAt",
                            "groupIds",
                            "enabled"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "updatedAt": {
                              "type": "number"
                            },
                            "groupIds": {
                              "items": {
                                "oneOf": []
                              },
                              "maxItems": 0,
                              "minItems": 0,
                              "type": "array"
                            },
                            "enabled": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "updatedAt",
                            "groupIds",
                            "enabled"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "nodeVersion": {
                      "type": "string",
                      "enum": [
                        "22.x",
                        "20.x",
                        "18.x",
                        "16.x",
                        "14.x",
                        "12.x",
                        "10.x",
                        "8.10.x"
                      ]
                    },
                    "optionsAllowlist": {
                      "nullable": true,
                      "properties": {
                        "paths": {
                          "items": {
                            "properties": {
                              "value": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "value"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "paths"
                      ],
                      "type": "object"
                    },
                    "outputDirectory": {
                      "nullable": true,
                      "type": "string"
                    },
                    "passwordProtection": {
                      "nullable": true,
                      "type": "object"
                    },
                    "productionDeploymentsFastLane": {
                      "type": "boolean"
                    },
                    "publicSource": {
                      "nullable": true,
                      "type": "boolean"
                    },
                    "resourceConfig": {
                      "properties": {
                        "elasticConcurrencyEnabled": {
                          "type": "boolean"
                        },
                        "fluid": {
                          "type": "boolean"
                        },
                        "functionDefaultRegions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "functionDefaultTimeout": {
                          "type": "number"
                        },
                        "functionDefaultMemoryType": {
                          "type": "string",
                          "enum": [
                            "standard_legacy",
                            "standard",
                            "performance"
                          ]
                        },
                        "functionZeroConfigFailover": {
                          "type": "boolean"
                        },
                        "buildMachineType": {
                          "type": "string",
                          "enum": [
                            "enhanced",
                            "turbo"
                          ]
                        },
                        "isNSNBDisabled": {
                          "type": "boolean"
                        }
                      },
                      "type": "object",
                      "required": [
                        "functionDefaultRegions"
                      ]
                    },
                    "rollbackDescription": {
                      "properties": {
                        "userId": {
                          "type": "string",
                          "description": "The user who rolled back the project."
                        },
                        "username": {
                          "type": "string",
                          "description": "The username of the user who rolled back the project."
                        },
                        "description": {
                          "type": "string",
                          "description": "User-supplied explanation of why they rolled back the project. Limited to 250 characters."
                        },
                        "createdAt": {
                          "type": "number",
                          "description": "Timestamp of when the rollback was requested."
                        }
                      },
                      "required": [
                        "userId",
                        "username",
                        "description",
                        "createdAt"
                      ],
                      "type": "object",
                      "description": "Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback."
                    },
                    "rollingRelease": {
                      "nullable": true,
                      "properties": {
                        "target": {
                          "type": "string",
                          "description": "The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.",
                          "example": "production"
                        },
                        "stages": {
                          "nullable": true,
                          "items": {
                            "properties": {
                              "targetPercentage": {
                                "type": "number",
                                "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                                "example": 25
                              },
                              "requireApproval": {
                                "type": "boolean",
                                "description": "Whether or not this stage requires manual approval to proceed",
                                "example": false
                              },
                              "duration": {
                                "type": "number",
                                "description": "Duration in minutes for automatic advancement to the next stage",
                                "example": 600
                              }
                            },
                            "required": [
                              "targetPercentage"
                            ],
                            "type": "object",
                            "description": "An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100."
                          },
                          "type": "array",
                          "description": "An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100."
                        },
                        "canaryResponseHeader": {
                          "type": "boolean",
                          "description": "Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.",
                          "example": false
                        }
                      },
                      "required": [
                        "target"
                      ],
                      "type": "object",
                      "description": "Project-level rolling release configuration that defines how deployments should be gradually rolled out"
                    },
                    "defaultResourceConfig": {
                      "properties": {
                        "elasticConcurrencyEnabled": {
                          "type": "boolean"
                        },
                        "fluid": {
                          "type": "boolean"
                        },
                        "functionDefaultRegions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "functionDefaultTimeout": {
                          "type": "number"
                        },
                        "functionDefaultMemoryType": {
                          "type": "string",
                          "enum": [
                            "standard_legacy",
                            "standard",
                            "performance"
                          ]
                        },
                        "functionZeroConfigFailover": {
                          "type": "boolean"
                        },
                        "buildMachineType": {
                          "type": "string",
                          "enum": [
                            "enhanced",
                            "turbo"
                          ]
                        },
                        "isNSNBDisabled": {
                          "type": "boolean"
                        }
                      },
                      "type": "object",
                      "required": [
                        "functionDefaultRegions"
                      ]
                    },
                    "rootDirectory": {
                      "nullable": true,
                      "type": "string"
                    },
                    "serverlessFunctionZeroConfigFailover": {
                      "type": "boolean"
                    },
                    "skewProtectionBoundaryAt": {
                      "type": "number"
                    },
                    "skewProtectionMaxAge": {
                      "type": "number"
                    },
                    "skipGitConnectDuringLink": {
                      "type": "boolean"
                    },
                    "sourceFilesOutsideRootDirectory": {
                      "type": "boolean"
                    },
                    "enableAffectedProjectsDeployments": {
                      "type": "boolean"
                    },
                    "ssoProtection": {
                      "nullable": true,
                      "properties": {
                        "deploymentType": {
                          "type": "string",
                          "enum": [
                            "preview",
                            "all",
                            "prod_deployment_urls_and_all_previews",
                            "all_except_custom_domains"
                          ]
                        }
                      },
                      "required": [
                        "deploymentType"
                      ],
                      "type": "object"
                    },
                    "targets": {
                      "additionalProperties": {
                        "nullable": true,
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "alias": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "aliasAssigned": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "boolean"
                              }
                            ]
                          },
                          "aliasError": {
                            "nullable": true,
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "code",
                              "message"
                            ],
                            "type": "object"
                          },
                          "aliasFinal": {
                            "nullable": true,
                            "type": "string"
                          },
                          "automaticAliases": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "branchMatcher": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "endsWith",
                                  "startsWith",
                                  "equals"
                                ],
                                "description": "The type of matching to perform"
                              },
                              "pattern": {
                                "type": "string",
                                "description": "The pattern to match against branch names"
                              }
                            },
                            "required": [
                              "type",
                              "pattern"
                            ],
                            "type": "object"
                          },
                          "buildingAt": {
                            "type": "number"
                          },
                          "builds": {
                            "items": {
                              "properties": {
                                "use": {
                                  "type": "string"
                                },
                                "src": {
                                  "type": "string"
                                },
                                "dest": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "use"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "checksConclusion": {
                            "type": "string",
                            "enum": [
                              "succeeded",
                              "failed",
                              "skipped",
                              "canceled"
                            ]
                          },
                          "checksState": {
                            "type": "string",
                            "enum": [
                              "registered",
                              "running",
                              "completed"
                            ]
                          },
                          "connectBuildsEnabled": {
                            "type": "boolean"
                          },
                          "connectConfigurationId": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "createdIn": {
                            "type": "string"
                          },
                          "creator": {
                            "nullable": true,
                            "properties": {
                              "email": {
                                "type": "string"
                              },
                              "githubLogin": {
                                "type": "string"
                              },
                              "gitlabLogin": {
                                "type": "string"
                              },
                              "uid": {
                                "type": "string"
                              },
                              "username": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "email",
                              "uid",
                              "username"
                            ],
                            "type": "object"
                          },
                          "deletedAt": {
                            "type": "number"
                          },
                          "deploymentHostname": {
                            "type": "string"
                          },
                          "forced": {
                            "type": "boolean"
                          },
                          "name": {
                            "type": "string"
                          },
                          "meta": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "monorepoManager": {
                            "nullable": true,
                            "type": "string"
                          },
                          "oidcTokenClaims": {
                            "properties": {
                              "iss": {
                                "type": "string"
                              },
                              "sub": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string"
                              },
                              "aud": {
                                "type": "string"
                              },
                              "owner": {
                                "type": "string"
                              },
                              "owner_id": {
                                "type": "string"
                              },
                              "project": {
                                "type": "string"
                              },
                              "project_id": {
                                "type": "string"
                              },
                              "environment": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "iss",
                              "sub",
                              "scope",
                              "aud",
                              "owner",
                              "owner_id",
                              "project",
                              "project_id",
                              "environment"
                            ],
                            "type": "object"
                          },
                          "plan": {
                            "type": "string",
                            "enum": [
                              "pro",
                              "enterprise",
                              "hobby"
                            ]
                          },
                          "previewCommentsEnabled": {
                            "type": "boolean",
                            "description": "Whether or not preview comments are enabled for the deployment",
                            "example": false
                          },
                          "private": {
                            "type": "boolean"
                          },
                          "readyAt": {
                            "type": "number"
                          },
                          "readyState": {
                            "type": "string",
                            "enum": [
                              "BUILDING",
                              "ERROR",
                              "INITIALIZING",
                              "QUEUED",
                              "READY",
                              "CANCELED"
                            ]
                          },
                          "readySubstate": {
                            "type": "string",
                            "enum": [
                              "STAGED",
                              "ROLLING",
                              "PROMOTED"
                            ]
                          },
                          "requestedAt": {
                            "type": "number"
                          },
                          "target": {
                            "nullable": true,
                            "type": "string"
                          },
                          "teamId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "LAMBDAS"
                            ]
                          },
                          "url": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "withCache": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "createdIn",
                          "creator",
                          "deploymentHostname",
                          "name",
                          "plan",
                          "private",
                          "readyState",
                          "type",
                          "url",
                          "userId"
                        ],
                        "type": "object"
                      },
                      "type": "object"
                    },
                    "transferCompletedAt": {
                      "type": "number"
                    },
                    "transferStartedAt": {
                      "type": "number"
                    },
                    "transferToAccountId": {
                      "type": "string"
                    },
                    "transferredFromAccountId": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "live": {
                      "type": "boolean"
                    },
                    "enablePreviewFeedback": {
                      "nullable": true,
                      "type": "boolean"
                    },
                    "enableProductionFeedback": {
                      "nullable": true,
                      "type": "boolean"
                    },
                    "permissions": {
                      "properties": {
                        "aliasProject": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "aliasProtectionBypass": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "buildMachine": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "productionAliasProtectionBypass": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "connectConfigurationLink": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "dataCacheNamespace": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deployment": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentBuildLogs": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentCheck": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentCheckPreview": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentCheckReRunFromProductionBranch": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentProductionGit": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentV0": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentPreview": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentPrivate": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentPromote": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentRollback": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeCacheNamespace": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "environments": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "logs": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "logsPreset": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "passwordProtection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "optionsAllowlist": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "job": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityData": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "onDemandBuild": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "onDemandConcurrency": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "project": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectFromV0": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectAccessGroup": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectAnalyticsSampling": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectCheck": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectCheckRun": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDeploymentHook": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDomain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDomainMove": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDomainCheckConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectEnvVars": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectEnvVarsProduction": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectEnvVarsUnownedByIntegration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectFlags": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectId": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectIntegrationConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectLink": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectMember": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectMonitoring": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectPermissions": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectProductionBranch": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTransferOut": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectProtectionBypass": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectUsage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectAnalyticsUsage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectSupportCase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectSupportCaseComment": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDeploymentExpiration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectRollingRelease": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTier": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectOIDCToken": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "seawallConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "skewProtection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "analytics": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "trustedIps": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "v0Chat": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webAnalytics": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sharedEnvVarConnection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sonar": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "oauth2Connection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "user": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "userConnection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "userSudo": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webAuthn": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "accessGroup": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "aliasGlobal": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "analyticsSampling": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "analyticsUsage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "auditLog": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingAddress": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInformation": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInvoice": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInvoiceEmailRecipient": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInvoiceLanguage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingPlan": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingPurchaseOrder": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingRefund": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingTaxId": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "blob": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "budget": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "cacheArtifact": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "cacheArtifactUsageEvent": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "codeChecks": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "concurrentBuilds": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "connect": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "connectConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "defaultDeploymentProtection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainAcceptDelegation": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainAuthCodes": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainCertificate": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainCheckConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainMove": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainPurchase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainRecord": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainTransferIn": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "event": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "ownEvent": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sensitiveEnvironmentVariablePolicy": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "fileUpload": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "flagsExplorerSubscription": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "gitRepository": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "ipBlocking": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "imageOptimizationNewPrice": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationAccount": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfigurationTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfigurationProjects": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationVercelConfigurationOverride": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfigurationRole": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationSSOSession": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationResource": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationEvent": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationResourceSecrets": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationDeploymentAction": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceInstallationMember": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceBillingData": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceInvoice": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceSettings": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceExperimentationItem": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceExperimentationEdgeConfigData": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "jobGlobal": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "drain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "logDrain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "traceDrain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "Monitoring": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringSettings": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringQuery": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringChart": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringAlert": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDeploymentFailed": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainExpire": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainMoved": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainPurchase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainRenewal": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainUnverified": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "NotificationMonitoringAlert": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationPaymentFailed": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationUsageAlert": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationPreferences": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationCustomerBudget": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationStatementOfReasons": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "alerts": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityNotebook": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityFunnel": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "openTelemetryEndpoint": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelAppInstallation": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelAppInstallationRequest": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "paymentMethod": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "permissions": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "postgres": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "previewDeploymentSuffix": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "proTrialOnboarding": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sharedEnvVars": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sharedEnvVarsProduction": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "space": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "spaceRun": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "passwordProtectionInvoiceItem": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "rateLimit": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "redis": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "repository": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "remoteCaching": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "samlConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "secret": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "redisStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "blobStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "postgresStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationResourceReplCommand": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "storeTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "supportCase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "supportCaseComment": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "dataCacheBillingSettings": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "team": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamAccessRequest": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamFellowMembership": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamGitExclusivity": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamInvite": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamInviteCode": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamJoin": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamMemberMfaStatus": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamMicrofrontends": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamOwnMembership": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamOwnMembershipDisconnectSAML": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "token": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "usage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "usageCycle": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vpcPeeringConnection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webAnalyticsPlan": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfigItem": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfigSchema": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfigToken": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webhook": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webhook-event": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "endpointVerification": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTransferIn": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "oauth2Application": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelRun": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelRunExec": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "apiKey": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "apiKeyOwnedBySelf": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "lastRollbackTarget": {
                      "nullable": true,
                      "type": "object"
                    },
                    "lastAliasRequest": {
                      "nullable": true,
                      "properties": {
                        "fromDeploymentId": {
                          "type": "string"
                        },
                        "toDeploymentId": {
                          "type": "string"
                        },
                        "fromRollingReleaseId": {
                          "type": "string",
                          "description": "If rolling back from a rolling release, fromDeploymentId captures the \"base\" of that rolling release, and fromRollingReleaseId captures the \"target\" of that rolling release."
                        },
                        "jobStatus": {
                          "type": "string",
                          "enum": [
                            "succeeded",
                            "failed",
                            "skipped",
                            "pending",
                            "in-progress"
                          ]
                        },
                        "requestedAt": {
                          "type": "number"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "promote",
                            "rollback"
                          ]
                        }
                      },
                      "required": [
                        "fromDeploymentId",
                        "toDeploymentId",
                        "jobStatus",
                        "requestedAt",
                        "type"
                      ],
                      "type": "object"
                    },
                    "protectionBypass": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "properties": {
                              "createdAt": {
                                "type": "number"
                              },
                              "createdBy": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "integration-automation-bypass"
                                ]
                              },
                              "integrationId": {
                                "type": "string"
                              },
                              "configurationId": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "createdAt",
                              "createdBy",
                              "scope",
                              "integrationId",
                              "configurationId"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "createdAt": {
                                "type": "number"
                              },
                              "createdBy": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "automation-bypass"
                                ]
                              }
                            },
                            "required": [
                              "createdAt",
                              "createdBy",
                              "scope"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": "object"
                    },
                    "hasActiveBranches": {
                      "type": "boolean"
                    },
                    "trustedIps": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "properties": {
                            "deploymentType": {
                              "type": "string",
                              "enum": [
                                "preview",
                                "production",
                                "all",
                                "prod_deployment_urls_and_all_previews",
                                "all_except_custom_domains"
                              ]
                            },
                            "addresses": {
                              "items": {
                                "properties": {
                                  "value": {
                                    "type": "string"
                                  },
                                  "note": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "value"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "protectionMode": {
                              "type": "string",
                              "enum": [
                                "additional",
                                "exclusive"
                              ]
                            }
                          },
                          "required": [
                            "deploymentType",
                            "addresses",
                            "protectionMode"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "deploymentType": {
                              "type": "string",
                              "enum": [
                                "preview",
                                "production",
                                "all",
                                "prod_deployment_urls_and_all_previews",
                                "all_except_custom_domains"
                              ]
                            }
                          },
                          "required": [
                            "deploymentType"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "gitComments": {
                      "properties": {
                        "onPullRequest": {
                          "type": "boolean",
                          "description": "Whether the Vercel bot should comment on PRs"
                        },
                        "onCommit": {
                          "type": "boolean",
                          "description": "Whether the Vercel bot should comment on commits"
                        }
                      },
                      "required": [
                        "onPullRequest",
                        "onCommit"
                      ],
                      "type": "object"
                    },
                    "gitProviderOptions": {
                      "properties": {
                        "createDeployments": {
                          "type": "string",
                          "enum": [
                            "enabled",
                            "disabled"
                          ],
                          "description": "Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead"
                        },
                        "disableRepositoryDispatchEvents": {
                          "type": "boolean",
                          "description": "Whether the Vercel bot should not automatically create GitHub repository-dispatch events on deployment events. https://vercel.com/docs/git/vercel-for-github#repository-dispatch-events"
                        }
                      },
                      "required": [
                        "createDeployments"
                      ],
                      "type": "object"
                    },
                    "paused": {
                      "type": "boolean"
                    },
                    "concurrencyBucketName": {
                      "type": "string"
                    },
                    "webAnalytics": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "disabledAt": {
                          "type": "number"
                        },
                        "canceledAt": {
                          "type": "number"
                        },
                        "enabledAt": {
                          "type": "number"
                        },
                        "hasData": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    "security": {
                      "properties": {
                        "attackModeEnabled": {
                          "type": "boolean"
                        },
                        "attackModeUpdatedAt": {
                          "type": "number"
                        },
                        "firewallEnabled": {
                          "type": "boolean"
                        },
                        "firewallUpdatedAt": {
                          "type": "number"
                        },
                        "attackModeActiveUntil": {
                          "nullable": true,
                          "type": "number"
                        },
                        "firewallConfigVersion": {
                          "type": "number"
                        },
                        "firewallSeawallEnabled": {
                          "type": "boolean"
                        },
                        "ja3Enabled": {
                          "type": "boolean"
                        },
                        "ja4Enabled": {
                          "type": "boolean"
                        },
                        "firewallBypassIps": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "managedRules": {
                          "nullable": true,
                          "properties": {
                            "bot_filter": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny"
                                  ]
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            },
                            "ai_bots": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny"
                                  ]
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            },
                            "owasp": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny"
                                  ]
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "bot_filter",
                            "ai_bots",
                            "owasp"
                          ],
                          "type": "object"
                        },
                        "botIdEnabled": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "oidcTokenConfig": {
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not to generate OpenID Connect JSON Web Tokens."
                        },
                        "issuerMode": {
                          "type": "string",
                          "enum": [
                            "team",
                            "global"
                          ],
                          "description": "- team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`"
                        }
                      },
                      "type": "object"
                    },
                    "tier": {
                      "type": "string",
                      "enum": [
                        "standard",
                        "advanced",
                        "critical"
                      ]
                    },
                    "features": {
                      "properties": {
                        "webAnalytics": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "v0": {
                      "type": "boolean"
                    },
                    "abuse": {
                      "properties": {
                        "scanner": {
                          "type": "string"
                        },
                        "history": {
                          "items": {
                            "properties": {
                              "scanner": {
                                "type": "string"
                              },
                              "reason": {
                                "type": "string"
                              },
                              "by": {
                                "type": "string"
                              },
                              "byId": {
                                "type": "string"
                              },
                              "at": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "scanner",
                              "reason",
                              "by",
                              "byId",
                              "at"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "block": {
                          "properties": {
                            "action": {
                              "type": "string",
                              "enum": [
                                "blocked"
                              ]
                            },
                            "reason": {
                              "type": "string"
                            },
                            "statusCode": {
                              "type": "number"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "caseId": {
                              "type": "string"
                            },
                            "actor": {
                              "type": "string"
                            },
                            "comment": {
                              "type": "string"
                            },
                            "isCascading": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "action",
                            "reason",
                            "statusCode",
                            "createdAt"
                          ],
                          "type": "object"
                        },
                        "blockHistory": {
                          "items": {
                            "oneOf": [
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "blocked"
                                    ]
                                  },
                                  "reason": {
                                    "type": "string"
                                  },
                                  "statusCode": {
                                    "type": "number"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "reason",
                                  "statusCode",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "unblocked"
                                    ]
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "route-blocked"
                                    ]
                                  },
                                  "route": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "src": {
                                            "type": "string"
                                          },
                                          "status": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "src",
                                          "status"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "has": {
                                            "items": {
                                              "oneOf": [
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "header"
                                                      ]
                                                    },
                                                    "key": {
                                                      "type": "string",
                                                      "enum": [
                                                        "x-vercel-ip-country"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "key",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                },
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "host"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                }
                                              ]
                                            },
                                            "type": "array"
                                          },
                                          "mitigate": {
                                            "properties": {
                                              "action": {
                                                "type": "string",
                                                "enum": [
                                                  "block_legal_cwc"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "action"
                                            ],
                                            "type": "object"
                                          },
                                          "src": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "has",
                                          "mitigate"
                                        ],
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  "reason": {
                                    "type": "string"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "route",
                                  "reason",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "route-unblocked"
                                    ]
                                  },
                                  "route": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "src": {
                                            "type": "string"
                                          },
                                          "status": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "src",
                                          "status"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "has": {
                                            "items": {
                                              "oneOf": [
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "header"
                                                      ]
                                                    },
                                                    "key": {
                                                      "type": "string",
                                                      "enum": [
                                                        "x-vercel-ip-country"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "key",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                },
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "host"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                }
                                              ]
                                            },
                                            "type": "array"
                                          },
                                          "mitigate": {
                                            "properties": {
                                              "action": {
                                                "type": "string",
                                                "enum": [
                                                  "block_legal_cwc"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "action"
                                            ],
                                            "type": "object"
                                          },
                                          "src": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "has",
                                          "mitigate"
                                        ],
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  "statusCode": {
                                    "type": "number"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "route",
                                  "createdAt"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "history",
                        "updatedAt"
                      ],
                      "type": "object"
                    },
                    "internalRoutes": {
                      "items": {
                        "oneOf": [
                          {
                            "properties": {
                              "src": {
                                "type": "string"
                              },
                              "status": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "src",
                              "status"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "has": {
                                "items": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "header"
                                          ]
                                        },
                                        "key": {
                                          "type": "string",
                                          "enum": [
                                            "x-vercel-ip-country"
                                          ]
                                        },
                                        "value": {
                                          "properties": {
                                            "eq": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "eq"
                                          ],
                                          "type": "object"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "key",
                                        "value"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "host"
                                          ]
                                        },
                                        "value": {
                                          "properties": {
                                            "eq": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "eq"
                                          ],
                                          "type": "object"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "value"
                                      ],
                                      "type": "object"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              "mitigate": {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "block_legal_cwc"
                                    ]
                                  }
                                },
                                "required": [
                                  "action"
                                ],
                                "type": "object"
                              },
                              "src": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "has",
                              "mitigate"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "accountId",
                    "directoryListing",
                    "id",
                    "name",
                    "nodeVersion",
                    "resourceConfig",
                    "defaultResourceConfig"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nAt least one environment variable failed validation\nThe Bitbucket Webhook for the project link could not be created\nThe Gitlab Webhook for the project link could not be created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated\nPro customers are allowed to deploy Serverless Functions to up to `proMaxRegions` regions, or if the project was created before the limit was introduced.\nDeploying to Serverless Functions to multiple regions requires a plan update"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "A project with the provided name already exists."
          },
          "428": {
            "description": "Owner does not have protection add-on"
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelRateLimitError"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "enablePreviewFeedback": {
                    "description": "Opt-in to preview toolbar on the project level",
                    "type": "boolean",
                    "nullable": true
                  },
                  "enableProductionFeedback": {
                    "description": "Opt-in to production toolbar on the project level",
                    "type": "boolean",
                    "nullable": true
                  },
                  "previewDeploymentsDisabled": {
                    "description": "Specifies whether preview deployments are disabled for this project.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "buildCommand": {
                    "description": "The build command for this project. When `null` is used this value will be automatically detected",
                    "maxLength": 256,
                    "type": "string",
                    "nullable": true
                  },
                  "commandForIgnoringBuildStep": {
                    "maxLength": 256,
                    "type": "string",
                    "nullable": true
                  },
                  "devCommand": {
                    "description": "The dev command for this project. When `null` is used this value will be automatically detected",
                    "maxLength": 256,
                    "type": "string",
                    "nullable": true
                  },
                  "environmentVariables": {
                    "description": "Collection of ENV Variables the Project will use",
                    "items": {
                      "properties": {
                        "key": {
                          "description": "Name of the ENV variable",
                          "type": "string"
                        },
                        "target": {
                          "description": "Deployment Target or Targets in which the ENV variable will be used",
                          "oneOf": [
                            {
                              "enum": [
                                "production",
                                "preview",
                                "development"
                              ]
                            },
                            {
                              "items": {
                                "enum": [
                                  "production",
                                  "preview",
                                  "development"
                                ]
                              },
                              "type": "array"
                            }
                          ]
                        },
                        "gitBranch": {
                          "description": "If defined, the git branch of the environment variable (must have target=preview)",
                          "type": "string",
                          "maxLength": 250
                        },
                        "type": {
                          "description": "Type of the ENV variable",
                          "enum": [
                            "system",
                            "secret",
                            "encrypted",
                            "plain",
                            "sensitive"
                          ],
                          "type": "string"
                        },
                        "value": {
                          "description": "Value for the ENV variable",
                          "type": "string"
                        }
                      },
                      "required": [
                        "key",
                        "value",
                        "target"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "framework": {
                    "description": "The framework that is being used for this project. When `null` is used no framework is selected",
                    "enum": [
                      null,
                      "blitzjs",
                      "nextjs",
                      "gatsby",
                      "remix",
                      "react-router",
                      "astro",
                      "hexo",
                      "eleventy",
                      "docusaurus-2",
                      "docusaurus",
                      "preact",
                      "solidstart-1",
                      "solidstart",
                      "dojo",
                      "ember",
                      "vue",
                      "scully",
                      "ionic-angular",
                      "angular",
                      "polymer",
                      "svelte",
                      "sveltekit",
                      "sveltekit-1",
                      "ionic-react",
                      "create-react-app",
                      "gridsome",
                      "umijs",
                      "sapper",
                      "saber",
                      "stencil",
                      "nuxtjs",
                      "redwoodjs",
                      "hugo",
                      "jekyll",
                      "brunch",
                      "middleman",
                      "zola",
                      "hydrogen",
                      "vite",
                      "vitepress",
                      "vuepress",
                      "parcel",
                      "fastapi",
                      "fasthtml",
                      "sanity-v3",
                      "sanity",
                      "storybook",
                      "nitro",
                      "hono",
                      "express",
                      "xmcp"
                    ]
                  },
                  "gitRepository": {
                    "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed",
                    "properties": {
                      "repo": {
                        "description": "The name of the git repository. For example: \\\"vercel/next.js\\\"",
                        "type": "string"
                      },
                      "type": {
                        "description": "The Git Provider of the repository",
                        "enum": [
                          "github",
                          "github-limited",
                          "gitlab",
                          "bitbucket"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "repo"
                    ],
                    "type": "object"
                  },
                  "installCommand": {
                    "description": "The install command for this project. When `null` is used this value will be automatically detected",
                    "maxLength": 256,
                    "type": "string",
                    "nullable": true
                  },
                  "name": {
                    "description": "The desired name for the project",
                    "example": "a-project-name",
                    "type": "string",
                    "maxLength": 100
                  },
                  "skipGitConnectDuringLink": {
                    "description": "Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.",
                    "type": "boolean",
                    "deprecated": true
                  },
                  "ssoProtection": {
                    "description": "The Vercel Auth setting for the project (historically named \\\"SSO Protection\\\")",
                    "type": "object",
                    "properties": {
                      "deploymentType": {
                        "type": "string",
                        "enum": [
                          "all",
                          "preview",
                          "prod_deployment_urls_and_all_previews",
                          "all_except_custom_domains"
                        ]
                      }
                    },
                    "required": [
                      "deploymentType"
                    ],
                    "nullable": true
                  },
                  "outputDirectory": {
                    "description": "The output directory of the project. When `null` is used this value will be automatically detected",
                    "maxLength": 256,
                    "type": "string",
                    "nullable": true
                  },
                  "publicSource": {
                    "description": "Specifies whether the source code and logs of the deployments for this project should be public or not",
                    "type": "boolean",
                    "nullable": true
                  },
                  "rootDirectory": {
                    "description": "The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root",
                    "maxLength": 256,
                    "type": "string",
                    "nullable": true
                  },
                  "serverlessFunctionRegion": {
                    "description": "The region to deploy Serverless Functions in this project",
                    "maxLength": 4,
                    "type": "string",
                    "nullable": true
                  },
                  "serverlessFunctionZeroConfigFailover": {
                    "description": "Specifies whether Zero Config Failover is enabled for this project.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      }
                    ]
                  },
                  "oidcTokenConfig": {
                    "description": "OpenID Connect JSON Web Token generation configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "enabled": {
                        "description": "Whether or not to generate OpenID Connect JSON Web Tokens.",
                        "deprecated": true,
                        "type": "boolean",
                        "default": true
                      },
                      "issuerMode": {
                        "description": "team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`",
                        "type": "string",
                        "enum": [
                          "team",
                          "global"
                        ],
                        "default": "team"
                      }
                    }
                  },
                  "enableAffectedProjectsDeployments": {
                    "description": "Opt-in to skip deployments when there are no changes to the root directory and its dependencies",
                    "type": "boolean"
                  },
                  "resourceConfig": {
                    "type": "object",
                    "description": "Specifies resource override configuration for the project",
                    "properties": {
                      "fluid": {
                        "type": "boolean"
                      },
                      "functionDefaultRegions": {
                        "description": "The regions to deploy Vercel Functions to for this project",
                        "type": "array",
                        "minItems": 1,
                        "uniqueItems": true,
                        "items": {
                          "type": "string",
                          "maxLength": 4
                        }
                      },
                      "functionDefaultTimeout": {
                        "type": "number",
                        "maximum": 900,
                        "minimum": 1
                      },
                      "functionDefaultMemoryType": {
                        "enum": [
                          "standard_legacy",
                          "standard",
                          "performance"
                        ]
                      },
                      "functionZeroConfigFailover": {
                        "description": "Specifies whether Zero Config Failover is enabled for this project.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          }
                        ]
                      },
                      "elasticConcurrencyEnabled": {
                        "type": "boolean"
                      },
                      "buildMachineType": {
                        "enum": [
                          "enhanced",
                          "turbo"
                        ]
                      },
                      "isNSNBDisabled": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v9/projects/{idOrName}": {
      "get": {
        "description": "Get the information for a specific project by passing either the project `id` or `name` in the URL.",
        "operationId": "getProject",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Find a project by id or name",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The project information",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "integrations": {
                      "items": {
                        "properties": {
                          "installationId": {
                            "type": "string",
                            "description": "The integration installation ID.",
                            "example": "icfg_3bwCLgxL8qt5kjRLcv2Dit7F"
                          },
                          "resources": {
                            "items": {
                              "properties": {
                                "externalResourceId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "externalResourceId"
                              ],
                              "type": "object",
                              "description": "The list of the installation resources connected to the project."
                            },
                            "type": "array",
                            "description": "The list of the installation resources connected to the project."
                          }
                        },
                        "required": [
                          "installationId"
                        ],
                        "type": "object",
                        "description": "Integration installation enabled on the project."
                      },
                      "type": "array"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "analytics": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "canceledAt": {
                          "nullable": true,
                          "type": "number"
                        },
                        "disabledAt": {
                          "type": "number"
                        },
                        "enabledAt": {
                          "type": "number"
                        },
                        "paidAt": {
                          "type": "number"
                        },
                        "sampleRatePercent": {
                          "nullable": true,
                          "type": "number"
                        },
                        "spendLimitInDollars": {
                          "nullable": true,
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "disabledAt",
                        "enabledAt"
                      ],
                      "type": "object"
                    },
                    "speedInsights": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "enabledAt": {
                          "type": "number"
                        },
                        "disabledAt": {
                          "type": "number"
                        },
                        "canceledAt": {
                          "type": "number"
                        },
                        "hasData": {
                          "type": "boolean"
                        },
                        "paidAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    "autoExposeSystemEnvs": {
                      "type": "boolean"
                    },
                    "autoAssignCustomDomains": {
                      "type": "boolean"
                    },
                    "autoAssignCustomDomainsUpdatedBy": {
                      "type": "string"
                    },
                    "buildCommand": {
                      "nullable": true,
                      "type": "string"
                    },
                    "commandForIgnoringBuildStep": {
                      "nullable": true,
                      "type": "string"
                    },
                    "connectConfigurations": {
                      "nullable": true,
                      "items": {
                        "properties": {
                          "envId": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "preview",
                                  "production"
                                ]
                              }
                            ]
                          },
                          "connectConfigurationId": {
                            "type": "string"
                          },
                          "dc": {
                            "type": "string"
                          },
                          "passive": {
                            "type": "boolean"
                          },
                          "buildsEnabled": {
                            "type": "boolean"
                          },
                          "aws": {
                            "properties": {
                              "subnetIds": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "securityGroupId": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "subnetIds",
                              "securityGroupId"
                            ],
                            "type": "object"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "envId",
                          "connectConfigurationId",
                          "passive",
                          "buildsEnabled",
                          "createdAt",
                          "updatedAt"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "connectConfigurationId": {
                      "nullable": true,
                      "type": "string"
                    },
                    "connectBuildsEnabled": {
                      "type": "boolean"
                    },
                    "passiveConnectConfigurationId": {
                      "nullable": true,
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "customerSupportCodeVisibility": {
                      "type": "boolean"
                    },
                    "crons": {
                      "properties": {
                        "enabledAt": {
                          "type": "number",
                          "description": "The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs."
                        },
                        "disabledAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "The time the feature was disabled for this project."
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "deploymentId": {
                          "nullable": true,
                          "type": "string",
                          "description": "The ID of the Deployment from which the definitions originated."
                        },
                        "definitions": {
                          "items": {
                            "properties": {
                              "host": {
                                "type": "string",
                                "description": "The hostname that should be used.",
                                "example": "vercel.com"
                              },
                              "path": {
                                "type": "string",
                                "description": "The path that should be called for the cronjob.",
                                "example": "/api/crons/sync-something?hello=world"
                              },
                              "schedule": {
                                "type": "string",
                                "description": "The cron expression.",
                                "example": "0 0 * * *"
                              }
                            },
                            "required": [
                              "host",
                              "path",
                              "schedule"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "enabledAt",
                        "disabledAt",
                        "updatedAt",
                        "deploymentId",
                        "definitions"
                      ],
                      "type": "object"
                    },
                    "dataCache": {
                      "properties": {
                        "userDisabled": {
                          "type": "boolean"
                        },
                        "storageSizeBytes": {
                          "nullable": true,
                          "type": "number"
                        },
                        "unlimited": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "userDisabled"
                      ],
                      "type": "object"
                    },
                    "deploymentExpiration": {
                      "nullable": true,
                      "properties": {
                        "expirationDays": {
                          "type": "number",
                          "description": "Number of days to keep non-production deployments (mostly preview deployments) before soft deletion."
                        },
                        "expirationDaysProduction": {
                          "type": "number",
                          "description": "Number of days to keep production deployments before soft deletion."
                        },
                        "expirationDaysCanceled": {
                          "type": "number",
                          "description": "Number of days to keep canceled deployments before soft deletion."
                        },
                        "expirationDaysErrored": {
                          "type": "number",
                          "description": "Number of days to keep errored deployments before soft deletion."
                        },
                        "deploymentsToKeep": {
                          "type": "number",
                          "description": "Minimum number of production deployments to keep for this project, even if they are over the production expiration limit."
                        }
                      },
                      "type": "object",
                      "description": "Retention policies for deployments. These are enforced at the project level, but we also maintain an instance of this at the team level as a default policy that gets applied to new projects."
                    },
                    "devCommand": {
                      "nullable": true,
                      "type": "string"
                    },
                    "directoryListing": {
                      "type": "boolean"
                    },
                    "installCommand": {
                      "nullable": true,
                      "type": "string"
                    },
                    "env": {
                      "items": {
                        "properties": {
                          "target": {
                            "oneOf": [
                              {
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "production",
                                    "preview",
                                    "development",
                                    "preview",
                                    "development"
                                  ]
                                },
                                "type": "array"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "production",
                                  "preview",
                                  "development"
                                ]
                              }
                            ]
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "system",
                              "encrypted",
                              "plain",
                              "sensitive",
                              "secret"
                            ]
                          },
                          "sunsetSecretId": {
                            "type": "string",
                            "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                          },
                          "decrypted": {
                            "type": "boolean"
                          },
                          "value": {
                            "type": "string"
                          },
                          "vsmValue": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "key": {
                            "type": "string"
                          },
                          "configurationId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          },
                          "createdBy": {
                            "nullable": true,
                            "type": "string"
                          },
                          "updatedBy": {
                            "nullable": true,
                            "type": "string"
                          },
                          "gitBranch": {
                            "type": "string"
                          },
                          "edgeConfigId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "edgeConfigTokenId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "contentHint": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-read-only-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "blob-read-write-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url-non-pooling"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-prisma-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-user"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-host"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-password"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-database"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url-no-ssl"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "integration-store-secret"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  },
                                  "integrationId": {
                                    "type": "string"
                                  },
                                  "integrationProductId": {
                                    "type": "string"
                                  },
                                  "integrationConfigurationId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId",
                                  "integrationId",
                                  "integrationProductId",
                                  "integrationConfigurationId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "flags-connection-string"
                                    ]
                                  },
                                  "projectId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "projectId"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "internalContentHint": {
                            "nullable": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "flags-secret"
                                ]
                              },
                              "encryptedValue": {
                                "type": "string",
                                "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                              }
                            },
                            "required": [
                              "type",
                              "encryptedValue"
                            ],
                            "type": "object",
                            "description": "Similar to `contentHints`, but should not be exposed to the user."
                          },
                          "comment": {
                            "type": "string"
                          },
                          "customEnvironmentIds": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "type",
                          "value",
                          "key"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "customEnvironments": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier for the custom environment (format: env_*)"
                          },
                          "slug": {
                            "type": "string",
                            "description": "URL-friendly name of the environment"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "preview",
                              "production",
                              "development"
                            ],
                            "description": "The type of environment (production, preview, or development)"
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional description of the environment's purpose"
                          },
                          "branchMatcher": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "endsWith",
                                  "startsWith",
                                  "equals"
                                ],
                                "description": "The type of matching to perform"
                              },
                              "pattern": {
                                "type": "string",
                                "description": "The pattern to match against branch names"
                              }
                            },
                            "required": [
                              "type",
                              "pattern"
                            ],
                            "type": "object",
                            "description": "Configuration for matching git branches to this environment"
                          },
                          "domains": {
                            "items": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "apexName": {
                                  "type": "string"
                                },
                                "projectId": {
                                  "type": "string"
                                },
                                "redirect": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "redirectStatusCode": {
                                  "nullable": true,
                                  "type": "number",
                                  "enum": [
                                    307,
                                    301,
                                    302,
                                    308
                                  ]
                                },
                                "gitBranch": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "customEnvironmentId": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "updatedAt": {
                                  "type": "number"
                                },
                                "createdAt": {
                                  "type": "number"
                                },
                                "verified": {
                                  "type": "boolean",
                                  "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                                },
                                "verification": {
                                  "items": {
                                    "properties": {
                                      "type": {
                                        "type": "string"
                                      },
                                      "domain": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "type": "string"
                                      },
                                      "reason": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "domain",
                                      "value",
                                      "reason"
                                    ],
                                    "type": "object",
                                    "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                  },
                                  "type": "array",
                                  "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                }
                              },
                              "required": [
                                "name",
                                "apexName",
                                "projectId",
                                "verified"
                              ],
                              "type": "object",
                              "description": "List of domains associated with this environment"
                            },
                            "type": "array",
                            "description": "List of domains associated with this environment"
                          },
                          "currentDeploymentAliases": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "List of aliases for the current deployment"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "Timestamp when the environment was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "Timestamp when the environment was last updated"
                          }
                        },
                        "required": [
                          "id",
                          "slug",
                          "type",
                          "createdAt",
                          "updatedAt"
                        ],
                        "type": "object",
                        "description": "Internal representation of a custom environment with all required properties"
                      },
                      "type": "array"
                    },
                    "framework": {
                      "nullable": true,
                      "type": "string",
                      "enum": [
                        "blitzjs",
                        "nextjs",
                        "gatsby",
                        "remix",
                        "react-router",
                        "astro",
                        "hexo",
                        "eleventy",
                        "docusaurus-2",
                        "docusaurus",
                        "preact",
                        "solidstart-1",
                        "solidstart",
                        "dojo",
                        "ember",
                        "vue",
                        "scully",
                        "ionic-angular",
                        "angular",
                        "polymer",
                        "svelte",
                        "sveltekit",
                        "sveltekit-1",
                        "ionic-react",
                        "create-react-app",
                        "gridsome",
                        "umijs",
                        "sapper",
                        "saber",
                        "stencil",
                        "nuxtjs",
                        "redwoodjs",
                        "hugo",
                        "jekyll",
                        "brunch",
                        "middleman",
                        "zola",
                        "hydrogen",
                        "vite",
                        "vitepress",
                        "vuepress",
                        "parcel",
                        "fastapi",
                        "fasthtml",
                        "sanity-v3",
                        "sanity",
                        "storybook",
                        "nitro",
                        "hono",
                        "express",
                        "xmcp"
                      ]
                    },
                    "gitForkProtection": {
                      "type": "boolean"
                    },
                    "gitLFS": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    },
                    "ipBuckets": {
                      "items": {
                        "properties": {
                          "bucket": {
                            "type": "string"
                          },
                          "supportUntil": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "bucket"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "latestDeployments": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "alias": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "aliasAssigned": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "boolean"
                              }
                            ]
                          },
                          "aliasError": {
                            "nullable": true,
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "code",
                              "message"
                            ],
                            "type": "object"
                          },
                          "aliasFinal": {
                            "nullable": true,
                            "type": "string"
                          },
                          "automaticAliases": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "branchMatcher": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "endsWith",
                                  "startsWith",
                                  "equals"
                                ],
                                "description": "The type of matching to perform"
                              },
                              "pattern": {
                                "type": "string",
                                "description": "The pattern to match against branch names"
                              }
                            },
                            "required": [
                              "type",
                              "pattern"
                            ],
                            "type": "object"
                          },
                          "buildingAt": {
                            "type": "number"
                          },
                          "builds": {
                            "items": {
                              "properties": {
                                "use": {
                                  "type": "string"
                                },
                                "src": {
                                  "type": "string"
                                },
                                "dest": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "use"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "checksConclusion": {
                            "type": "string",
                            "enum": [
                              "succeeded",
                              "failed",
                              "skipped",
                              "canceled"
                            ]
                          },
                          "checksState": {
                            "type": "string",
                            "enum": [
                              "registered",
                              "running",
                              "completed"
                            ]
                          },
                          "connectBuildsEnabled": {
                            "type": "boolean"
                          },
                          "connectConfigurationId": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "createdIn": {
                            "type": "string"
                          },
                          "creator": {
                            "nullable": true,
                            "properties": {
                              "email": {
                                "type": "string"
                              },
                              "githubLogin": {
                                "type": "string"
                              },
                              "gitlabLogin": {
                                "type": "string"
                              },
                              "uid": {
                                "type": "string"
                              },
                              "username": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "email",
                              "uid",
                              "username"
                            ],
                            "type": "object"
                          },
                          "deletedAt": {
                            "type": "number"
                          },
                          "deploymentHostname": {
                            "type": "string"
                          },
                          "forced": {
                            "type": "boolean"
                          },
                          "name": {
                            "type": "string"
                          },
                          "meta": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "monorepoManager": {
                            "nullable": true,
                            "type": "string"
                          },
                          "oidcTokenClaims": {
                            "properties": {
                              "iss": {
                                "type": "string"
                              },
                              "sub": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string"
                              },
                              "aud": {
                                "type": "string"
                              },
                              "owner": {
                                "type": "string"
                              },
                              "owner_id": {
                                "type": "string"
                              },
                              "project": {
                                "type": "string"
                              },
                              "project_id": {
                                "type": "string"
                              },
                              "environment": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "iss",
                              "sub",
                              "scope",
                              "aud",
                              "owner",
                              "owner_id",
                              "project",
                              "project_id",
                              "environment"
                            ],
                            "type": "object"
                          },
                          "plan": {
                            "type": "string",
                            "enum": [
                              "pro",
                              "enterprise",
                              "hobby"
                            ]
                          },
                          "previewCommentsEnabled": {
                            "type": "boolean",
                            "description": "Whether or not preview comments are enabled for the deployment",
                            "example": false
                          },
                          "private": {
                            "type": "boolean"
                          },
                          "readyAt": {
                            "type": "number"
                          },
                          "readyState": {
                            "type": "string",
                            "enum": [
                              "BUILDING",
                              "ERROR",
                              "INITIALIZING",
                              "QUEUED",
                              "READY",
                              "CANCELED"
                            ]
                          },
                          "readySubstate": {
                            "type": "string",
                            "enum": [
                              "STAGED",
                              "ROLLING",
                              "PROMOTED"
                            ]
                          },
                          "requestedAt": {
                            "type": "number"
                          },
                          "target": {
                            "nullable": true,
                            "type": "string"
                          },
                          "teamId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "LAMBDAS"
                            ]
                          },
                          "url": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "withCache": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "createdIn",
                          "creator",
                          "deploymentHostname",
                          "name",
                          "plan",
                          "private",
                          "readyState",
                          "type",
                          "url",
                          "userId"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "link": {
                      "oneOf": [
                        {
                          "properties": {
                            "org": {
                              "type": "string"
                            },
                            "repoOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "github"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "org",
                            "type",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-limited"
                              ]
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "org": {
                              "type": "string"
                            },
                            "repoOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "org",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "org": {
                              "type": "string"
                            },
                            "repoOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-custom-host"
                              ]
                            },
                            "host": {
                              "type": "string"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "org",
                            "type",
                            "host",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "projectId": {
                              "type": "string"
                            },
                            "projectName": {
                              "type": "string"
                            },
                            "projectNameWithNamespace": {
                              "type": "string"
                            },
                            "projectNamespace": {
                              "type": "string"
                            },
                            "projectOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels)."
                            },
                            "projectUrl": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "gitlab"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "projectId",
                            "projectName",
                            "projectNameWithNamespace",
                            "projectNamespace",
                            "projectUrl",
                            "type",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            },
                            "owner": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "bitbucket"
                              ]
                            },
                            "uuid": {
                              "type": "string"
                            },
                            "workspaceUuid": {
                              "type": "string"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "slug",
                            "owner",
                            "type",
                            "uuid",
                            "workspaceUuid",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "microfrontends": {
                      "oneOf": [
                        {
                          "properties": {
                            "updatedAt": {
                              "type": "number",
                              "description": "Timestamp when the microfrontends settings were last updated."
                            },
                            "groupIds": {
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                              "description": "The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together."
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "Whether microfrontends are enabled for this project."
                            },
                            "isDefaultApp": {
                              "type": "boolean",
                              "description": "Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends."
                            },
                            "defaultRoute": {
                              "type": "string",
                              "description": "A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`"
                            },
                            "routeObservabilityToThisProject": {
                              "type": "boolean",
                              "description": "Whether observability data should be routed to this microfrontend project or a root project."
                            }
                          },
                          "required": [
                            "updatedAt",
                            "groupIds",
                            "enabled"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "updatedAt": {
                              "type": "number"
                            },
                            "groupIds": {
                              "items": {
                                "oneOf": []
                              },
                              "maxItems": 0,
                              "minItems": 0,
                              "type": "array"
                            },
                            "enabled": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "updatedAt",
                            "groupIds",
                            "enabled"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "nodeVersion": {
                      "type": "string",
                      "enum": [
                        "22.x",
                        "20.x",
                        "18.x",
                        "16.x",
                        "14.x",
                        "12.x",
                        "10.x",
                        "8.10.x"
                      ]
                    },
                    "optionsAllowlist": {
                      "nullable": true,
                      "properties": {
                        "paths": {
                          "items": {
                            "properties": {
                              "value": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "value"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "paths"
                      ],
                      "type": "object"
                    },
                    "outputDirectory": {
                      "nullable": true,
                      "type": "string"
                    },
                    "passwordProtection": {
                      "nullable": true,
                      "type": "object"
                    },
                    "productionDeploymentsFastLane": {
                      "type": "boolean"
                    },
                    "publicSource": {
                      "nullable": true,
                      "type": "boolean"
                    },
                    "resourceConfig": {
                      "properties": {
                        "elasticConcurrencyEnabled": {
                          "type": "boolean"
                        },
                        "fluid": {
                          "type": "boolean"
                        },
                        "functionDefaultRegions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "functionDefaultTimeout": {
                          "type": "number"
                        },
                        "functionDefaultMemoryType": {
                          "type": "string",
                          "enum": [
                            "standard_legacy",
                            "standard",
                            "performance"
                          ]
                        },
                        "functionZeroConfigFailover": {
                          "type": "boolean"
                        },
                        "buildMachineType": {
                          "type": "string",
                          "enum": [
                            "enhanced",
                            "turbo"
                          ]
                        },
                        "isNSNBDisabled": {
                          "type": "boolean"
                        }
                      },
                      "type": "object",
                      "required": [
                        "functionDefaultRegions"
                      ]
                    },
                    "rollbackDescription": {
                      "properties": {
                        "userId": {
                          "type": "string",
                          "description": "The user who rolled back the project."
                        },
                        "username": {
                          "type": "string",
                          "description": "The username of the user who rolled back the project."
                        },
                        "description": {
                          "type": "string",
                          "description": "User-supplied explanation of why they rolled back the project. Limited to 250 characters."
                        },
                        "createdAt": {
                          "type": "number",
                          "description": "Timestamp of when the rollback was requested."
                        }
                      },
                      "required": [
                        "userId",
                        "username",
                        "description",
                        "createdAt"
                      ],
                      "type": "object",
                      "description": "Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback."
                    },
                    "rollingRelease": {
                      "nullable": true,
                      "properties": {
                        "target": {
                          "type": "string",
                          "description": "The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.",
                          "example": "production"
                        },
                        "stages": {
                          "nullable": true,
                          "items": {
                            "properties": {
                              "targetPercentage": {
                                "type": "number",
                                "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                                "example": 25
                              },
                              "requireApproval": {
                                "type": "boolean",
                                "description": "Whether or not this stage requires manual approval to proceed",
                                "example": false
                              },
                              "duration": {
                                "type": "number",
                                "description": "Duration in minutes for automatic advancement to the next stage",
                                "example": 600
                              }
                            },
                            "required": [
                              "targetPercentage"
                            ],
                            "type": "object",
                            "description": "An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100."
                          },
                          "type": "array",
                          "description": "An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100."
                        },
                        "canaryResponseHeader": {
                          "type": "boolean",
                          "description": "Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.",
                          "example": false
                        }
                      },
                      "required": [
                        "target"
                      ],
                      "type": "object",
                      "description": "Project-level rolling release configuration that defines how deployments should be gradually rolled out"
                    },
                    "defaultResourceConfig": {
                      "properties": {
                        "elasticConcurrencyEnabled": {
                          "type": "boolean"
                        },
                        "fluid": {
                          "type": "boolean"
                        },
                        "functionDefaultRegions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "functionDefaultTimeout": {
                          "type": "number"
                        },
                        "functionDefaultMemoryType": {
                          "type": "string",
                          "enum": [
                            "standard_legacy",
                            "standard",
                            "performance"
                          ]
                        },
                        "functionZeroConfigFailover": {
                          "type": "boolean"
                        },
                        "buildMachineType": {
                          "type": "string",
                          "enum": [
                            "enhanced",
                            "turbo"
                          ]
                        },
                        "isNSNBDisabled": {
                          "type": "boolean"
                        }
                      },
                      "type": "object",
                      "required": [
                        "functionDefaultRegions"
                      ]
                    },
                    "rootDirectory": {
                      "nullable": true,
                      "type": "string"
                    },
                    "serverlessFunctionZeroConfigFailover": {
                      "type": "boolean"
                    },
                    "skewProtectionBoundaryAt": {
                      "type": "number"
                    },
                    "skewProtectionMaxAge": {
                      "type": "number"
                    },
                    "skipGitConnectDuringLink": {
                      "type": "boolean"
                    },
                    "sourceFilesOutsideRootDirectory": {
                      "type": "boolean"
                    },
                    "enableAffectedProjectsDeployments": {
                      "type": "boolean"
                    },
                    "ssoProtection": {
                      "nullable": true,
                      "properties": {
                        "deploymentType": {
                          "type": "string",
                          "enum": [
                            "preview",
                            "all",
                            "prod_deployment_urls_and_all_previews",
                            "all_except_custom_domains"
                          ]
                        }
                      },
                      "required": [
                        "deploymentType"
                      ],
                      "type": "object"
                    },
                    "targets": {
                      "additionalProperties": {
                        "nullable": true,
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "alias": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "aliasAssigned": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "boolean"
                              }
                            ]
                          },
                          "aliasError": {
                            "nullable": true,
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "code",
                              "message"
                            ],
                            "type": "object"
                          },
                          "aliasFinal": {
                            "nullable": true,
                            "type": "string"
                          },
                          "automaticAliases": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "branchMatcher": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "endsWith",
                                  "startsWith",
                                  "equals"
                                ],
                                "description": "The type of matching to perform"
                              },
                              "pattern": {
                                "type": "string",
                                "description": "The pattern to match against branch names"
                              }
                            },
                            "required": [
                              "type",
                              "pattern"
                            ],
                            "type": "object"
                          },
                          "buildingAt": {
                            "type": "number"
                          },
                          "builds": {
                            "items": {
                              "properties": {
                                "use": {
                                  "type": "string"
                                },
                                "src": {
                                  "type": "string"
                                },
                                "dest": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "use"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "checksConclusion": {
                            "type": "string",
                            "enum": [
                              "succeeded",
                              "failed",
                              "skipped",
                              "canceled"
                            ]
                          },
                          "checksState": {
                            "type": "string",
                            "enum": [
                              "registered",
                              "running",
                              "completed"
                            ]
                          },
                          "connectBuildsEnabled": {
                            "type": "boolean"
                          },
                          "connectConfigurationId": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "createdIn": {
                            "type": "string"
                          },
                          "creator": {
                            "nullable": true,
                            "properties": {
                              "email": {
                                "type": "string"
                              },
                              "githubLogin": {
                                "type": "string"
                              },
                              "gitlabLogin": {
                                "type": "string"
                              },
                              "uid": {
                                "type": "string"
                              },
                              "username": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "email",
                              "uid",
                              "username"
                            ],
                            "type": "object"
                          },
                          "deletedAt": {
                            "type": "number"
                          },
                          "deploymentHostname": {
                            "type": "string"
                          },
                          "forced": {
                            "type": "boolean"
                          },
                          "name": {
                            "type": "string"
                          },
                          "meta": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "monorepoManager": {
                            "nullable": true,
                            "type": "string"
                          },
                          "oidcTokenClaims": {
                            "properties": {
                              "iss": {
                                "type": "string"
                              },
                              "sub": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string"
                              },
                              "aud": {
                                "type": "string"
                              },
                              "owner": {
                                "type": "string"
                              },
                              "owner_id": {
                                "type": "string"
                              },
                              "project": {
                                "type": "string"
                              },
                              "project_id": {
                                "type": "string"
                              },
                              "environment": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "iss",
                              "sub",
                              "scope",
                              "aud",
                              "owner",
                              "owner_id",
                              "project",
                              "project_id",
                              "environment"
                            ],
                            "type": "object"
                          },
                          "plan": {
                            "type": "string",
                            "enum": [
                              "pro",
                              "enterprise",
                              "hobby"
                            ]
                          },
                          "previewCommentsEnabled": {
                            "type": "boolean",
                            "description": "Whether or not preview comments are enabled for the deployment",
                            "example": false
                          },
                          "private": {
                            "type": "boolean"
                          },
                          "readyAt": {
                            "type": "number"
                          },
                          "readyState": {
                            "type": "string",
                            "enum": [
                              "BUILDING",
                              "ERROR",
                              "INITIALIZING",
                              "QUEUED",
                              "READY",
                              "CANCELED"
                            ]
                          },
                          "readySubstate": {
                            "type": "string",
                            "enum": [
                              "STAGED",
                              "ROLLING",
                              "PROMOTED"
                            ]
                          },
                          "requestedAt": {
                            "type": "number"
                          },
                          "target": {
                            "nullable": true,
                            "type": "string"
                          },
                          "teamId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "LAMBDAS"
                            ]
                          },
                          "url": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "withCache": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "createdIn",
                          "creator",
                          "deploymentHostname",
                          "name",
                          "plan",
                          "private",
                          "readyState",
                          "type",
                          "url",
                          "userId"
                        ],
                        "type": "object"
                      },
                      "type": "object"
                    },
                    "transferCompletedAt": {
                      "type": "number"
                    },
                    "transferStartedAt": {
                      "type": "number"
                    },
                    "transferToAccountId": {
                      "type": "string"
                    },
                    "transferredFromAccountId": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "live": {
                      "type": "boolean"
                    },
                    "enablePreviewFeedback": {
                      "nullable": true,
                      "type": "boolean"
                    },
                    "enableProductionFeedback": {
                      "nullable": true,
                      "type": "boolean"
                    },
                    "permissions": {
                      "properties": {
                        "oauth2Connection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "user": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "userConnection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "userSudo": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webAuthn": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "accessGroup": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "aliasGlobal": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "analyticsSampling": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "analyticsUsage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "auditLog": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingAddress": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInformation": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInvoice": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInvoiceEmailRecipient": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInvoiceLanguage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingPlan": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingPurchaseOrder": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingRefund": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingTaxId": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "blob": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "budget": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "cacheArtifact": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "cacheArtifactUsageEvent": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "codeChecks": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "concurrentBuilds": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "connect": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "connectConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "defaultDeploymentProtection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainAcceptDelegation": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainAuthCodes": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainCertificate": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainCheckConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainMove": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainPurchase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainRecord": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainTransferIn": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "event": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "ownEvent": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sensitiveEnvironmentVariablePolicy": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "fileUpload": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "flagsExplorerSubscription": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "gitRepository": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "ipBlocking": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "imageOptimizationNewPrice": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationAccount": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfigurationTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfigurationProjects": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationVercelConfigurationOverride": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfigurationRole": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationSSOSession": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationResource": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationEvent": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationResourceSecrets": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationDeploymentAction": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceInstallationMember": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceBillingData": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceInvoice": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceSettings": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceExperimentationItem": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceExperimentationEdgeConfigData": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "jobGlobal": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "drain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "logDrain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "traceDrain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "Monitoring": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringSettings": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringQuery": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringChart": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringAlert": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDeploymentFailed": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainExpire": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainMoved": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainPurchase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainRenewal": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainUnverified": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "NotificationMonitoringAlert": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationPaymentFailed": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationUsageAlert": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationPreferences": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationCustomerBudget": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationStatementOfReasons": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "alerts": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityNotebook": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityFunnel": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "openTelemetryEndpoint": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelAppInstallation": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelAppInstallationRequest": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "paymentMethod": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "permissions": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "postgres": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "previewDeploymentSuffix": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "proTrialOnboarding": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sharedEnvVars": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sharedEnvVarsProduction": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "space": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "spaceRun": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "passwordProtectionInvoiceItem": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "rateLimit": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "redis": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "repository": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "remoteCaching": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "samlConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "secret": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "redisStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "blobStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "postgresStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationResourceReplCommand": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "storeTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "supportCase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "supportCaseComment": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "dataCacheBillingSettings": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "team": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamAccessRequest": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamFellowMembership": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamGitExclusivity": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamInvite": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamInviteCode": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamJoin": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamMemberMfaStatus": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamMicrofrontends": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamOwnMembership": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamOwnMembershipDisconnectSAML": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "token": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "usage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "usageCycle": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vpcPeeringConnection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webAnalyticsPlan": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfigItem": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfigSchema": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfigToken": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webhook": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webhook-event": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "endpointVerification": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTransferIn": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "oauth2Application": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelRun": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelRunExec": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "apiKey": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "apiKeyOwnedBySelf": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "aliasProject": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "aliasProtectionBypass": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "buildMachine": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "productionAliasProtectionBypass": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "connectConfigurationLink": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "dataCacheNamespace": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deployment": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentBuildLogs": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentCheck": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentCheckPreview": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentCheckReRunFromProductionBranch": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentProductionGit": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentV0": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentPreview": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentPrivate": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentPromote": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentRollback": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeCacheNamespace": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "environments": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "logs": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "logsPreset": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "passwordProtection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "optionsAllowlist": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "job": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityData": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "onDemandBuild": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "onDemandConcurrency": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "project": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectFromV0": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectAccessGroup": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectAnalyticsSampling": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectCheck": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectCheckRun": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDeploymentHook": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDomain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDomainMove": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDomainCheckConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectEnvVars": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectEnvVarsProduction": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectEnvVarsUnownedByIntegration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectFlags": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectId": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectIntegrationConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectLink": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectMember": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectMonitoring": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectPermissions": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectProductionBranch": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTransferOut": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectProtectionBypass": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectUsage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectAnalyticsUsage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectSupportCase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectSupportCaseComment": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDeploymentExpiration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectRollingRelease": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTier": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectOIDCToken": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "seawallConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "skewProtection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "analytics": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "trustedIps": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "v0Chat": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webAnalytics": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sharedEnvVarConnection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sonar": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "lastRollbackTarget": {
                      "nullable": true,
                      "type": "object"
                    },
                    "lastAliasRequest": {
                      "nullable": true,
                      "properties": {
                        "fromDeploymentId": {
                          "type": "string"
                        },
                        "toDeploymentId": {
                          "type": "string"
                        },
                        "fromRollingReleaseId": {
                          "type": "string",
                          "description": "If rolling back from a rolling release, fromDeploymentId captures the \"base\" of that rolling release, and fromRollingReleaseId captures the \"target\" of that rolling release."
                        },
                        "jobStatus": {
                          "type": "string",
                          "enum": [
                            "succeeded",
                            "failed",
                            "skipped",
                            "pending",
                            "in-progress"
                          ]
                        },
                        "requestedAt": {
                          "type": "number"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "promote",
                            "rollback"
                          ]
                        }
                      },
                      "required": [
                        "fromDeploymentId",
                        "toDeploymentId",
                        "jobStatus",
                        "requestedAt",
                        "type"
                      ],
                      "type": "object"
                    },
                    "protectionBypass": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "properties": {
                              "createdAt": {
                                "type": "number"
                              },
                              "createdBy": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "integration-automation-bypass"
                                ]
                              },
                              "integrationId": {
                                "type": "string"
                              },
                              "configurationId": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "createdAt",
                              "createdBy",
                              "scope",
                              "integrationId",
                              "configurationId"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "createdAt": {
                                "type": "number"
                              },
                              "createdBy": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "automation-bypass"
                                ]
                              }
                            },
                            "required": [
                              "createdAt",
                              "createdBy",
                              "scope"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": "object"
                    },
                    "hasActiveBranches": {
                      "type": "boolean"
                    },
                    "trustedIps": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "properties": {
                            "deploymentType": {
                              "type": "string",
                              "enum": [
                                "preview",
                                "production",
                                "all",
                                "prod_deployment_urls_and_all_previews",
                                "all_except_custom_domains"
                              ]
                            },
                            "addresses": {
                              "items": {
                                "properties": {
                                  "value": {
                                    "type": "string"
                                  },
                                  "note": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "value"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "protectionMode": {
                              "type": "string",
                              "enum": [
                                "additional",
                                "exclusive"
                              ]
                            }
                          },
                          "required": [
                            "deploymentType",
                            "addresses",
                            "protectionMode"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "deploymentType": {
                              "type": "string",
                              "enum": [
                                "preview",
                                "production",
                                "all",
                                "prod_deployment_urls_and_all_previews",
                                "all_except_custom_domains"
                              ]
                            }
                          },
                          "required": [
                            "deploymentType"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "gitComments": {
                      "properties": {
                        "onPullRequest": {
                          "type": "boolean",
                          "description": "Whether the Vercel bot should comment on PRs"
                        },
                        "onCommit": {
                          "type": "boolean",
                          "description": "Whether the Vercel bot should comment on commits"
                        }
                      },
                      "required": [
                        "onPullRequest",
                        "onCommit"
                      ],
                      "type": "object"
                    },
                    "gitProviderOptions": {
                      "properties": {
                        "createDeployments": {
                          "type": "string",
                          "enum": [
                            "enabled",
                            "disabled"
                          ],
                          "description": "Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead"
                        },
                        "disableRepositoryDispatchEvents": {
                          "type": "boolean",
                          "description": "Whether the Vercel bot should not automatically create GitHub repository-dispatch events on deployment events. https://vercel.com/docs/git/vercel-for-github#repository-dispatch-events"
                        }
                      },
                      "required": [
                        "createDeployments"
                      ],
                      "type": "object"
                    },
                    "paused": {
                      "type": "boolean"
                    },
                    "concurrencyBucketName": {
                      "type": "string"
                    },
                    "webAnalytics": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "disabledAt": {
                          "type": "number"
                        },
                        "canceledAt": {
                          "type": "number"
                        },
                        "enabledAt": {
                          "type": "number"
                        },
                        "hasData": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    "security": {
                      "properties": {
                        "attackModeEnabled": {
                          "type": "boolean"
                        },
                        "attackModeUpdatedAt": {
                          "type": "number"
                        },
                        "firewallEnabled": {
                          "type": "boolean"
                        },
                        "firewallUpdatedAt": {
                          "type": "number"
                        },
                        "attackModeActiveUntil": {
                          "nullable": true,
                          "type": "number"
                        },
                        "firewallConfigVersion": {
                          "type": "number"
                        },
                        "firewallSeawallEnabled": {
                          "type": "boolean"
                        },
                        "ja3Enabled": {
                          "type": "boolean"
                        },
                        "ja4Enabled": {
                          "type": "boolean"
                        },
                        "firewallBypassIps": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "managedRules": {
                          "nullable": true,
                          "properties": {
                            "bot_filter": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny"
                                  ]
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            },
                            "ai_bots": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny"
                                  ]
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            },
                            "owasp": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny"
                                  ]
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "bot_filter",
                            "ai_bots",
                            "owasp"
                          ],
                          "type": "object"
                        },
                        "botIdEnabled": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "oidcTokenConfig": {
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not to generate OpenID Connect JSON Web Tokens."
                        },
                        "issuerMode": {
                          "type": "string",
                          "enum": [
                            "team",
                            "global"
                          ],
                          "description": "- team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`"
                        }
                      },
                      "type": "object"
                    },
                    "tier": {
                      "type": "string",
                      "enum": [
                        "standard",
                        "advanced",
                        "critical"
                      ]
                    },
                    "features": {
                      "properties": {
                        "webAnalytics": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "v0": {
                      "type": "boolean"
                    },
                    "abuse": {
                      "properties": {
                        "scanner": {
                          "type": "string"
                        },
                        "history": {
                          "items": {
                            "properties": {
                              "scanner": {
                                "type": "string"
                              },
                              "reason": {
                                "type": "string"
                              },
                              "by": {
                                "type": "string"
                              },
                              "byId": {
                                "type": "string"
                              },
                              "at": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "scanner",
                              "reason",
                              "by",
                              "byId",
                              "at"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "block": {
                          "properties": {
                            "action": {
                              "type": "string",
                              "enum": [
                                "blocked"
                              ]
                            },
                            "reason": {
                              "type": "string"
                            },
                            "statusCode": {
                              "type": "number"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "caseId": {
                              "type": "string"
                            },
                            "actor": {
                              "type": "string"
                            },
                            "comment": {
                              "type": "string"
                            },
                            "isCascading": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "action",
                            "reason",
                            "statusCode",
                            "createdAt"
                          ],
                          "type": "object"
                        },
                        "blockHistory": {
                          "items": {
                            "oneOf": [
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "blocked"
                                    ]
                                  },
                                  "reason": {
                                    "type": "string"
                                  },
                                  "statusCode": {
                                    "type": "number"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "reason",
                                  "statusCode",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "unblocked"
                                    ]
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "route-blocked"
                                    ]
                                  },
                                  "route": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "src": {
                                            "type": "string"
                                          },
                                          "status": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "src",
                                          "status"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "has": {
                                            "items": {
                                              "oneOf": [
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "header"
                                                      ]
                                                    },
                                                    "key": {
                                                      "type": "string",
                                                      "enum": [
                                                        "x-vercel-ip-country"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "key",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                },
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "host"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                }
                                              ]
                                            },
                                            "type": "array"
                                          },
                                          "mitigate": {
                                            "properties": {
                                              "action": {
                                                "type": "string",
                                                "enum": [
                                                  "block_legal_cwc"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "action"
                                            ],
                                            "type": "object"
                                          },
                                          "src": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "has",
                                          "mitigate"
                                        ],
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  "reason": {
                                    "type": "string"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "route",
                                  "reason",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "route-unblocked"
                                    ]
                                  },
                                  "route": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "src": {
                                            "type": "string"
                                          },
                                          "status": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "src",
                                          "status"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "has": {
                                            "items": {
                                              "oneOf": [
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "header"
                                                      ]
                                                    },
                                                    "key": {
                                                      "type": "string",
                                                      "enum": [
                                                        "x-vercel-ip-country"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "key",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                },
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "host"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                }
                                              ]
                                            },
                                            "type": "array"
                                          },
                                          "mitigate": {
                                            "properties": {
                                              "action": {
                                                "type": "string",
                                                "enum": [
                                                  "block_legal_cwc"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "action"
                                            ],
                                            "type": "object"
                                          },
                                          "src": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "has",
                                          "mitigate"
                                        ],
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  "statusCode": {
                                    "type": "number"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "route",
                                  "createdAt"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "history",
                        "updatedAt"
                      ],
                      "type": "object"
                    },
                    "internalRoutes": {
                      "items": {
                        "oneOf": [
                          {
                            "properties": {
                              "src": {
                                "type": "string"
                              },
                              "status": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "src",
                              "status"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "has": {
                                "items": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "header"
                                          ]
                                        },
                                        "key": {
                                          "type": "string",
                                          "enum": [
                                            "x-vercel-ip-country"
                                          ]
                                        },
                                        "value": {
                                          "properties": {
                                            "eq": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "eq"
                                          ],
                                          "type": "object"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "key",
                                        "value"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "host"
                                          ]
                                        },
                                        "value": {
                                          "properties": {
                                            "eq": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "eq"
                                          ],
                                          "type": "object"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "value"
                                      ],
                                      "type": "object"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              "mitigate": {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "block_legal_cwc"
                                    ]
                                  }
                                },
                                "required": [
                                  "action"
                                ],
                                "type": "object"
                              },
                              "src": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "has",
                              "mitigate"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "accountId",
                    "directoryListing",
                    "id",
                    "name",
                    "nodeVersion",
                    "resourceConfig",
                    "defaultResourceConfig"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "patch": {
        "description": "Update the fields of a project using either its `name` or `id`.",
        "operationId": "updateProject",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update an existing project",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The project was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accountId": {
                      "type": "string"
                    },
                    "analytics": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "canceledAt": {
                          "nullable": true,
                          "type": "number"
                        },
                        "disabledAt": {
                          "type": "number"
                        },
                        "enabledAt": {
                          "type": "number"
                        },
                        "paidAt": {
                          "type": "number"
                        },
                        "sampleRatePercent": {
                          "nullable": true,
                          "type": "number"
                        },
                        "spendLimitInDollars": {
                          "nullable": true,
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "disabledAt",
                        "enabledAt"
                      ],
                      "type": "object"
                    },
                    "speedInsights": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "enabledAt": {
                          "type": "number"
                        },
                        "disabledAt": {
                          "type": "number"
                        },
                        "canceledAt": {
                          "type": "number"
                        },
                        "hasData": {
                          "type": "boolean"
                        },
                        "paidAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    "autoExposeSystemEnvs": {
                      "type": "boolean"
                    },
                    "autoAssignCustomDomains": {
                      "type": "boolean"
                    },
                    "autoAssignCustomDomainsUpdatedBy": {
                      "type": "string"
                    },
                    "buildCommand": {
                      "nullable": true,
                      "type": "string"
                    },
                    "commandForIgnoringBuildStep": {
                      "nullable": true,
                      "type": "string"
                    },
                    "connectConfigurations": {
                      "nullable": true,
                      "items": {
                        "properties": {
                          "envId": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "preview",
                                  "production"
                                ]
                              }
                            ]
                          },
                          "connectConfigurationId": {
                            "type": "string"
                          },
                          "dc": {
                            "type": "string"
                          },
                          "passive": {
                            "type": "boolean"
                          },
                          "buildsEnabled": {
                            "type": "boolean"
                          },
                          "aws": {
                            "properties": {
                              "subnetIds": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "securityGroupId": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "subnetIds",
                              "securityGroupId"
                            ],
                            "type": "object"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "envId",
                          "connectConfigurationId",
                          "passive",
                          "buildsEnabled",
                          "createdAt",
                          "updatedAt"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "connectConfigurationId": {
                      "nullable": true,
                      "type": "string"
                    },
                    "connectBuildsEnabled": {
                      "type": "boolean"
                    },
                    "passiveConnectConfigurationId": {
                      "nullable": true,
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "customerSupportCodeVisibility": {
                      "type": "boolean"
                    },
                    "crons": {
                      "properties": {
                        "enabledAt": {
                          "type": "number",
                          "description": "The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs."
                        },
                        "disabledAt": {
                          "nullable": true,
                          "type": "number",
                          "description": "The time the feature was disabled for this project."
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "deploymentId": {
                          "nullable": true,
                          "type": "string",
                          "description": "The ID of the Deployment from which the definitions originated."
                        },
                        "definitions": {
                          "items": {
                            "properties": {
                              "host": {
                                "type": "string",
                                "description": "The hostname that should be used.",
                                "example": "vercel.com"
                              },
                              "path": {
                                "type": "string",
                                "description": "The path that should be called for the cronjob.",
                                "example": "/api/crons/sync-something?hello=world"
                              },
                              "schedule": {
                                "type": "string",
                                "description": "The cron expression.",
                                "example": "0 0 * * *"
                              }
                            },
                            "required": [
                              "host",
                              "path",
                              "schedule"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "enabledAt",
                        "disabledAt",
                        "updatedAt",
                        "deploymentId",
                        "definitions"
                      ],
                      "type": "object"
                    },
                    "dataCache": {
                      "properties": {
                        "userDisabled": {
                          "type": "boolean"
                        },
                        "storageSizeBytes": {
                          "nullable": true,
                          "type": "number"
                        },
                        "unlimited": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "userDisabled"
                      ],
                      "type": "object"
                    },
                    "deploymentExpiration": {
                      "nullable": true,
                      "properties": {
                        "expirationDays": {
                          "type": "number",
                          "description": "Number of days to keep non-production deployments (mostly preview deployments) before soft deletion."
                        },
                        "expirationDaysProduction": {
                          "type": "number",
                          "description": "Number of days to keep production deployments before soft deletion."
                        },
                        "expirationDaysCanceled": {
                          "type": "number",
                          "description": "Number of days to keep canceled deployments before soft deletion."
                        },
                        "expirationDaysErrored": {
                          "type": "number",
                          "description": "Number of days to keep errored deployments before soft deletion."
                        },
                        "deploymentsToKeep": {
                          "type": "number",
                          "description": "Minimum number of production deployments to keep for this project, even if they are over the production expiration limit."
                        }
                      },
                      "type": "object",
                      "description": "Retention policies for deployments. These are enforced at the project level, but we also maintain an instance of this at the team level as a default policy that gets applied to new projects."
                    },
                    "devCommand": {
                      "nullable": true,
                      "type": "string"
                    },
                    "directoryListing": {
                      "type": "boolean"
                    },
                    "installCommand": {
                      "nullable": true,
                      "type": "string"
                    },
                    "env": {
                      "items": {
                        "properties": {
                          "target": {
                            "oneOf": [
                              {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "production",
                                  "preview",
                                  "development"
                                ]
                              }
                            ]
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "system",
                              "encrypted",
                              "plain",
                              "sensitive",
                              "secret"
                            ]
                          },
                          "sunsetSecretId": {
                            "type": "string",
                            "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                          },
                          "decrypted": {
                            "type": "boolean"
                          },
                          "value": {
                            "type": "string"
                          },
                          "vsmValue": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "key": {
                            "type": "string"
                          },
                          "configurationId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          },
                          "createdBy": {
                            "nullable": true,
                            "type": "string"
                          },
                          "updatedBy": {
                            "nullable": true,
                            "type": "string"
                          },
                          "gitBranch": {
                            "type": "string"
                          },
                          "edgeConfigId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "edgeConfigTokenId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "contentHint": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-read-only-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "blob-read-write-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url-non-pooling"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-prisma-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-user"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-host"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-password"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-database"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url-no-ssl"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "integration-store-secret"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  },
                                  "integrationId": {
                                    "type": "string"
                                  },
                                  "integrationProductId": {
                                    "type": "string"
                                  },
                                  "integrationConfigurationId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId",
                                  "integrationId",
                                  "integrationProductId",
                                  "integrationConfigurationId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "flags-connection-string"
                                    ]
                                  },
                                  "projectId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "projectId"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "internalContentHint": {
                            "nullable": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "flags-secret"
                                ]
                              },
                              "encryptedValue": {
                                "type": "string",
                                "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                              }
                            },
                            "required": [
                              "type",
                              "encryptedValue"
                            ],
                            "type": "object",
                            "description": "Similar to `contentHints`, but should not be exposed to the user."
                          },
                          "comment": {
                            "type": "string"
                          },
                          "customEnvironmentIds": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "type",
                          "value",
                          "key"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "customEnvironments": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier for the custom environment (format: env_*)"
                          },
                          "slug": {
                            "type": "string",
                            "description": "URL-friendly name of the environment"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "preview",
                              "production",
                              "development"
                            ],
                            "description": "The type of environment (production, preview, or development)"
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional description of the environment's purpose"
                          },
                          "branchMatcher": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "endsWith",
                                  "startsWith",
                                  "equals"
                                ],
                                "description": "The type of matching to perform"
                              },
                              "pattern": {
                                "type": "string",
                                "description": "The pattern to match against branch names"
                              }
                            },
                            "required": [
                              "type",
                              "pattern"
                            ],
                            "type": "object",
                            "description": "Configuration for matching git branches to this environment"
                          },
                          "domains": {
                            "items": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "apexName": {
                                  "type": "string"
                                },
                                "projectId": {
                                  "type": "string"
                                },
                                "redirect": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "redirectStatusCode": {
                                  "nullable": true,
                                  "type": "number",
                                  "enum": [
                                    307,
                                    301,
                                    302,
                                    308
                                  ]
                                },
                                "gitBranch": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "customEnvironmentId": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "updatedAt": {
                                  "type": "number"
                                },
                                "createdAt": {
                                  "type": "number"
                                },
                                "verified": {
                                  "type": "boolean",
                                  "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                                },
                                "verification": {
                                  "items": {
                                    "properties": {
                                      "type": {
                                        "type": "string"
                                      },
                                      "domain": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "type": "string"
                                      },
                                      "reason": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "domain",
                                      "value",
                                      "reason"
                                    ],
                                    "type": "object",
                                    "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                  },
                                  "type": "array",
                                  "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                }
                              },
                              "required": [
                                "name",
                                "apexName",
                                "projectId",
                                "verified"
                              ],
                              "type": "object",
                              "description": "List of domains associated with this environment"
                            },
                            "type": "array",
                            "description": "List of domains associated with this environment"
                          },
                          "currentDeploymentAliases": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "List of aliases for the current deployment"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "Timestamp when the environment was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "Timestamp when the environment was last updated"
                          }
                        },
                        "required": [
                          "id",
                          "slug",
                          "type",
                          "createdAt",
                          "updatedAt"
                        ],
                        "type": "object",
                        "description": "Internal representation of a custom environment with all required properties"
                      },
                      "type": "array"
                    },
                    "framework": {
                      "nullable": true,
                      "type": "string",
                      "enum": [
                        "blitzjs",
                        "nextjs",
                        "gatsby",
                        "remix",
                        "react-router",
                        "astro",
                        "hexo",
                        "eleventy",
                        "docusaurus-2",
                        "docusaurus",
                        "preact",
                        "solidstart-1",
                        "solidstart",
                        "dojo",
                        "ember",
                        "vue",
                        "scully",
                        "ionic-angular",
                        "angular",
                        "polymer",
                        "svelte",
                        "sveltekit",
                        "sveltekit-1",
                        "ionic-react",
                        "create-react-app",
                        "gridsome",
                        "umijs",
                        "sapper",
                        "saber",
                        "stencil",
                        "nuxtjs",
                        "redwoodjs",
                        "hugo",
                        "jekyll",
                        "brunch",
                        "middleman",
                        "zola",
                        "hydrogen",
                        "vite",
                        "vitepress",
                        "vuepress",
                        "parcel",
                        "fastapi",
                        "fasthtml",
                        "sanity-v3",
                        "sanity",
                        "storybook",
                        "nitro",
                        "hono",
                        "express",
                        "xmcp"
                      ]
                    },
                    "gitForkProtection": {
                      "type": "boolean"
                    },
                    "gitLFS": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    },
                    "ipBuckets": {
                      "items": {
                        "properties": {
                          "bucket": {
                            "type": "string"
                          },
                          "supportUntil": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "bucket"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "latestDeployments": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "alias": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "aliasAssigned": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "boolean"
                              }
                            ]
                          },
                          "aliasError": {
                            "nullable": true,
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "code",
                              "message"
                            ],
                            "type": "object"
                          },
                          "aliasFinal": {
                            "nullable": true,
                            "type": "string"
                          },
                          "automaticAliases": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "branchMatcher": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "endsWith",
                                  "startsWith",
                                  "equals"
                                ],
                                "description": "The type of matching to perform"
                              },
                              "pattern": {
                                "type": "string",
                                "description": "The pattern to match against branch names"
                              }
                            },
                            "required": [
                              "type",
                              "pattern"
                            ],
                            "type": "object"
                          },
                          "buildingAt": {
                            "type": "number"
                          },
                          "builds": {
                            "items": {
                              "properties": {
                                "use": {
                                  "type": "string"
                                },
                                "src": {
                                  "type": "string"
                                },
                                "dest": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "use"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "checksConclusion": {
                            "type": "string",
                            "enum": [
                              "succeeded",
                              "failed",
                              "skipped",
                              "canceled"
                            ]
                          },
                          "checksState": {
                            "type": "string",
                            "enum": [
                              "registered",
                              "running",
                              "completed"
                            ]
                          },
                          "connectBuildsEnabled": {
                            "type": "boolean"
                          },
                          "connectConfigurationId": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "createdIn": {
                            "type": "string"
                          },
                          "creator": {
                            "nullable": true,
                            "properties": {
                              "email": {
                                "type": "string"
                              },
                              "githubLogin": {
                                "type": "string"
                              },
                              "gitlabLogin": {
                                "type": "string"
                              },
                              "uid": {
                                "type": "string"
                              },
                              "username": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "email",
                              "uid",
                              "username"
                            ],
                            "type": "object"
                          },
                          "deletedAt": {
                            "type": "number"
                          },
                          "deploymentHostname": {
                            "type": "string"
                          },
                          "forced": {
                            "type": "boolean"
                          },
                          "name": {
                            "type": "string"
                          },
                          "meta": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "monorepoManager": {
                            "nullable": true,
                            "type": "string"
                          },
                          "oidcTokenClaims": {
                            "properties": {
                              "iss": {
                                "type": "string"
                              },
                              "sub": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string"
                              },
                              "aud": {
                                "type": "string"
                              },
                              "owner": {
                                "type": "string"
                              },
                              "owner_id": {
                                "type": "string"
                              },
                              "project": {
                                "type": "string"
                              },
                              "project_id": {
                                "type": "string"
                              },
                              "environment": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "iss",
                              "sub",
                              "scope",
                              "aud",
                              "owner",
                              "owner_id",
                              "project",
                              "project_id",
                              "environment"
                            ],
                            "type": "object"
                          },
                          "plan": {
                            "type": "string",
                            "enum": [
                              "pro",
                              "enterprise",
                              "hobby"
                            ]
                          },
                          "previewCommentsEnabled": {
                            "type": "boolean",
                            "description": "Whether or not preview comments are enabled for the deployment",
                            "example": false
                          },
                          "private": {
                            "type": "boolean"
                          },
                          "readyAt": {
                            "type": "number"
                          },
                          "readyState": {
                            "type": "string",
                            "enum": [
                              "BUILDING",
                              "ERROR",
                              "INITIALIZING",
                              "QUEUED",
                              "READY",
                              "CANCELED"
                            ]
                          },
                          "readySubstate": {
                            "type": "string",
                            "enum": [
                              "STAGED",
                              "ROLLING",
                              "PROMOTED"
                            ]
                          },
                          "requestedAt": {
                            "type": "number"
                          },
                          "target": {
                            "nullable": true,
                            "type": "string"
                          },
                          "teamId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "LAMBDAS"
                            ]
                          },
                          "url": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "withCache": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "createdIn",
                          "creator",
                          "deploymentHostname",
                          "name",
                          "plan",
                          "private",
                          "readyState",
                          "type",
                          "url",
                          "userId"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "link": {
                      "oneOf": [
                        {
                          "properties": {
                            "org": {
                              "type": "string"
                            },
                            "repoOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "github"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "org",
                            "type",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-limited"
                              ]
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "org": {
                              "type": "string"
                            },
                            "repoOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "org",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "org": {
                              "type": "string"
                            },
                            "repoOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes."
                            },
                            "repo": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "number"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "github-custom-host"
                              ]
                            },
                            "host": {
                              "type": "string"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "org",
                            "type",
                            "host",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "projectId": {
                              "type": "string"
                            },
                            "projectName": {
                              "type": "string"
                            },
                            "projectNameWithNamespace": {
                              "type": "string"
                            },
                            "projectNamespace": {
                              "type": "string"
                            },
                            "projectOwnerId": {
                              "type": "number",
                              "description": "A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels)."
                            },
                            "projectUrl": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "gitlab"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "projectId",
                            "projectName",
                            "projectNameWithNamespace",
                            "projectNamespace",
                            "projectUrl",
                            "type",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            },
                            "owner": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "bitbucket"
                              ]
                            },
                            "uuid": {
                              "type": "string"
                            },
                            "workspaceUuid": {
                              "type": "string"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "deployHooks": {
                              "items": {
                                "properties": {
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "ref": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name",
                                  "ref",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "gitCredentialId": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "sourceless": {
                              "type": "boolean"
                            },
                            "productionBranch": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "slug",
                            "owner",
                            "type",
                            "uuid",
                            "workspaceUuid",
                            "gitCredentialId",
                            "productionBranch",
                            "deployHooks"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "microfrontends": {
                      "oneOf": [
                        {
                          "properties": {
                            "updatedAt": {
                              "type": "number",
                              "description": "Timestamp when the microfrontends settings were last updated."
                            },
                            "groupIds": {
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                              "description": "The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together."
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "Whether microfrontends are enabled for this project."
                            },
                            "isDefaultApp": {
                              "type": "boolean",
                              "description": "Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends."
                            },
                            "defaultRoute": {
                              "type": "string",
                              "description": "A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`"
                            },
                            "routeObservabilityToThisProject": {
                              "type": "boolean",
                              "description": "Whether observability data should be routed to this microfrontend project or a root project."
                            }
                          },
                          "required": [
                            "updatedAt",
                            "groupIds",
                            "enabled"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "updatedAt": {
                              "type": "number"
                            },
                            "groupIds": {
                              "items": {
                                "oneOf": []
                              },
                              "maxItems": 0,
                              "minItems": 0,
                              "type": "array"
                            },
                            "enabled": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "updatedAt",
                            "groupIds",
                            "enabled"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "nodeVersion": {
                      "type": "string",
                      "enum": [
                        "22.x",
                        "20.x",
                        "18.x",
                        "16.x",
                        "14.x",
                        "12.x",
                        "10.x",
                        "8.10.x"
                      ]
                    },
                    "optionsAllowlist": {
                      "nullable": true,
                      "properties": {
                        "paths": {
                          "items": {
                            "properties": {
                              "value": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "value"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "paths"
                      ],
                      "type": "object"
                    },
                    "outputDirectory": {
                      "nullable": true,
                      "type": "string"
                    },
                    "passwordProtection": {
                      "nullable": true,
                      "type": "object"
                    },
                    "productionDeploymentsFastLane": {
                      "type": "boolean"
                    },
                    "publicSource": {
                      "nullable": true,
                      "type": "boolean"
                    },
                    "resourceConfig": {
                      "properties": {
                        "elasticConcurrencyEnabled": {
                          "type": "boolean"
                        },
                        "fluid": {
                          "type": "boolean"
                        },
                        "functionDefaultRegions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "functionDefaultTimeout": {
                          "type": "number"
                        },
                        "functionDefaultMemoryType": {
                          "type": "string",
                          "enum": [
                            "standard_legacy",
                            "standard",
                            "performance"
                          ]
                        },
                        "functionZeroConfigFailover": {
                          "type": "boolean"
                        },
                        "buildMachineType": {
                          "type": "string",
                          "enum": [
                            "enhanced",
                            "turbo"
                          ]
                        },
                        "isNSNBDisabled": {
                          "type": "boolean"
                        }
                      },
                      "type": "object",
                      "required": [
                        "functionDefaultRegions"
                      ]
                    },
                    "rollbackDescription": {
                      "properties": {
                        "userId": {
                          "type": "string",
                          "description": "The user who rolled back the project."
                        },
                        "username": {
                          "type": "string",
                          "description": "The username of the user who rolled back the project."
                        },
                        "description": {
                          "type": "string",
                          "description": "User-supplied explanation of why they rolled back the project. Limited to 250 characters."
                        },
                        "createdAt": {
                          "type": "number",
                          "description": "Timestamp of when the rollback was requested."
                        }
                      },
                      "required": [
                        "userId",
                        "username",
                        "description",
                        "createdAt"
                      ],
                      "type": "object",
                      "description": "Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback."
                    },
                    "rollingRelease": {
                      "nullable": true,
                      "properties": {
                        "target": {
                          "type": "string",
                          "description": "The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.",
                          "example": "production"
                        },
                        "stages": {
                          "nullable": true,
                          "items": {
                            "properties": {
                              "targetPercentage": {
                                "type": "number",
                                "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                                "example": 25
                              },
                              "requireApproval": {
                                "type": "boolean",
                                "description": "Whether or not this stage requires manual approval to proceed",
                                "example": false
                              },
                              "duration": {
                                "type": "number",
                                "description": "Duration in minutes for automatic advancement to the next stage",
                                "example": 600
                              }
                            },
                            "required": [
                              "targetPercentage"
                            ],
                            "type": "object",
                            "description": "An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100."
                          },
                          "type": "array",
                          "description": "An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100."
                        },
                        "canaryResponseHeader": {
                          "type": "boolean",
                          "description": "Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.",
                          "example": false
                        }
                      },
                      "required": [
                        "target"
                      ],
                      "type": "object",
                      "description": "Project-level rolling release configuration that defines how deployments should be gradually rolled out"
                    },
                    "defaultResourceConfig": {
                      "properties": {
                        "elasticConcurrencyEnabled": {
                          "type": "boolean"
                        },
                        "fluid": {
                          "type": "boolean"
                        },
                        "functionDefaultRegions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "functionDefaultTimeout": {
                          "type": "number"
                        },
                        "functionDefaultMemoryType": {
                          "type": "string",
                          "enum": [
                            "standard_legacy",
                            "standard",
                            "performance"
                          ]
                        },
                        "functionZeroConfigFailover": {
                          "type": "boolean"
                        },
                        "buildMachineType": {
                          "type": "string",
                          "enum": [
                            "enhanced",
                            "turbo"
                          ]
                        },
                        "isNSNBDisabled": {
                          "type": "boolean"
                        }
                      },
                      "type": "object",
                      "required": [
                        "functionDefaultRegions"
                      ]
                    },
                    "rootDirectory": {
                      "nullable": true,
                      "type": "string"
                    },
                    "serverlessFunctionZeroConfigFailover": {
                      "type": "boolean"
                    },
                    "skewProtectionBoundaryAt": {
                      "type": "number"
                    },
                    "skewProtectionMaxAge": {
                      "type": "number"
                    },
                    "skipGitConnectDuringLink": {
                      "type": "boolean"
                    },
                    "sourceFilesOutsideRootDirectory": {
                      "type": "boolean"
                    },
                    "enableAffectedProjectsDeployments": {
                      "type": "boolean"
                    },
                    "ssoProtection": {
                      "nullable": true,
                      "properties": {
                        "deploymentType": {
                          "type": "string",
                          "enum": [
                            "preview",
                            "all",
                            "prod_deployment_urls_and_all_previews",
                            "all_except_custom_domains"
                          ]
                        }
                      },
                      "required": [
                        "deploymentType"
                      ],
                      "type": "object"
                    },
                    "targets": {
                      "additionalProperties": {
                        "nullable": true,
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "alias": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "aliasAssigned": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "boolean"
                              }
                            ]
                          },
                          "aliasError": {
                            "nullable": true,
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "code",
                              "message"
                            ],
                            "type": "object"
                          },
                          "aliasFinal": {
                            "nullable": true,
                            "type": "string"
                          },
                          "automaticAliases": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "branchMatcher": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "endsWith",
                                  "startsWith",
                                  "equals"
                                ],
                                "description": "The type of matching to perform"
                              },
                              "pattern": {
                                "type": "string",
                                "description": "The pattern to match against branch names"
                              }
                            },
                            "required": [
                              "type",
                              "pattern"
                            ],
                            "type": "object"
                          },
                          "buildingAt": {
                            "type": "number"
                          },
                          "builds": {
                            "items": {
                              "properties": {
                                "use": {
                                  "type": "string"
                                },
                                "src": {
                                  "type": "string"
                                },
                                "dest": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "use"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "checksConclusion": {
                            "type": "string",
                            "enum": [
                              "succeeded",
                              "failed",
                              "skipped",
                              "canceled"
                            ]
                          },
                          "checksState": {
                            "type": "string",
                            "enum": [
                              "registered",
                              "running",
                              "completed"
                            ]
                          },
                          "connectBuildsEnabled": {
                            "type": "boolean"
                          },
                          "connectConfigurationId": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "createdIn": {
                            "type": "string"
                          },
                          "creator": {
                            "nullable": true,
                            "properties": {
                              "email": {
                                "type": "string"
                              },
                              "githubLogin": {
                                "type": "string"
                              },
                              "gitlabLogin": {
                                "type": "string"
                              },
                              "uid": {
                                "type": "string"
                              },
                              "username": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "email",
                              "uid",
                              "username"
                            ],
                            "type": "object"
                          },
                          "deletedAt": {
                            "type": "number"
                          },
                          "deploymentHostname": {
                            "type": "string"
                          },
                          "forced": {
                            "type": "boolean"
                          },
                          "name": {
                            "type": "string"
                          },
                          "meta": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "type": "object"
                          },
                          "monorepoManager": {
                            "nullable": true,
                            "type": "string"
                          },
                          "oidcTokenClaims": {
                            "properties": {
                              "iss": {
                                "type": "string"
                              },
                              "sub": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string"
                              },
                              "aud": {
                                "type": "string"
                              },
                              "owner": {
                                "type": "string"
                              },
                              "owner_id": {
                                "type": "string"
                              },
                              "project": {
                                "type": "string"
                              },
                              "project_id": {
                                "type": "string"
                              },
                              "environment": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "iss",
                              "sub",
                              "scope",
                              "aud",
                              "owner",
                              "owner_id",
                              "project",
                              "project_id",
                              "environment"
                            ],
                            "type": "object"
                          },
                          "plan": {
                            "type": "string",
                            "enum": [
                              "pro",
                              "enterprise",
                              "hobby"
                            ]
                          },
                          "previewCommentsEnabled": {
                            "type": "boolean",
                            "description": "Whether or not preview comments are enabled for the deployment",
                            "example": false
                          },
                          "private": {
                            "type": "boolean"
                          },
                          "readyAt": {
                            "type": "number"
                          },
                          "readyState": {
                            "type": "string",
                            "enum": [
                              "BUILDING",
                              "ERROR",
                              "INITIALIZING",
                              "QUEUED",
                              "READY",
                              "CANCELED"
                            ]
                          },
                          "readySubstate": {
                            "type": "string",
                            "enum": [
                              "STAGED",
                              "ROLLING",
                              "PROMOTED"
                            ]
                          },
                          "requestedAt": {
                            "type": "number"
                          },
                          "target": {
                            "nullable": true,
                            "type": "string"
                          },
                          "teamId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "LAMBDAS"
                            ]
                          },
                          "url": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "withCache": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "createdIn",
                          "creator",
                          "deploymentHostname",
                          "name",
                          "plan",
                          "private",
                          "readyState",
                          "type",
                          "url",
                          "userId"
                        ],
                        "type": "object"
                      },
                      "type": "object"
                    },
                    "transferCompletedAt": {
                      "type": "number"
                    },
                    "transferStartedAt": {
                      "type": "number"
                    },
                    "transferToAccountId": {
                      "type": "string"
                    },
                    "transferredFromAccountId": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "live": {
                      "type": "boolean"
                    },
                    "enablePreviewFeedback": {
                      "nullable": true,
                      "type": "boolean"
                    },
                    "enableProductionFeedback": {
                      "nullable": true,
                      "type": "boolean"
                    },
                    "permissions": {
                      "properties": {
                        "aliasProject": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "aliasProtectionBypass": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "buildMachine": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "productionAliasProtectionBypass": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "connectConfigurationLink": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "dataCacheNamespace": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deployment": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentBuildLogs": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentCheck": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentCheckPreview": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentCheckReRunFromProductionBranch": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentProductionGit": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentV0": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentPreview": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentPrivate": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentPromote": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "deploymentRollback": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeCacheNamespace": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "environments": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "logs": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "logsPreset": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "passwordProtection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "optionsAllowlist": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "job": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityData": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "onDemandBuild": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "onDemandConcurrency": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "project": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectFromV0": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectAccessGroup": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectAnalyticsSampling": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectCheck": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectCheckRun": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDeploymentHook": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDomain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDomainMove": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDomainCheckConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectEnvVars": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectEnvVarsProduction": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectEnvVarsUnownedByIntegration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectFlags": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectId": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectIntegrationConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectLink": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectMember": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectMonitoring": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectPermissions": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectProductionBranch": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTransferOut": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectProtectionBypass": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectUsage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectAnalyticsUsage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectSupportCase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectSupportCaseComment": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectDeploymentExpiration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectRollingRelease": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTier": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectOIDCToken": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "seawallConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "skewProtection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "analytics": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "trustedIps": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "v0Chat": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webAnalytics": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sharedEnvVarConnection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sonar": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "oauth2Connection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "user": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "userConnection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "userSudo": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webAuthn": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "accessGroup": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "aliasGlobal": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "analyticsSampling": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "analyticsUsage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "auditLog": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingAddress": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInformation": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInvoice": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInvoiceEmailRecipient": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingInvoiceLanguage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingPlan": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingPurchaseOrder": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingRefund": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "billingTaxId": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "blob": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "budget": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "cacheArtifact": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "cacheArtifactUsageEvent": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "codeChecks": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "concurrentBuilds": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "connect": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "connectConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "defaultDeploymentProtection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainAcceptDelegation": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainAuthCodes": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainCertificate": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainCheckConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainMove": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainPurchase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainRecord": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "domainTransferIn": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "event": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "ownEvent": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sensitiveEnvironmentVariablePolicy": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "fileUpload": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "flagsExplorerSubscription": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "gitRepository": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "ipBlocking": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "imageOptimizationNewPrice": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationAccount": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfigurationTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfigurationProjects": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationVercelConfigurationOverride": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationConfigurationRole": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationSSOSession": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationResource": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationEvent": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationResourceSecrets": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationDeploymentAction": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceInstallationMember": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceBillingData": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceInvoice": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceSettings": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceExperimentationItem": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "marketplaceExperimentationEdgeConfigData": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "jobGlobal": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "drain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "logDrain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "traceDrain": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "Monitoring": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringSettings": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringQuery": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringChart": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "monitoringAlert": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDeploymentFailed": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainExpire": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainMoved": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainPurchase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainRenewal": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationDomainUnverified": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "NotificationMonitoringAlert": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationPaymentFailed": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationUsageAlert": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationPreferences": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationCustomerBudget": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "notificationStatementOfReasons": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityConfiguration": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "alerts": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityNotebook": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "observabilityFunnel": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "openTelemetryEndpoint": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelAppInstallation": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelAppInstallationRequest": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "paymentMethod": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "permissions": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "postgres": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "previewDeploymentSuffix": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "proTrialOnboarding": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sharedEnvVars": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "sharedEnvVarsProduction": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "space": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "spaceRun": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "passwordProtectionInvoiceItem": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "rateLimit": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "redis": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "repository": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "remoteCaching": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "samlConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "secret": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "redisStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "blobStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "postgresStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationStoreTokenSet": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "integrationResourceReplCommand": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "storeTransfer": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "supportCase": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "supportCaseComment": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "dataCacheBillingSettings": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "team": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamAccessRequest": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamFellowMembership": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamGitExclusivity": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamInvite": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamInviteCode": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamJoin": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamMemberMfaStatus": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamMicrofrontends": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamOwnMembership": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "teamOwnMembershipDisconnectSAML": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "token": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "usage": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "usageCycle": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vpcPeeringConnection": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webAnalyticsPlan": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfig": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfigItem": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfigSchema": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "edgeConfigToken": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webhook": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "webhook-event": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "endpointVerification": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "projectTransferIn": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "oauth2Application": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelRun": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "vercelRunExec": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "apiKey": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        },
                        "apiKeyOwnedBySelf": {
                          "items": {
                            "$ref": "#/components/schemas/ACLAction"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "lastRollbackTarget": {
                      "nullable": true,
                      "type": "object"
                    },
                    "lastAliasRequest": {
                      "nullable": true,
                      "properties": {
                        "fromDeploymentId": {
                          "type": "string"
                        },
                        "toDeploymentId": {
                          "type": "string"
                        },
                        "fromRollingReleaseId": {
                          "type": "string",
                          "description": "If rolling back from a rolling release, fromDeploymentId captures the \"base\" of that rolling release, and fromRollingReleaseId captures the \"target\" of that rolling release."
                        },
                        "jobStatus": {
                          "type": "string",
                          "enum": [
                            "succeeded",
                            "failed",
                            "skipped",
                            "pending",
                            "in-progress"
                          ]
                        },
                        "requestedAt": {
                          "type": "number"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "promote",
                            "rollback"
                          ]
                        }
                      },
                      "required": [
                        "fromDeploymentId",
                        "toDeploymentId",
                        "jobStatus",
                        "requestedAt",
                        "type"
                      ],
                      "type": "object"
                    },
                    "protectionBypass": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "properties": {
                              "createdAt": {
                                "type": "number"
                              },
                              "createdBy": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "integration-automation-bypass"
                                ]
                              },
                              "integrationId": {
                                "type": "string"
                              },
                              "configurationId": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "createdAt",
                              "createdBy",
                              "scope",
                              "integrationId",
                              "configurationId"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "createdAt": {
                                "type": "number"
                              },
                              "createdBy": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "automation-bypass"
                                ]
                              }
                            },
                            "required": [
                              "createdAt",
                              "createdBy",
                              "scope"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": "object"
                    },
                    "hasActiveBranches": {
                      "type": "boolean"
                    },
                    "trustedIps": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "properties": {
                            "deploymentType": {
                              "type": "string",
                              "enum": [
                                "preview",
                                "production",
                                "all",
                                "prod_deployment_urls_and_all_previews",
                                "all_except_custom_domains"
                              ]
                            },
                            "addresses": {
                              "items": {
                                "properties": {
                                  "value": {
                                    "type": "string"
                                  },
                                  "note": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "value"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "protectionMode": {
                              "type": "string",
                              "enum": [
                                "additional",
                                "exclusive"
                              ]
                            }
                          },
                          "required": [
                            "deploymentType",
                            "addresses",
                            "protectionMode"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "deploymentType": {
                              "type": "string",
                              "enum": [
                                "preview",
                                "production",
                                "all",
                                "prod_deployment_urls_and_all_previews",
                                "all_except_custom_domains"
                              ]
                            }
                          },
                          "required": [
                            "deploymentType"
                          ],
                          "type": "object"
                        }
                      ]
                    },
                    "gitComments": {
                      "properties": {
                        "onPullRequest": {
                          "type": "boolean",
                          "description": "Whether the Vercel bot should comment on PRs"
                        },
                        "onCommit": {
                          "type": "boolean",
                          "description": "Whether the Vercel bot should comment on commits"
                        }
                      },
                      "required": [
                        "onPullRequest",
                        "onCommit"
                      ],
                      "type": "object"
                    },
                    "gitProviderOptions": {
                      "properties": {
                        "createDeployments": {
                          "type": "string",
                          "enum": [
                            "enabled",
                            "disabled"
                          ],
                          "description": "Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead"
                        },
                        "disableRepositoryDispatchEvents": {
                          "type": "boolean",
                          "description": "Whether the Vercel bot should not automatically create GitHub repository-dispatch events on deployment events. https://vercel.com/docs/git/vercel-for-github#repository-dispatch-events"
                        }
                      },
                      "required": [
                        "createDeployments"
                      ],
                      "type": "object"
                    },
                    "paused": {
                      "type": "boolean"
                    },
                    "concurrencyBucketName": {
                      "type": "string"
                    },
                    "webAnalytics": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "disabledAt": {
                          "type": "number"
                        },
                        "canceledAt": {
                          "type": "number"
                        },
                        "enabledAt": {
                          "type": "number"
                        },
                        "hasData": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "type": "object"
                    },
                    "security": {
                      "properties": {
                        "attackModeEnabled": {
                          "type": "boolean"
                        },
                        "attackModeUpdatedAt": {
                          "type": "number"
                        },
                        "firewallEnabled": {
                          "type": "boolean"
                        },
                        "firewallUpdatedAt": {
                          "type": "number"
                        },
                        "attackModeActiveUntil": {
                          "nullable": true,
                          "type": "number"
                        },
                        "firewallConfigVersion": {
                          "type": "number"
                        },
                        "firewallSeawallEnabled": {
                          "type": "boolean"
                        },
                        "ja3Enabled": {
                          "type": "boolean"
                        },
                        "ja4Enabled": {
                          "type": "boolean"
                        },
                        "firewallBypassIps": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "managedRules": {
                          "nullable": true,
                          "properties": {
                            "bot_filter": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny"
                                  ]
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            },
                            "ai_bots": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny"
                                  ]
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            },
                            "owasp": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny"
                                  ]
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "bot_filter",
                            "ai_bots",
                            "owasp"
                          ],
                          "type": "object"
                        },
                        "botIdEnabled": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "oidcTokenConfig": {
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether or not to generate OpenID Connect JSON Web Tokens."
                        },
                        "issuerMode": {
                          "type": "string",
                          "enum": [
                            "team",
                            "global"
                          ],
                          "description": "- team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`"
                        }
                      },
                      "type": "object"
                    },
                    "tier": {
                      "type": "string",
                      "enum": [
                        "standard",
                        "advanced",
                        "critical"
                      ]
                    },
                    "features": {
                      "properties": {
                        "webAnalytics": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "v0": {
                      "type": "boolean"
                    },
                    "abuse": {
                      "properties": {
                        "scanner": {
                          "type": "string"
                        },
                        "history": {
                          "items": {
                            "properties": {
                              "scanner": {
                                "type": "string"
                              },
                              "reason": {
                                "type": "string"
                              },
                              "by": {
                                "type": "string"
                              },
                              "byId": {
                                "type": "string"
                              },
                              "at": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "scanner",
                              "reason",
                              "by",
                              "byId",
                              "at"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "block": {
                          "properties": {
                            "action": {
                              "type": "string",
                              "enum": [
                                "blocked"
                              ]
                            },
                            "reason": {
                              "type": "string"
                            },
                            "statusCode": {
                              "type": "number"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "caseId": {
                              "type": "string"
                            },
                            "actor": {
                              "type": "string"
                            },
                            "comment": {
                              "type": "string"
                            },
                            "isCascading": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "action",
                            "reason",
                            "statusCode",
                            "createdAt"
                          ],
                          "type": "object"
                        },
                        "blockHistory": {
                          "items": {
                            "oneOf": [
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "blocked"
                                    ]
                                  },
                                  "reason": {
                                    "type": "string"
                                  },
                                  "statusCode": {
                                    "type": "number"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "reason",
                                  "statusCode",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "unblocked"
                                    ]
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "route-blocked"
                                    ]
                                  },
                                  "route": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "src": {
                                            "type": "string"
                                          },
                                          "status": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "src",
                                          "status"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "has": {
                                            "items": {
                                              "oneOf": [
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "header"
                                                      ]
                                                    },
                                                    "key": {
                                                      "type": "string",
                                                      "enum": [
                                                        "x-vercel-ip-country"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "key",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                },
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "host"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                }
                                              ]
                                            },
                                            "type": "array"
                                          },
                                          "mitigate": {
                                            "properties": {
                                              "action": {
                                                "type": "string",
                                                "enum": [
                                                  "block_legal_cwc"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "action"
                                            ],
                                            "type": "object"
                                          },
                                          "src": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "has",
                                          "mitigate"
                                        ],
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  "reason": {
                                    "type": "string"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "route",
                                  "reason",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "route-unblocked"
                                    ]
                                  },
                                  "route": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "src": {
                                            "type": "string"
                                          },
                                          "status": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "src",
                                          "status"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "has": {
                                            "items": {
                                              "oneOf": [
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "header"
                                                      ]
                                                    },
                                                    "key": {
                                                      "type": "string",
                                                      "enum": [
                                                        "x-vercel-ip-country"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "key",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                },
                                                {
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "enum": [
                                                        "host"
                                                      ]
                                                    },
                                                    "value": {
                                                      "properties": {
                                                        "eq": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "eq"
                                                      ],
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                }
                                              ]
                                            },
                                            "type": "array"
                                          },
                                          "mitigate": {
                                            "properties": {
                                              "action": {
                                                "type": "string",
                                                "enum": [
                                                  "block_legal_cwc"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "action"
                                            ],
                                            "type": "object"
                                          },
                                          "src": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "has",
                                          "mitigate"
                                        ],
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  "statusCode": {
                                    "type": "number"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "caseId": {
                                    "type": "string"
                                  },
                                  "actor": {
                                    "type": "string"
                                  },
                                  "comment": {
                                    "type": "string"
                                  },
                                  "isCascading": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action",
                                  "route",
                                  "createdAt"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "history",
                        "updatedAt"
                      ],
                      "type": "object"
                    },
                    "internalRoutes": {
                      "items": {
                        "oneOf": [
                          {
                            "properties": {
                              "src": {
                                "type": "string"
                              },
                              "status": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "src",
                              "status"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "has": {
                                "items": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "header"
                                          ]
                                        },
                                        "key": {
                                          "type": "string",
                                          "enum": [
                                            "x-vercel-ip-country"
                                          ]
                                        },
                                        "value": {
                                          "properties": {
                                            "eq": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "eq"
                                          ],
                                          "type": "object"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "key",
                                        "value"
                                      ],
                                      "type": "object"
                                    },
                                    {
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "host"
                                          ]
                                        },
                                        "value": {
                                          "properties": {
                                            "eq": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "eq"
                                          ],
                                          "type": "object"
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "value"
                                      ],
                                      "type": "object"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              "mitigate": {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "block_legal_cwc"
                                    ]
                                  }
                                },
                                "required": [
                                  "action"
                                ],
                                "type": "object"
                              },
                              "src": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "has",
                              "mitigate"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "accountId",
                    "directoryListing",
                    "id",
                    "name",
                    "nodeVersion",
                    "resourceConfig",
                    "defaultResourceConfig"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nTrusted IPs is only accessible for enterprise customers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated\nPro customers are allowed to deploy Serverless Functions to up to `proMaxRegions` regions, or if the project was created before the limit was introduced.\nDeploying to Serverless Functions to multiple regions requires a plan update"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "The provided name for the project is already being used\nThe project is currently being transferred."
          },
          "428": {
            "description": "Owner does not have protection add-on\nAdvanced Deployment Protection is not available for the user plan"
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "example": "prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB",
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "autoExposeSystemEnvs": {
                    "type": "boolean"
                  },
                  "autoAssignCustomDomains": {
                    "type": "boolean"
                  },
                  "autoAssignCustomDomainsUpdatedBy": {
                    "type": "string"
                  },
                  "buildCommand": {
                    "description": "The build command for this project. When `null` is used this value will be automatically detected",
                    "maxLength": 256,
                    "type": "string",
                    "nullable": true
                  },
                  "commandForIgnoringBuildStep": {
                    "maxLength": 256,
                    "type": "string",
                    "nullable": true
                  },
                  "customerSupportCodeVisibility": {
                    "description": "Specifies whether customer support can see git source for a deployment",
                    "type": "boolean"
                  },
                  "devCommand": {
                    "description": "The dev command for this project. When `null` is used this value will be automatically detected",
                    "maxLength": 256,
                    "type": "string",
                    "nullable": true
                  },
                  "directoryListing": {
                    "type": "boolean"
                  },
                  "framework": {
                    "description": "The framework that is being used for this project. When `null` is used no framework is selected",
                    "enum": [
                      null,
                      "blitzjs",
                      "nextjs",
                      "gatsby",
                      "remix",
                      "react-router",
                      "astro",
                      "hexo",
                      "eleventy",
                      "docusaurus-2",
                      "docusaurus",
                      "preact",
                      "solidstart-1",
                      "solidstart",
                      "dojo",
                      "ember",
                      "vue",
                      "scully",
                      "ionic-angular",
                      "angular",
                      "polymer",
                      "svelte",
                      "sveltekit",
                      "sveltekit-1",
                      "ionic-react",
                      "create-react-app",
                      "gridsome",
                      "umijs",
                      "sapper",
                      "saber",
                      "stencil",
                      "nuxtjs",
                      "redwoodjs",
                      "hugo",
                      "jekyll",
                      "brunch",
                      "middleman",
                      "zola",
                      "hydrogen",
                      "vite",
                      "vitepress",
                      "vuepress",
                      "parcel",
                      "fastapi",
                      "fasthtml",
                      "sanity-v3",
                      "sanity",
                      "storybook",
                      "nitro",
                      "hono",
                      "express",
                      "xmcp"
                    ],
                    "type": "string",
                    "nullable": true
                  },
                  "gitForkProtection": {
                    "description": "Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed",
                    "type": "boolean"
                  },
                  "gitLFS": {
                    "description": "Specifies whether Git LFS is enabled for this project.",
                    "type": "boolean"
                  },
                  "installCommand": {
                    "description": "The install command for this project. When `null` is used this value will be automatically detected",
                    "maxLength": 256,
                    "type": "string",
                    "nullable": true
                  },
                  "name": {
                    "description": "The desired name for the project",
                    "example": "a-project-name",
                    "type": "string",
                    "maxLength": 100
                  },
                  "nodeVersion": {
                    "enum": [
                      "22.x",
                      "20.x",
                      "18.x",
                      "16.x",
                      "14.x",
                      "12.x",
                      "10.x"
                    ],
                    "type": "string"
                  },
                  "outputDirectory": {
                    "description": "The output directory of the project. When `null` is used this value will be automatically detected",
                    "maxLength": 256,
                    "type": "string",
                    "nullable": true
                  },
                  "previewDeploymentsDisabled": {
                    "description": "Specifies whether preview deployments are disabled for this project.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "publicSource": {
                    "description": "Specifies whether the source code and logs of the deployments for this project should be public or not",
                    "type": "boolean",
                    "nullable": true
                  },
                  "resourceConfig": {
                    "properties": {
                      "buildMachineType": {
                        "enum": [
                          null,
                          "enhanced",
                          "turbo"
                        ]
                      },
                      "fluid": {
                        "type": "boolean"
                      },
                      "functionDefaultRegions": {
                        "description": "The regions to deploy Vercel Functions to for this project",
                        "type": "array",
                        "minItems": 1,
                        "uniqueItems": true,
                        "items": {
                          "type": "string",
                          "maxLength": 4
                        }
                      },
                      "functionDefaultTimeout": {
                        "type": "number",
                        "maximum": 900,
                        "minimum": 1
                      },
                      "functionDefaultMemoryType": {
                        "enum": [
                          "standard_legacy",
                          "standard",
                          "performance"
                        ]
                      },
                      "functionZeroConfigFailover": {
                        "description": "Specifies whether Zero Config Failover is enabled for this project.",
                        "oneOf": [
                          {
                            "type": "boolean"
                          }
                        ]
                      },
                      "elasticConcurrencyEnabled": {
                        "type": "boolean"
                      },
                      "isNSNBDisabled": {
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "description": "Specifies resource override configuration for the project",
                    "additionalProperties": false
                  },
                  "rootDirectory": {
                    "description": "The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root",
                    "maxLength": 256,
                    "type": "string",
                    "nullable": true
                  },
                  "serverlessFunctionRegion": {
                    "description": "The region to deploy Serverless Functions in this project",
                    "maxLength": 4,
                    "type": "string",
                    "nullable": true
                  },
                  "serverlessFunctionZeroConfigFailover": {
                    "description": "Specifies whether Zero Config Failover is enabled for this project.",
                    "oneOf": [
                      {
                        "type": "boolean"
                      }
                    ]
                  },
                  "skewProtectionBoundaryAt": {
                    "description": "Deployments created before this absolute datetime have Skew Protection disabled. Value is in milliseconds since epoch to match \\\"createdAt\\\" fields.",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "skewProtectionMaxAge": {
                    "description": "Deployments created before this rolling window have Skew Protection disabled. Value is in seconds to match \\\"revalidate\\\" fields.",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "skipGitConnectDuringLink": {
                    "description": "Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.",
                    "type": "boolean",
                    "deprecated": true
                  },
                  "sourceFilesOutsideRootDirectory": {
                    "description": "Indicates if there are source files outside of the root directory",
                    "type": "boolean"
                  },
                  "enablePreviewFeedback": {
                    "description": "Opt-in to preview toolbar on the project level",
                    "type": "boolean",
                    "nullable": true
                  },
                  "enableProductionFeedback": {
                    "description": "Opt-in to production toolbar on the project level",
                    "type": "boolean",
                    "nullable": true
                  },
                  "enableAffectedProjectsDeployments": {
                    "description": "Opt-in to skip deployments when there are no changes to the root directory and its dependencies",
                    "type": "boolean"
                  },
                  "oidcTokenConfig": {
                    "description": "OpenID Connect JSON Web Token generation configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "enabled": {
                        "description": "Whether or not to generate OpenID Connect JSON Web Tokens.",
                        "deprecated": true,
                        "type": "boolean",
                        "default": true
                      },
                      "issuerMode": {
                        "description": "team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`",
                        "type": "string",
                        "enum": [
                          "team",
                          "global"
                        ],
                        "default": "team"
                      }
                    }
                  },
                  "passwordProtection": {
                    "additionalProperties": false,
                    "description": "Allows to protect project deployments with a password",
                    "properties": {
                      "deploymentType": {
                        "description": "Specify if the password will apply to every Deployment Target or just Preview",
                        "enum": [
                          "all",
                          "preview",
                          "prod_deployment_urls_and_all_previews",
                          "all_except_custom_domains"
                        ],
                        "type": "string"
                      },
                      "password": {
                        "description": "The password that will be used to protect Project Deployments",
                        "maxLength": 72,
                        "type": "string",
                        "nullable": true
                      }
                    },
                    "required": [
                      "deploymentType"
                    ],
                    "type": "object",
                    "nullable": true
                  },
                  "ssoProtection": {
                    "additionalProperties": false,
                    "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team",
                    "properties": {
                      "deploymentType": {
                        "default": "preview",
                        "description": "Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview",
                        "enum": [
                          "all",
                          "preview",
                          "prod_deployment_urls_and_all_previews",
                          "all_except_custom_domains"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "deploymentType"
                    ],
                    "type": "object",
                    "nullable": true
                  },
                  "trustedIps": {
                    "additionalProperties": false,
                    "description": "Restricts access to deployments based on the incoming request IP address",
                    "properties": {
                      "deploymentType": {
                        "description": "Specify if the Trusted IPs will apply to every Deployment Target or just Preview",
                        "enum": [
                          "all",
                          "preview",
                          "production",
                          "prod_deployment_urls_and_all_previews",
                          "all_except_custom_domains"
                        ],
                        "type": "string"
                      },
                      "addresses": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "The IP addresses that are allowlisted. Supports IPv4 addresses and CIDR notations. IPv6 is not supported"
                            },
                            "note": {
                              "type": "string",
                              "description": "An optional note explaining what the IP address or subnet is used for",
                              "maxLength": 20
                            }
                          },
                          "required": [
                            "value"
                          ],
                          "additionalProperties": false
                        },
                        "minItems": 1
                      },
                      "protectionMode": {
                        "description": "exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)",
                        "enum": [
                          "exclusive",
                          "additional"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "deploymentType",
                      "addresses",
                      "protectionMode"
                    ],
                    "type": "object",
                    "nullable": true
                  },
                  "optionsAllowlist": {
                    "additionalProperties": false,
                    "description": "Specify a list of paths that should not be protected by Deployment Protection to enable Cors preflight requests",
                    "properties": {
                      "paths": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "The regex path that should not be protected by Deployment Protection",
                              "pattern": "^/.*"
                            }
                          },
                          "required": [
                            "value"
                          ],
                          "additionalProperties": false
                        },
                        "minItems": 1,
                        "maxItems": 5
                      }
                    },
                    "required": [
                      "paths"
                    ],
                    "type": "object",
                    "nullable": true
                  },
                  "connectConfigurations": {
                    "type": "array",
                    "description": "The list of connections from project environment to Secure Compute network",
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "envId": {
                          "type": "string",
                          "description": "The ID of the environment"
                        },
                        "connectConfigurationId": {
                          "type": "string",
                          "description": "The ID of the Secure Compute network"
                        },
                        "passive": {
                          "type": "boolean",
                          "description": "Whether the configuration should be passive, meaning builds will not run there and only passive Serverless Functions will be deployed"
                        },
                        "buildsEnabled": {
                          "type": "boolean",
                          "description": "Flag saying if project builds should use Secure Compute"
                        }
                      },
                      "required": [
                        "envId",
                        "connectConfigurationId",
                        "passive",
                        "buildsEnabled"
                      ],
                      "oneOf": [
                        {
                          "type": "object"
                        }
                      ]
                    },
                    "minItems": 1,
                    "nullable": true
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "x-speakeasy-usage-example": {
          "title": "Update an existing project",
          "description": "Update the fields of a project using either its name or id.",
          "position": 2
        }
      },
      "delete": {
        "description": "Delete a specific project by passing either the project `id` or `name` in the URL.",
        "operationId": "deleteProject",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete a Project",
        "tags": [
          "projects"
        ],
        "responses": {
          "204": {
            "description": "The project was successfuly removed"
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "409": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "example": "prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB",
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v9/projects/{idOrName}/custom-environments": {
      "post": {
        "description": "Creates a custom environment for the current project. Cannot be named 'Production' or 'Preview'.",
        "operationId": "createCustomEnvironment",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create a custom environment for the current project.",
        "tags": [
          "environment"
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the custom environment (format: env_*)"
                    },
                    "slug": {
                      "type": "string",
                      "description": "URL-friendly name of the environment"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "preview",
                        "production",
                        "development"
                      ],
                      "description": "The type of environment (production, preview, or development)"
                    },
                    "description": {
                      "type": "string",
                      "description": "Optional description of the environment's purpose"
                    },
                    "branchMatcher": {
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "endsWith",
                            "startsWith",
                            "equals"
                          ],
                          "description": "The type of matching to perform"
                        },
                        "pattern": {
                          "type": "string",
                          "description": "The pattern to match against branch names"
                        }
                      },
                      "required": [
                        "type",
                        "pattern"
                      ],
                      "type": "object",
                      "description": "Configuration for matching git branches to this environment"
                    },
                    "domains": {
                      "items": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "apexName": {
                            "type": "string"
                          },
                          "projectId": {
                            "type": "string"
                          },
                          "redirect": {
                            "nullable": true,
                            "type": "string"
                          },
                          "redirectStatusCode": {
                            "nullable": true,
                            "type": "number",
                            "enum": [
                              307,
                              301,
                              302,
                              308
                            ]
                          },
                          "gitBranch": {
                            "nullable": true,
                            "type": "string"
                          },
                          "customEnvironmentId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "updatedAt": {
                            "type": "number"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "verified": {
                            "type": "boolean",
                            "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                          },
                          "verification": {
                            "items": {
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "domain": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                },
                                "reason": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "domain",
                                "value",
                                "reason"
                              ],
                              "type": "object",
                              "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                            },
                            "type": "array",
                            "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                          }
                        },
                        "required": [
                          "name",
                          "apexName",
                          "projectId",
                          "verified"
                        ],
                        "type": "object",
                        "description": "List of domains associated with this environment"
                      },
                      "type": "array",
                      "description": "List of domains associated with this environment"
                    },
                    "currentDeploymentAliases": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "List of aliases for the current deployment"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "Timestamp when the environment was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "Timestamp when the environment was last updated"
                    }
                  },
                  "required": [
                    "id",
                    "slug",
                    "type",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object",
                  "description": "Internal representation of a custom environment with all required properties"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "The slug of the custom environment to create.",
                    "type": "string",
                    "maxLength": 32
                  },
                  "description": {
                    "description": "Description of the custom environment. This is optional.",
                    "type": "string",
                    "maxLength": 256
                  },
                  "branchMatcher": {
                    "required": [
                      "type",
                      "pattern"
                    ],
                    "description": "How we want to determine a matching branch. This is optional.",
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "Type of matcher. One of \\\"equals\\\", \\\"startsWith\\\", or \\\"endsWith\\\".",
                        "enum": [
                          "equals",
                          "startsWith",
                          "endsWith"
                        ]
                      },
                      "pattern": {
                        "description": "Git branch name or portion thereof.",
                        "type": "string",
                        "maxLength": 100
                      }
                    }
                  },
                  "copyEnvVarsFrom": {
                    "description": "Where to copy environment variables from. This is optional.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieve custom environments for the project. Must not be named 'Production' or 'Preview'.",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Retrieve custom environments",
        "tags": [
          "environment"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accountLimit": {
                      "properties": {
                        "total": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "total"
                      ],
                      "type": "object",
                      "description": "The maximum number of custom environments allowed either by the team's plan type or a custom override."
                    },
                    "environments": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier for the custom environment (format: env_*)"
                          },
                          "slug": {
                            "type": "string",
                            "description": "URL-friendly name of the environment"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "preview",
                              "production",
                              "development"
                            ],
                            "description": "The type of environment (production, preview, or development)"
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional description of the environment's purpose"
                          },
                          "branchMatcher": {
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "endsWith",
                                  "startsWith",
                                  "equals"
                                ],
                                "description": "The type of matching to perform"
                              },
                              "pattern": {
                                "type": "string",
                                "description": "The pattern to match against branch names"
                              }
                            },
                            "required": [
                              "type",
                              "pattern"
                            ],
                            "type": "object",
                            "description": "Configuration for matching git branches to this environment"
                          },
                          "domains": {
                            "items": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "apexName": {
                                  "type": "string"
                                },
                                "projectId": {
                                  "type": "string"
                                },
                                "redirect": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "redirectStatusCode": {
                                  "nullable": true,
                                  "type": "number",
                                  "enum": [
                                    307,
                                    301,
                                    302,
                                    308
                                  ]
                                },
                                "gitBranch": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "customEnvironmentId": {
                                  "nullable": true,
                                  "type": "string"
                                },
                                "updatedAt": {
                                  "type": "number"
                                },
                                "createdAt": {
                                  "type": "number"
                                },
                                "verified": {
                                  "type": "boolean",
                                  "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                                },
                                "verification": {
                                  "items": {
                                    "properties": {
                                      "type": {
                                        "type": "string"
                                      },
                                      "domain": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "type": "string"
                                      },
                                      "reason": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "domain",
                                      "value",
                                      "reason"
                                    ],
                                    "type": "object",
                                    "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                  },
                                  "type": "array",
                                  "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                }
                              },
                              "required": [
                                "name",
                                "apexName",
                                "projectId",
                                "verified"
                              ],
                              "type": "object",
                              "description": "List of domains associated with this environment"
                            },
                            "type": "array",
                            "description": "List of domains associated with this environment"
                          },
                          "currentDeploymentAliases": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "List of aliases for the current deployment"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "Timestamp when the environment was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "Timestamp when the environment was last updated"
                          }
                        },
                        "required": [
                          "id",
                          "slug",
                          "type",
                          "createdAt",
                          "updatedAt"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "accountLimit",
                    "environments"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "name": "gitBranch",
            "description": "Fetch custom environments for a specific git branch",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Fetch custom environments for a specific git branch",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v9/projects/{idOrName}/custom-environments/{environmentSlugOrId}": {
      "get": {
        "description": "Retrieve a custom environment for the project. Must not be named 'Production' or 'Preview'.",
        "operationId": "getCustomEnvironment",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Retrieve a custom environment",
        "tags": [
          "environment"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the custom environment (format: env_*)"
                    },
                    "slug": {
                      "type": "string",
                      "description": "URL-friendly name of the environment"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "preview",
                        "production",
                        "development"
                      ],
                      "description": "The type of environment (production, preview, or development)"
                    },
                    "description": {
                      "type": "string",
                      "description": "Optional description of the environment's purpose"
                    },
                    "branchMatcher": {
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "endsWith",
                            "startsWith",
                            "equals"
                          ],
                          "description": "The type of matching to perform"
                        },
                        "pattern": {
                          "type": "string",
                          "description": "The pattern to match against branch names"
                        }
                      },
                      "required": [
                        "type",
                        "pattern"
                      ],
                      "type": "object",
                      "description": "Configuration for matching git branches to this environment"
                    },
                    "domains": {
                      "items": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "apexName": {
                            "type": "string"
                          },
                          "projectId": {
                            "type": "string"
                          },
                          "redirect": {
                            "nullable": true,
                            "type": "string"
                          },
                          "redirectStatusCode": {
                            "nullable": true,
                            "type": "number",
                            "enum": [
                              307,
                              301,
                              302,
                              308
                            ]
                          },
                          "gitBranch": {
                            "nullable": true,
                            "type": "string"
                          },
                          "customEnvironmentId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "updatedAt": {
                            "type": "number"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "verified": {
                            "type": "boolean",
                            "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                          },
                          "verification": {
                            "items": {
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "domain": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                },
                                "reason": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "domain",
                                "value",
                                "reason"
                              ],
                              "type": "object",
                              "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                            },
                            "type": "array",
                            "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                          }
                        },
                        "required": [
                          "name",
                          "apexName",
                          "projectId",
                          "verified"
                        ],
                        "type": "object",
                        "description": "List of domains associated with this environment"
                      },
                      "type": "array",
                      "description": "List of domains associated with this environment"
                    },
                    "currentDeploymentAliases": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "List of aliases for the current deployment"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "Timestamp when the environment was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "Timestamp when the environment was last updated"
                    }
                  },
                  "required": [
                    "id",
                    "slug",
                    "type",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object",
                  "description": "Internal representation of a custom environment with all required properties"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "name": "environmentSlugOrId",
            "description": "The unique custom environment identifier within the project",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique custom environment identifier within the project",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "patch": {
        "description": "Update a custom environment for the project. Must not be named 'Production' or 'Preview'.",
        "operationId": "updateCustomEnvironment",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update a custom environment",
        "tags": [
          "environment"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the custom environment (format: env_*)"
                    },
                    "slug": {
                      "type": "string",
                      "description": "URL-friendly name of the environment"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "preview",
                        "production",
                        "development"
                      ],
                      "description": "The type of environment (production, preview, or development)"
                    },
                    "description": {
                      "type": "string",
                      "description": "Optional description of the environment's purpose"
                    },
                    "branchMatcher": {
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "endsWith",
                            "startsWith",
                            "equals"
                          ],
                          "description": "The type of matching to perform"
                        },
                        "pattern": {
                          "type": "string",
                          "description": "The pattern to match against branch names"
                        }
                      },
                      "required": [
                        "type",
                        "pattern"
                      ],
                      "type": "object",
                      "description": "Configuration for matching git branches to this environment"
                    },
                    "domains": {
                      "items": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "apexName": {
                            "type": "string"
                          },
                          "projectId": {
                            "type": "string"
                          },
                          "redirect": {
                            "nullable": true,
                            "type": "string"
                          },
                          "redirectStatusCode": {
                            "nullable": true,
                            "type": "number",
                            "enum": [
                              307,
                              301,
                              302,
                              308
                            ]
                          },
                          "gitBranch": {
                            "nullable": true,
                            "type": "string"
                          },
                          "customEnvironmentId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "updatedAt": {
                            "type": "number"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "verified": {
                            "type": "boolean",
                            "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                          },
                          "verification": {
                            "items": {
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "domain": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                },
                                "reason": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "domain",
                                "value",
                                "reason"
                              ],
                              "type": "object",
                              "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                            },
                            "type": "array",
                            "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                          }
                        },
                        "required": [
                          "name",
                          "apexName",
                          "projectId",
                          "verified"
                        ],
                        "type": "object",
                        "description": "List of domains associated with this environment"
                      },
                      "type": "array",
                      "description": "List of domains associated with this environment"
                    },
                    "currentDeploymentAliases": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "List of aliases for the current deployment"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "Timestamp when the environment was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "Timestamp when the environment was last updated"
                    }
                  },
                  "required": [
                    "id",
                    "slug",
                    "type",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object",
                  "description": "Internal representation of a custom environment with all required properties"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "name": "environmentSlugOrId",
            "description": "The unique custom environment identifier within the project",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique custom environment identifier within the project",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "description": "The slug of the custom environment.",
                    "type": "string",
                    "maxLength": 32
                  },
                  "description": {
                    "description": "Description of the custom environment. This is optional.",
                    "type": "string",
                    "maxLength": 256
                  },
                  "branchMatcher": {
                    "required": [
                      "type",
                      "pattern"
                    ],
                    "description": "How we want to determine a matching branch. This is optional.",
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "Type of matcher. One of \\\"equals\\\", \\\"startsWith\\\", or \\\"endsWith\\\".",
                        "enum": [
                          "equals",
                          "startsWith",
                          "endsWith"
                        ]
                      },
                      "pattern": {
                        "description": "Git branch name or portion thereof.",
                        "type": "string",
                        "maxLength": 100
                      }
                    },
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Remove a custom environment for the project. Must not be named 'Production' or 'Preview'.",
        "operationId": "removeCustomEnvironment",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Remove a custom environment",
        "tags": [
          "environment"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the custom environment (format: env_*)"
                    },
                    "slug": {
                      "type": "string",
                      "description": "URL-friendly name of the environment"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "preview",
                        "production",
                        "development"
                      ],
                      "description": "The type of environment (production, preview, or development)"
                    },
                    "description": {
                      "type": "string",
                      "description": "Optional description of the environment's purpose"
                    },
                    "branchMatcher": {
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "endsWith",
                            "startsWith",
                            "equals"
                          ],
                          "description": "The type of matching to perform"
                        },
                        "pattern": {
                          "type": "string",
                          "description": "The pattern to match against branch names"
                        }
                      },
                      "required": [
                        "type",
                        "pattern"
                      ],
                      "type": "object",
                      "description": "Configuration for matching git branches to this environment"
                    },
                    "domains": {
                      "items": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "apexName": {
                            "type": "string"
                          },
                          "projectId": {
                            "type": "string"
                          },
                          "redirect": {
                            "nullable": true,
                            "type": "string"
                          },
                          "redirectStatusCode": {
                            "nullable": true,
                            "type": "number",
                            "enum": [
                              307,
                              301,
                              302,
                              308
                            ]
                          },
                          "gitBranch": {
                            "nullable": true,
                            "type": "string"
                          },
                          "customEnvironmentId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "updatedAt": {
                            "type": "number"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "verified": {
                            "type": "boolean",
                            "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                          },
                          "verification": {
                            "items": {
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "domain": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                },
                                "reason": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "domain",
                                "value",
                                "reason"
                              ],
                              "type": "object",
                              "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                            },
                            "type": "array",
                            "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                          }
                        },
                        "required": [
                          "name",
                          "apexName",
                          "projectId",
                          "verified"
                        ],
                        "type": "object",
                        "description": "List of domains associated with this environment"
                      },
                      "type": "array",
                      "description": "List of domains associated with this environment"
                    },
                    "currentDeploymentAliases": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "List of aliases for the current deployment"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "Timestamp when the environment was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "Timestamp when the environment was last updated"
                    }
                  },
                  "required": [
                    "id",
                    "slug",
                    "type",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object",
                  "description": "Internal representation of a custom environment with all required properties"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "name": "environmentSlugOrId",
            "description": "The unique custom environment identifier within the project",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique custom environment identifier within the project",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deleteUnassignedEnvironmentVariables": {
                    "description": "Delete Environment Variables that are not assigned to any environments.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v9/projects/{idOrName}/domains": {
      "get": {
        "description": "Retrieve the domains associated with a given project by passing either the project `id` or `name` in the URL.",
        "operationId": "getProjectDomains",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Retrieve project domains by project by id or name",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "Successful response retrieving a list of domains",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "domains": {
                          "items": {
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "apexName": {
                                "type": "string"
                              },
                              "projectId": {
                                "type": "string"
                              },
                              "redirect": {
                                "nullable": true,
                                "type": "string"
                              },
                              "redirectStatusCode": {
                                "nullable": true,
                                "type": "number",
                                "enum": [
                                  307,
                                  301,
                                  302,
                                  308
                                ]
                              },
                              "gitBranch": {
                                "nullable": true,
                                "type": "string"
                              },
                              "customEnvironmentId": {
                                "nullable": true,
                                "type": "string"
                              },
                              "updatedAt": {
                                "type": "number"
                              },
                              "createdAt": {
                                "type": "number"
                              },
                              "verified": {
                                "type": "boolean",
                                "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                              },
                              "verification": {
                                "items": {
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "domain": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "reason": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "domain",
                                    "value",
                                    "reason"
                                  ],
                                  "type": "object",
                                  "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                },
                                "type": "array",
                                "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                              }
                            },
                            "required": [
                              "name",
                              "apexName",
                              "projectId",
                              "verified"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "pagination": {
                          "properties": {
                            "count": {
                              "type": "number"
                            },
                            "next": {
                              "nullable": true,
                              "type": "number"
                            },
                            "prev": {
                              "nullable": true,
                              "type": "number"
                            }
                          },
                          "required": [
                            "count",
                            "next",
                            "prev"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "domains",
                        "pagination"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "domains": {
                          "items": {
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "apexName": {
                                "type": "string"
                              },
                              "projectId": {
                                "type": "string"
                              },
                              "redirect": {
                                "nullable": true,
                                "type": "string"
                              },
                              "redirectStatusCode": {
                                "nullable": true,
                                "type": "number",
                                "enum": [
                                  307,
                                  301,
                                  302,
                                  308
                                ]
                              },
                              "gitBranch": {
                                "nullable": true,
                                "type": "string"
                              },
                              "customEnvironmentId": {
                                "nullable": true,
                                "type": "string"
                              },
                              "updatedAt": {
                                "type": "number"
                              },
                              "createdAt": {
                                "type": "number"
                              },
                              "verified": {
                                "type": "boolean",
                                "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                              },
                              "verification": {
                                "items": {
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "domain": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "reason": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "domain",
                                    "value",
                                    "reason"
                                  ],
                                  "type": "object",
                                  "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                                },
                                "type": "array",
                                "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                              }
                            },
                            "required": [
                              "name",
                              "apexName",
                              "projectId",
                              "verified"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      },
                      "required": [
                        "domains",
                        "pagination"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "oneOf": [
                {
                  "type": "string"
                }
              ]
            }
          },
          {
            "name": "production",
            "description": "Filters only production domains when set to `true`.",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "description": "Filters only production domains when set to `true`.",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "target",
            "description": "Filters on the target of the domain. Can be either \\\"production\\\", \\\"preview\\\"",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filters on the target of the domain. Can be either \\\"production\\\", \\\"preview\\\"",
              "enum": [
                "production",
                "preview"
              ],
              "type": "string"
            }
          },
          {
            "name": "customEnvironmentId",
            "description": "The unique custom environment identifier within the project",
            "in": "query",
            "required": false,
            "schema": {
              "description": "The unique custom environment identifier within the project",
              "type": "string",
              "example": "env_123abc4567"
            }
          },
          {
            "name": "gitBranch",
            "description": "Filters domains based on specific branch.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filters domains based on specific branch.",
              "type": "string"
            }
          },
          {
            "name": "redirects",
            "description": "Excludes redirect project domains when \\\"false\\\". Includes redirect project domains when \\\"true\\\" (default).",
            "in": "query",
            "required": false,
            "schema": {
              "default": "true",
              "description": "Excludes redirect project domains when \\\"false\\\". Includes redirect project domains when \\\"true\\\" (default).",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "redirect",
            "description": "Filters domains based on their redirect target.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filters domains based on their redirect target.",
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "name": "verified",
            "description": "Filters domains based on their verification status.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filters domains based on their verification status.",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of domains to list from a request (max 100).",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Maximum number of domains to list from a request (max 100).",
              "type": "number",
              "example": 20
            }
          },
          {
            "name": "since",
            "description": "Get domains created after this JavaScript timestamp.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Get domains created after this JavaScript timestamp.",
              "type": "number",
              "example": 1609499532000
            }
          },
          {
            "name": "until",
            "description": "Get domains created before this JavaScript timestamp.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Get domains created before this JavaScript timestamp.",
              "type": "number",
              "example": 1612264332000
            }
          },
          {
            "name": "order",
            "description": "Domains sort order by createdAt",
            "in": "query",
            "required": false,
            "schema": {
              "default": "DESC",
              "description": "Domains sort order by createdAt",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v9/projects/{idOrName}/domains/{domain}": {
      "get": {
        "description": "Get project domain by project id/name and domain name.",
        "operationId": "getProjectDomain",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get a project domain",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "apexName": {
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string"
                    },
                    "redirect": {
                      "nullable": true,
                      "type": "string"
                    },
                    "redirectStatusCode": {
                      "nullable": true,
                      "type": "number",
                      "enum": [
                        307,
                        301,
                        302,
                        308
                      ]
                    },
                    "gitBranch": {
                      "nullable": true,
                      "type": "string"
                    },
                    "customEnvironmentId": {
                      "nullable": true,
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "verified": {
                      "type": "boolean",
                      "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                    },
                    "verification": {
                      "items": {
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "domain",
                          "value",
                          "reason"
                        ],
                        "type": "object",
                        "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                      },
                      "type": "array",
                      "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                    }
                  },
                  "required": [
                    "name",
                    "apexName",
                    "projectId",
                    "verified"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "name": "domain",
            "description": "The project domain name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The project domain name",
              "type": "string",
              "example": "www.example.com"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "patch": {
        "description": "Update a project domain's configuration, including the name, git branch and redirect of the domain.",
        "operationId": "updateProjectDomain",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update a project domain",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The domain was updated successfuly",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "apexName": {
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string"
                    },
                    "redirect": {
                      "nullable": true,
                      "type": "string"
                    },
                    "redirectStatusCode": {
                      "nullable": true,
                      "type": "number",
                      "enum": [
                        307,
                        301,
                        302,
                        308
                      ]
                    },
                    "gitBranch": {
                      "nullable": true,
                      "type": "string"
                    },
                    "customEnvironmentId": {
                      "nullable": true,
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "verified": {
                      "type": "boolean",
                      "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                    },
                    "verification": {
                      "items": {
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "domain",
                          "value",
                          "reason"
                        ],
                        "type": "object",
                        "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                      },
                      "type": "array",
                      "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                    }
                  },
                  "required": [
                    "name",
                    "apexName",
                    "projectId",
                    "verified"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nThe domain redirect is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "409": {
            "description": "The project is currently being transferred"
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "name": "domain",
            "description": "The project domain name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The project domain name",
              "type": "string",
              "example": "www.example.com"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "gitBranch": {
                    "description": "Git branch to link the project domain",
                    "example": null,
                    "type": "string",
                    "maxLength": 250,
                    "nullable": true
                  },
                  "redirect": {
                    "description": "Target destination domain for redirect",
                    "example": "foobar.com",
                    "type": "string",
                    "nullable": true
                  },
                  "redirectStatusCode": {
                    "description": "Status code for domain redirect",
                    "example": 307,
                    "type": "integer",
                    "enum": [
                      null,
                      301,
                      302,
                      307,
                      308
                    ],
                    "nullable": true
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "description": "Remove a domain from a project by passing the domain name and by specifying the project by either passing the project `id` or `name` in the URL.",
        "operationId": "removeProjectDomain",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Remove a domain from a project",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The domain was succesfully removed from the project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "The project is currently being transferred"
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "name": "domain",
            "description": "The project domain name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The project domain name",
              "type": "string",
              "example": "www.example.com"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "removeRedirects": {
                    "type": "boolean",
                    "description": "Whether to remove all domains from this project that redirect to the domain being removed."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v10/projects/{idOrName}/domains": {
      "post": {
        "description": "Add a domain to the project by passing its domain name and by specifying the project by either passing the project `id` or `name` in the URL. If the domain is not yet verified to be used on this project, the request will return `verified = false`, and the domain will need to be verified according to the `verification` challenge via `POST /projects/:idOrName/domains/:domain/verify`. If the domain already exists on the project, the request will fail with a `400` status code.",
        "operationId": "addProjectDomain",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Add a domain to a project",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The domain was successfully added to the project",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "apexName": {
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string"
                    },
                    "redirect": {
                      "nullable": true,
                      "type": "string"
                    },
                    "redirectStatusCode": {
                      "nullable": true,
                      "type": "number",
                      "enum": [
                        307,
                        301,
                        302,
                        308
                      ]
                    },
                    "gitBranch": {
                      "nullable": true,
                      "type": "string"
                    },
                    "customEnvironmentId": {
                      "nullable": true,
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "verified": {
                      "type": "boolean",
                      "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                    },
                    "verification": {
                      "items": {
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "domain",
                          "value",
                          "reason"
                        ],
                        "type": "object",
                        "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                      },
                      "type": "array",
                      "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                    }
                  },
                  "required": [
                    "name",
                    "apexName",
                    "projectId",
                    "verified"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nThe domain is not valid\nYou can't set both a git branch and a redirect for the domain\nThe domain can not be added because the latest production deployment for the project was not successful\nThe domain redirect is not valid\nA domain cannot redirect to itself\nYou can not set the production branch as a branch for your domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource.\nYou don't have access to the domain you are adding"
          },
          "409": {
            "description": "The domain is already assigned to another Vercel project\nCannot create project domain since owner already has `domain` on their account, but it's not verified yet.\nCannot create project domain since owner already has `domain` on their account, and it's verified.\nThe domain is not allowed to be used\nThe project is currently being transferred"
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The project domain name",
                    "example": "www.example.com",
                    "type": "string"
                  },
                  "gitBranch": {
                    "description": "Git branch to link the project domain",
                    "example": null,
                    "maxLength": 250,
                    "type": "string",
                    "nullable": true
                  },
                  "customEnvironmentId": {
                    "description": "The unique custom environment identifier within the project",
                    "type": "string"
                  },
                  "redirect": {
                    "description": "Target destination domain for redirect",
                    "example": "foobar.com",
                    "type": "string",
                    "nullable": true
                  },
                  "redirectStatusCode": {
                    "description": "Status code for domain redirect",
                    "example": 307,
                    "type": "integer",
                    "enum": [
                      null,
                      301,
                      302,
                      307,
                      308
                    ],
                    "nullable": true
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/projects/{idOrName}/domains/{domain}/move": {
      "post": {
        "description": "Move one project's domain to another project. Also allows the move of all redirects pointed to that domain in the same project.",
        "operationId": "moveProjectDomain",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Move a project domain",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The domain was updated successfuly",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "apexName": {
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string"
                    },
                    "redirect": {
                      "nullable": true,
                      "type": "string"
                    },
                    "redirectStatusCode": {
                      "nullable": true,
                      "type": "number",
                      "enum": [
                        307,
                        301,
                        302,
                        308
                      ]
                    },
                    "gitBranch": {
                      "nullable": true,
                      "type": "string"
                    },
                    "customEnvironmentId": {
                      "nullable": true,
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "verified": {
                      "type": "boolean",
                      "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                    },
                    "verification": {
                      "items": {
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "domain",
                          "value",
                          "reason"
                        ],
                        "type": "object",
                        "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                      },
                      "type": "array",
                      "description": "A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`."
                    }
                  },
                  "required": [
                    "name",
                    "apexName",
                    "projectId",
                    "verified"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "409": {
            "description": "The project is currently being transferred"
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "name": "domain",
            "description": "The project domain name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The project domain name",
              "type": "string",
              "example": "www.example.com"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "projectId"
                ],
                "properties": {
                  "projectId": {
                    "description": "The unique target project identifier",
                    "example": "prj_XLKmu1DyR1eY7zq8UgeRKbA7yVLA",
                    "oneOf": [
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/v9/projects/{idOrName}/domains/{domain}/verify": {
      "post": {
        "description": "Attempts to verify a project domain with `verified = false` by checking the correctness of the project domain's `verification` challenge.",
        "operationId": "verifyProjectDomain",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Verify project domain",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The project domain was verified successfully\nDomain is already verified",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "apexName": {
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string"
                    },
                    "redirect": {
                      "nullable": true,
                      "type": "string"
                    },
                    "redirectStatusCode": {
                      "nullable": true,
                      "type": "number",
                      "enum": [
                        307,
                        301,
                        302,
                        308
                      ]
                    },
                    "gitBranch": {
                      "nullable": true,
                      "type": "string"
                    },
                    "customEnvironmentId": {
                      "nullable": true,
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "number"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "verified": {
                      "type": "boolean",
                      "description": "`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed."
                    }
                  },
                  "required": [
                    "name",
                    "apexName",
                    "projectId",
                    "verified"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.\nThere is an existing TXT record on the domain verifying it for another project\nThe domain does not have a TXT record that attempts to verify the project domain\nThe TXT record on the domain does not match the expected challenge for the project domain\nProject domain is not assigned to project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "example": "prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB",
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "name": "domain",
            "description": "The domain name you want to verify",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The domain name you want to verify",
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v10/projects/{idOrName}/env": {
      "get": {
        "description": "Retrieve the environment variables for a given project by passing either the project `id` or `name` in the URL.",
        "operationId": "filterProjectEnvs",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Retrieve the environment variables of a project by id or name",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The list of environment variables for the given project",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "target": {
                          "oneOf": [
                            {
                              "items": {
                                "type": "string",
                                "enum": [
                                  "production",
                                  "preview",
                                  "development",
                                  "preview",
                                  "development"
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "production",
                                "preview",
                                "development",
                                "preview",
                                "development"
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "system",
                            "encrypted",
                            "plain",
                            "sensitive",
                            "secret"
                          ]
                        },
                        "sunsetSecretId": {
                          "type": "string",
                          "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                        },
                        "decrypted": {
                          "type": "boolean"
                        },
                        "value": {
                          "type": "string"
                        },
                        "vsmValue": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string"
                        },
                        "configurationId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "createdBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "updatedBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "gitBranch": {
                          "type": "string"
                        },
                        "edgeConfigId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "edgeConfigTokenId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "contentHint": {
                          "nullable": true,
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-read-only-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "blob-read-write-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-non-pooling"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-prisma-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-user"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-host"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-password"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-database"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-no-ssl"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "integration-store-secret"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                },
                                "integrationId": {
                                  "type": "string"
                                },
                                "integrationProductId": {
                                  "type": "string"
                                },
                                "integrationConfigurationId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId",
                                "integrationId",
                                "integrationProductId",
                                "integrationConfigurationId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "flags-connection-string"
                                  ]
                                },
                                "projectId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "projectId"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "internalContentHint": {
                          "nullable": true,
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "flags-secret"
                              ]
                            },
                            "encryptedValue": {
                              "type": "string",
                              "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                            }
                          },
                          "required": [
                            "type",
                            "encryptedValue"
                          ],
                          "type": "object",
                          "description": "Similar to `contentHints`, but should not be exposed to the user."
                        },
                        "comment": {
                          "type": "string"
                        },
                        "customEnvironmentIds": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "system": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "type",
                        "value",
                        "key"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "envs": {
                          "items": {
                            "properties": {
                              "target": {
                                "oneOf": [
                                  {
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "production",
                                        "preview",
                                        "development",
                                        "preview",
                                        "development"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  {
                                    "type": "string",
                                    "enum": [
                                      "production",
                                      "preview",
                                      "development",
                                      "preview",
                                      "development"
                                    ]
                                  }
                                ]
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "system",
                                  "encrypted",
                                  "plain",
                                  "sensitive",
                                  "secret"
                                ]
                              },
                              "sunsetSecretId": {
                                "type": "string",
                                "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                              },
                              "decrypted": {
                                "type": "boolean"
                              },
                              "value": {
                                "type": "string"
                              },
                              "vsmValue": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "key": {
                                "type": "string"
                              },
                              "configurationId": {
                                "nullable": true,
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "number"
                              },
                              "updatedAt": {
                                "type": "number"
                              },
                              "createdBy": {
                                "nullable": true,
                                "type": "string"
                              },
                              "updatedBy": {
                                "nullable": true,
                                "type": "string"
                              },
                              "gitBranch": {
                                "type": "string"
                              },
                              "edgeConfigId": {
                                "nullable": true,
                                "type": "string"
                              },
                              "edgeConfigTokenId": {
                                "nullable": true,
                                "type": "string"
                              },
                              "contentHint": {
                                "nullable": true,
                                "oneOf": [
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "redis-url"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "redis-rest-api-url"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "redis-rest-api-token"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "redis-rest-api-read-only-token"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "blob-read-write-token"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-url"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-url-non-pooling"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-prisma-url"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-user"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-host"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-password"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-database"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-url-no-ssl"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "integration-store-secret"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      },
                                      "integrationId": {
                                        "type": "string"
                                      },
                                      "integrationProductId": {
                                        "type": "string"
                                      },
                                      "integrationConfigurationId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId",
                                      "integrationId",
                                      "integrationProductId",
                                      "integrationConfigurationId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "flags-connection-string"
                                        ]
                                      },
                                      "projectId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "projectId"
                                    ],
                                    "type": "object"
                                  }
                                ]
                              },
                              "internalContentHint": {
                                "nullable": true,
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "flags-secret"
                                    ]
                                  },
                                  "encryptedValue": {
                                    "type": "string",
                                    "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                                  }
                                },
                                "required": [
                                  "type",
                                  "encryptedValue"
                                ],
                                "type": "object",
                                "description": "Similar to `contentHints`, but should not be exposed to the user."
                              },
                              "comment": {
                                "type": "string"
                              },
                              "customEnvironmentIds": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "system": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "type",
                              "value",
                              "key"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      },
                      "required": [
                        "envs",
                        "pagination"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "envs": {
                          "items": {
                            "properties": {
                              "target": {
                                "oneOf": [
                                  {
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "production",
                                        "preview",
                                        "development",
                                        "preview",
                                        "development"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  {
                                    "type": "string",
                                    "enum": [
                                      "production",
                                      "preview",
                                      "development",
                                      "preview",
                                      "development"
                                    ]
                                  }
                                ]
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "system",
                                  "encrypted",
                                  "plain",
                                  "sensitive",
                                  "secret"
                                ]
                              },
                              "sunsetSecretId": {
                                "type": "string",
                                "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                              },
                              "decrypted": {
                                "type": "boolean"
                              },
                              "value": {
                                "type": "string"
                              },
                              "vsmValue": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "key": {
                                "type": "string"
                              },
                              "configurationId": {
                                "nullable": true,
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "number"
                              },
                              "updatedAt": {
                                "type": "number"
                              },
                              "createdBy": {
                                "nullable": true,
                                "type": "string"
                              },
                              "updatedBy": {
                                "nullable": true,
                                "type": "string"
                              },
                              "gitBranch": {
                                "type": "string"
                              },
                              "edgeConfigId": {
                                "nullable": true,
                                "type": "string"
                              },
                              "edgeConfigTokenId": {
                                "nullable": true,
                                "type": "string"
                              },
                              "contentHint": {
                                "nullable": true,
                                "oneOf": [
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "redis-url"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "redis-rest-api-url"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "redis-rest-api-token"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "redis-rest-api-read-only-token"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "blob-read-write-token"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-url"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-url-non-pooling"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-prisma-url"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-user"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-host"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-password"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-database"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-url-no-ssl"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "integration-store-secret"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      },
                                      "integrationId": {
                                        "type": "string"
                                      },
                                      "integrationProductId": {
                                        "type": "string"
                                      },
                                      "integrationConfigurationId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId",
                                      "integrationId",
                                      "integrationProductId",
                                      "integrationConfigurationId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "flags-connection-string"
                                        ]
                                      },
                                      "projectId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "projectId"
                                    ],
                                    "type": "object"
                                  }
                                ]
                              },
                              "internalContentHint": {
                                "nullable": true,
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "flags-secret"
                                    ]
                                  },
                                  "encryptedValue": {
                                    "type": "string",
                                    "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                                  }
                                },
                                "required": [
                                  "type",
                                  "encryptedValue"
                                ],
                                "type": "object",
                                "description": "Similar to `contentHints`, but should not be exposed to the user."
                              },
                              "comment": {
                                "type": "string"
                              },
                              "customEnvironmentIds": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "system": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "type",
                              "value",
                              "key"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "envs"
                      ],
                      "type": "object",
                      "description": "The list of environment variables for the given project"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string",
              "example": "prj_XLKmu1DyR1eY7zq8UgeRKbA7yVLA"
            }
          },
          {
            "name": "gitBranch",
            "description": "If defined, the git branch of the environment variable to filter the results (must have target=preview)",
            "in": "query",
            "required": false,
            "schema": {
              "description": "If defined, the git branch of the environment variable to filter the results (must have target=preview)",
              "type": "string",
              "maxLength": 250,
              "example": "feature-1"
            }
          },
          {
            "name": "decrypt",
            "description": "If true, the environment variable value will be decrypted",
            "in": "query",
            "required": false,
            "schema": {
              "description": "If true, the environment variable value will be decrypted",
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "example": "true",
              "deprecated": true
            }
          },
          {
            "name": "source",
            "description": "The source that is calling the endpoint.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "The source that is calling the endpoint.",
              "type": "string",
              "example": "vercel-cli:pull"
            }
          },
          {
            "name": "customEnvironmentId",
            "description": "The unique custom environment identifier within the project",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The unique custom environment identifier within the project",
              "example": "env_123abc4567"
            }
          },
          {
            "name": "customEnvironmentSlug",
            "description": "The custom environment slug (name) within the project",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The custom environment slug (name) within the project",
              "example": "my-custom-env"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "x-speakeasy-test": false
      },
      "post": {
        "description": "Create one or more environment variables for a project by passing its `key`, `value`, `type` and `target` and by specifying the project by either passing the project `id` or `name` in the URL. If you include `upsert=true` as a query parameter, a new environment variable will not be created if it already exists but, the existing variable's value will be updated.",
        "operationId": "createProjectEnv",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create one or more environment variables",
        "tags": [
          "projects"
        ],
        "responses": {
          "201": {
            "description": "The environment variable was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "created": {
                      "oneOf": [
                        {
                          "properties": {
                            "target": {
                              "oneOf": [
                                {
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "production",
                                      "preview",
                                      "development"
                                    ]
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string",
                                  "enum": [
                                    "production",
                                    "preview",
                                    "development"
                                  ]
                                }
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "system",
                                "encrypted",
                                "plain",
                                "sensitive",
                                "secret"
                              ]
                            },
                            "sunsetSecretId": {
                              "type": "string",
                              "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                            },
                            "decrypted": {
                              "type": "boolean"
                            },
                            "value": {
                              "type": "string"
                            },
                            "vsmValue": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            },
                            "configurationId": {
                              "nullable": true,
                              "type": "string"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "updatedAt": {
                              "type": "number"
                            },
                            "createdBy": {
                              "nullable": true,
                              "type": "string"
                            },
                            "updatedBy": {
                              "nullable": true,
                              "type": "string"
                            },
                            "gitBranch": {
                              "type": "string"
                            },
                            "edgeConfigId": {
                              "nullable": true,
                              "type": "string"
                            },
                            "edgeConfigTokenId": {
                              "nullable": true,
                              "type": "string"
                            },
                            "contentHint": {
                              "nullable": true,
                              "oneOf": [
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "redis-url"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "redis-rest-api-url"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "redis-rest-api-token"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "redis-rest-api-read-only-token"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "blob-read-write-token"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "postgres-url"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "postgres-url-non-pooling"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "postgres-prisma-url"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "postgres-user"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "postgres-host"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "postgres-password"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "postgres-database"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "postgres-url-no-ssl"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "integration-store-secret"
                                      ]
                                    },
                                    "storeId": {
                                      "type": "string"
                                    },
                                    "integrationId": {
                                      "type": "string"
                                    },
                                    "integrationProductId": {
                                      "type": "string"
                                    },
                                    "integrationConfigurationId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "storeId",
                                    "integrationId",
                                    "integrationProductId",
                                    "integrationConfigurationId"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "flags-connection-string"
                                      ]
                                    },
                                    "projectId": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "projectId"
                                  ],
                                  "type": "object"
                                }
                              ]
                            },
                            "internalContentHint": {
                              "nullable": true,
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "flags-secret"
                                  ]
                                },
                                "encryptedValue": {
                                  "type": "string",
                                  "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                                }
                              },
                              "required": [
                                "type",
                                "encryptedValue"
                              ],
                              "type": "object",
                              "description": "Similar to `contentHints`, but should not be exposed to the user."
                            },
                            "comment": {
                              "type": "string"
                            },
                            "customEnvironmentIds": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "system": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "type",
                            "value",
                            "key"
                          ],
                          "type": "object"
                        },
                        {
                          "items": {
                            "properties": {
                              "target": {
                                "oneOf": [
                                  {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  {
                                    "type": "string",
                                    "enum": [
                                      "production",
                                      "preview",
                                      "development"
                                    ]
                                  }
                                ]
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "system",
                                  "encrypted",
                                  "plain",
                                  "sensitive",
                                  "secret"
                                ]
                              },
                              "sunsetSecretId": {
                                "type": "string",
                                "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                              },
                              "decrypted": {
                                "type": "boolean"
                              },
                              "value": {
                                "type": "string"
                              },
                              "vsmValue": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "key": {
                                "type": "string"
                              },
                              "configurationId": {
                                "nullable": true,
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "number"
                              },
                              "updatedAt": {
                                "type": "number"
                              },
                              "createdBy": {
                                "nullable": true,
                                "type": "string"
                              },
                              "updatedBy": {
                                "nullable": true,
                                "type": "string"
                              },
                              "gitBranch": {
                                "type": "string"
                              },
                              "edgeConfigId": {
                                "nullable": true,
                                "type": "string"
                              },
                              "edgeConfigTokenId": {
                                "nullable": true,
                                "type": "string"
                              },
                              "contentHint": {
                                "nullable": true,
                                "oneOf": [
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "redis-url"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "redis-rest-api-url"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "redis-rest-api-token"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "redis-rest-api-read-only-token"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "blob-read-write-token"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-url"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-url-non-pooling"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-prisma-url"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-user"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-host"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-password"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-database"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "postgres-url-no-ssl"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "integration-store-secret"
                                        ]
                                      },
                                      "storeId": {
                                        "type": "string"
                                      },
                                      "integrationId": {
                                        "type": "string"
                                      },
                                      "integrationProductId": {
                                        "type": "string"
                                      },
                                      "integrationConfigurationId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "storeId",
                                      "integrationId",
                                      "integrationProductId",
                                      "integrationConfigurationId"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "flags-connection-string"
                                        ]
                                      },
                                      "projectId": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "projectId"
                                    ],
                                    "type": "object"
                                  }
                                ]
                              },
                              "internalContentHint": {
                                "nullable": true,
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "flags-secret"
                                    ]
                                  },
                                  "encryptedValue": {
                                    "type": "string",
                                    "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                                  }
                                },
                                "required": [
                                  "type",
                                  "encryptedValue"
                                ],
                                "type": "object",
                                "description": "Similar to `contentHints`, but should not be exposed to the user."
                              },
                              "comment": {
                                "type": "string"
                              },
                              "customEnvironmentIds": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "system": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "type",
                              "value",
                              "key"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      ]
                    },
                    "failed": {
                      "items": {
                        "properties": {
                          "error": {
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              },
                              "key": {
                                "type": "string"
                              },
                              "envVarId": {
                                "type": "string"
                              },
                              "envVarKey": {
                                "type": "string"
                              },
                              "action": {
                                "type": "string"
                              },
                              "link": {
                                "type": "string"
                              },
                              "value": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "production",
                                        "preview",
                                        "development"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                ]
                              },
                              "gitBranch": {
                                "type": "string"
                              },
                              "target": {
                                "oneOf": [
                                  {
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "production",
                                        "preview",
                                        "development",
                                        "preview",
                                        "development"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  {
                                    "type": "string",
                                    "enum": [
                                      "production",
                                      "preview",
                                      "development"
                                    ]
                                  }
                                ]
                              },
                              "project": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "code",
                              "message"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "error"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "created",
                    "failed"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nThe environment variable coudn't be created because an ongoing update env update is already happening\nThe environment variable coudn't be created because project document is too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource.\nThe environment variable cannot be created because it already exists\nAdditional permissions are required to create production environment variables"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "The project is being transfered and creating an environment variable is not possible"
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelRateLimitError"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string",
              "example": "prj_XLKmu1DyR1eY7zq8UgeRKbA7yVLA"
            }
          },
          {
            "name": "upsert",
            "description": "Allow override of environment variable if it already exists",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Allow override of environment variable if it already exists",
              "type": "string",
              "example": "true"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "key",
                      "value",
                      "type"
                    ],
                    "anyOf": [
                      {
                        "required": [
                          "target"
                        ]
                      },
                      {
                        "required": [
                          "customEnvironmentIds"
                        ]
                      }
                    ],
                    "properties": {
                      "key": {
                        "description": "The name of the environment variable",
                        "type": "string",
                        "example": "API_URL"
                      },
                      "value": {
                        "description": "The value of the environment variable",
                        "type": "string",
                        "example": "https://api.vercel.com"
                      },
                      "type": {
                        "description": "The type of environment variable",
                        "type": "string",
                        "enum": [
                          "system",
                          "secret",
                          "encrypted",
                          "plain",
                          "sensitive"
                        ],
                        "example": "plain"
                      },
                      "target": {
                        "description": "The target environment of the environment variable",
                        "type": "array",
                        "items": {
                          "enum": [
                            "production",
                            "preview",
                            "development"
                          ]
                        },
                        "example": [
                          "preview"
                        ]
                      },
                      "gitBranch": {
                        "description": "If defined, the git branch of the environment variable (must have target=preview)",
                        "type": "string",
                        "maxLength": 250,
                        "example": "feature-1",
                        "nullable": true
                      },
                      "comment": {
                        "type": "string",
                        "description": "A comment to add context on what this environment variable is for",
                        "example": "database connection string for production",
                        "maxLength": 500
                      },
                      "customEnvironmentIds": {
                        "type": "array",
                        "description": "The custom environment IDs associated with the environment variable",
                        "items": {
                          "type": "string",
                          "example": "env_1234567890"
                        }
                      }
                    }
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "key",
                        "value",
                        "type"
                      ],
                      "anyOf": [
                        {
                          "required": [
                            "target"
                          ]
                        },
                        {
                          "required": [
                            "customEnvironmentIds"
                          ]
                        }
                      ],
                      "properties": {
                        "key": {
                          "description": "The name of the environment variable",
                          "type": "string",
                          "example": "API_URL"
                        },
                        "value": {
                          "description": "The value of the environment variable",
                          "type": "string",
                          "example": "https://api.vercel.com"
                        },
                        "type": {
                          "description": "The type of environment variable",
                          "type": "string",
                          "enum": [
                            "system",
                            "secret",
                            "encrypted",
                            "plain",
                            "sensitive"
                          ],
                          "example": "plain"
                        },
                        "target": {
                          "description": "The target environment of the environment variable",
                          "type": "array",
                          "items": {
                            "enum": [
                              "production",
                              "preview",
                              "development"
                            ]
                          },
                          "example": [
                            "preview"
                          ]
                        },
                        "gitBranch": {
                          "description": "If defined, the git branch of the environment variable (must have target=preview)",
                          "type": "string",
                          "maxLength": 250,
                          "example": "feature-1",
                          "nullable": true
                        },
                        "comment": {
                          "type": "string",
                          "description": "A comment to add context on what this environment variable is for",
                          "example": "database connection string for production",
                          "maxLength": 500
                        },
                        "customEnvironmentIds": {
                          "type": "array",
                          "description": "The custom environment IDs associated with the environment variable",
                          "items": {
                            "type": "string",
                            "example": "env_1234567890"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/projects/{idOrName}/env/{id}": {
      "get": {
        "description": "Retrieve the environment variable for a given project.",
        "operationId": "getProjectEnv",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Retrieve the decrypted value of an environment variable of a project by id",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "decrypted": {
                          "type": "boolean"
                        },
                        "target": {
                          "oneOf": [
                            {
                              "items": {
                                "type": "string",
                                "enum": [
                                  "production",
                                  "preview",
                                  "development",
                                  "preview",
                                  "development"
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "production",
                                "preview",
                                "development"
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "system",
                            "encrypted",
                            "plain",
                            "sensitive",
                            "secret"
                          ]
                        },
                        "sunsetSecretId": {
                          "type": "string",
                          "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                        },
                        "id": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string"
                        },
                        "configurationId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "createdBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "updatedBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "gitBranch": {
                          "type": "string"
                        },
                        "edgeConfigId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "edgeConfigTokenId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "contentHint": {
                          "nullable": true,
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-read-only-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "blob-read-write-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-non-pooling"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-prisma-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-user"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-host"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-password"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-database"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-no-ssl"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "integration-store-secret"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                },
                                "integrationId": {
                                  "type": "string"
                                },
                                "integrationProductId": {
                                  "type": "string"
                                },
                                "integrationConfigurationId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId",
                                "integrationId",
                                "integrationProductId",
                                "integrationConfigurationId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "flags-connection-string"
                                  ]
                                },
                                "projectId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "projectId"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "internalContentHint": {
                          "nullable": true,
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "flags-secret"
                              ]
                            },
                            "encryptedValue": {
                              "type": "string",
                              "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                            }
                          },
                          "required": [
                            "type",
                            "encryptedValue"
                          ],
                          "type": "object",
                          "description": "Similar to `contentHints`, but should not be exposed to the user."
                        },
                        "comment": {
                          "type": "string"
                        },
                        "customEnvironmentIds": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "decrypted",
                        "type",
                        "key"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "target": {
                          "oneOf": [
                            {
                              "items": {
                                "type": "string",
                                "enum": [
                                  "production",
                                  "preview",
                                  "development"
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "production",
                                "preview",
                                "development"
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "system",
                            "encrypted",
                            "plain",
                            "sensitive",
                            "secret"
                          ]
                        },
                        "sunsetSecretId": {
                          "type": "string",
                          "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                        },
                        "decrypted": {
                          "type": "boolean"
                        },
                        "value": {
                          "type": "string"
                        },
                        "vsmValue": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string"
                        },
                        "configurationId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "createdBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "updatedBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "gitBranch": {
                          "type": "string"
                        },
                        "edgeConfigId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "edgeConfigTokenId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "contentHint": {
                          "nullable": true,
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-read-only-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "blob-read-write-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-non-pooling"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-prisma-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-user"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-host"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-password"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-database"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-no-ssl"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "integration-store-secret"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                },
                                "integrationId": {
                                  "type": "string"
                                },
                                "integrationProductId": {
                                  "type": "string"
                                },
                                "integrationConfigurationId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId",
                                "integrationId",
                                "integrationProductId",
                                "integrationConfigurationId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "flags-connection-string"
                                  ]
                                },
                                "projectId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "projectId"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "internalContentHint": {
                          "nullable": true,
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "flags-secret"
                              ]
                            },
                            "encryptedValue": {
                              "type": "string",
                              "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                            }
                          },
                          "required": [
                            "type",
                            "encryptedValue"
                          ],
                          "type": "object",
                          "description": "Similar to `contentHints`, but should not be exposed to the user."
                        },
                        "comment": {
                          "type": "string"
                        },
                        "customEnvironmentIds": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "type",
                        "value",
                        "key"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "target": {
                          "oneOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "production",
                                "preview",
                                "development"
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "system",
                            "encrypted",
                            "plain",
                            "sensitive",
                            "secret"
                          ]
                        },
                        "sunsetSecretId": {
                          "type": "string",
                          "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                        },
                        "decrypted": {
                          "type": "boolean"
                        },
                        "value": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string"
                        },
                        "configurationId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "createdBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "updatedBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "gitBranch": {
                          "type": "string"
                        },
                        "edgeConfigId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "edgeConfigTokenId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "contentHint": {
                          "nullable": true,
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-read-only-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "blob-read-write-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-non-pooling"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-prisma-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-user"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-host"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-password"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-database"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-no-ssl"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "integration-store-secret"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                },
                                "integrationId": {
                                  "type": "string"
                                },
                                "integrationProductId": {
                                  "type": "string"
                                },
                                "integrationConfigurationId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId",
                                "integrationId",
                                "integrationProductId",
                                "integrationConfigurationId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "flags-connection-string"
                                  ]
                                },
                                "projectId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "projectId"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "internalContentHint": {
                          "nullable": true,
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "flags-secret"
                              ]
                            },
                            "encryptedValue": {
                              "type": "string",
                              "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                            }
                          },
                          "required": [
                            "type",
                            "encryptedValue"
                          ],
                          "type": "object",
                          "description": "Similar to `contentHints`, but should not be exposed to the user."
                        },
                        "comment": {
                          "type": "string"
                        },
                        "customEnvironmentIds": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "type",
                        "value",
                        "key"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string",
              "example": "prj_XLKmu1DyR1eY7zq8UgeRKbA7yVLA"
            }
          },
          {
            "name": "id",
            "description": "The unique ID for the environment variable to get the decrypted value.",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique ID for the environment variable to get the decrypted value.",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v9/projects/{idOrName}/env/{id}": {
      "delete": {
        "description": "Delete a specific environment variable for a given project by passing the environment variable identifier and either passing the project `id` or `name` in the URL.",
        "operationId": "removeProjectEnv",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Remove an environment variable",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The environment variable was successfully removed",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "properties": {
                          "target": {
                            "oneOf": [
                              {
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "production",
                                    "preview",
                                    "development",
                                    "preview",
                                    "development"
                                  ]
                                },
                                "type": "array"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "production",
                                  "preview",
                                  "development"
                                ]
                              }
                            ]
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "system",
                              "encrypted",
                              "plain",
                              "sensitive",
                              "secret"
                            ]
                          },
                          "sunsetSecretId": {
                            "type": "string",
                            "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                          },
                          "decrypted": {
                            "type": "boolean"
                          },
                          "value": {
                            "type": "string"
                          },
                          "vsmValue": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "key": {
                            "type": "string"
                          },
                          "configurationId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          },
                          "createdBy": {
                            "nullable": true,
                            "type": "string"
                          },
                          "updatedBy": {
                            "nullable": true,
                            "type": "string"
                          },
                          "gitBranch": {
                            "type": "string"
                          },
                          "edgeConfigId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "edgeConfigTokenId": {
                            "nullable": true,
                            "type": "string"
                          },
                          "contentHint": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "redis-rest-api-read-only-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "blob-read-write-token"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url-non-pooling"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-prisma-url"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-user"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-host"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-password"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-database"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "postgres-url-no-ssl"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "integration-store-secret"
                                    ]
                                  },
                                  "storeId": {
                                    "type": "string"
                                  },
                                  "integrationId": {
                                    "type": "string"
                                  },
                                  "integrationProductId": {
                                    "type": "string"
                                  },
                                  "integrationConfigurationId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "storeId",
                                  "integrationId",
                                  "integrationProductId",
                                  "integrationConfigurationId"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "flags-connection-string"
                                    ]
                                  },
                                  "projectId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "projectId"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "internalContentHint": {
                            "nullable": true,
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "flags-secret"
                                ]
                              },
                              "encryptedValue": {
                                "type": "string",
                                "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                              }
                            },
                            "required": [
                              "type",
                              "encryptedValue"
                            ],
                            "type": "object",
                            "description": "Similar to `contentHints`, but should not be exposed to the user."
                          },
                          "comment": {
                            "type": "string"
                          },
                          "customEnvironmentIds": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "type",
                          "value",
                          "key"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "system": {
                          "type": "boolean"
                        },
                        "target": {
                          "oneOf": [
                            {
                              "items": {
                                "type": "string",
                                "enum": [
                                  "production",
                                  "preview",
                                  "development",
                                  "preview",
                                  "development"
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "production",
                                "preview",
                                "development"
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "system",
                            "encrypted",
                            "plain",
                            "sensitive",
                            "secret"
                          ]
                        },
                        "sunsetSecretId": {
                          "type": "string",
                          "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                        },
                        "decrypted": {
                          "type": "boolean"
                        },
                        "value": {
                          "type": "string"
                        },
                        "vsmValue": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string"
                        },
                        "configurationId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "createdBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "updatedBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "gitBranch": {
                          "type": "string"
                        },
                        "edgeConfigId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "edgeConfigTokenId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "contentHint": {
                          "nullable": true,
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-read-only-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "blob-read-write-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-non-pooling"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-prisma-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-user"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-host"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-password"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-database"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-no-ssl"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "integration-store-secret"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                },
                                "integrationId": {
                                  "type": "string"
                                },
                                "integrationProductId": {
                                  "type": "string"
                                },
                                "integrationConfigurationId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId",
                                "integrationId",
                                "integrationProductId",
                                "integrationConfigurationId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "flags-connection-string"
                                  ]
                                },
                                "projectId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "projectId"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "internalContentHint": {
                          "nullable": true,
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "flags-secret"
                              ]
                            },
                            "encryptedValue": {
                              "type": "string",
                              "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                            }
                          },
                          "required": [
                            "type",
                            "encryptedValue"
                          ],
                          "type": "object",
                          "description": "Similar to `contentHints`, but should not be exposed to the user."
                        },
                        "comment": {
                          "type": "string"
                        },
                        "customEnvironmentIds": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "type",
                        "value",
                        "key"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "target": {
                          "oneOf": [
                            {
                              "items": {
                                "type": "string",
                                "enum": [
                                  "production",
                                  "preview",
                                  "development",
                                  "preview",
                                  "development"
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "production",
                                "preview",
                                "development"
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "system",
                            "encrypted",
                            "plain",
                            "sensitive",
                            "secret"
                          ]
                        },
                        "sunsetSecretId": {
                          "type": "string",
                          "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                        },
                        "decrypted": {
                          "type": "boolean"
                        },
                        "value": {
                          "type": "string"
                        },
                        "vsmValue": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string"
                        },
                        "configurationId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "createdBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "updatedBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "gitBranch": {
                          "type": "string"
                        },
                        "edgeConfigId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "edgeConfigTokenId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "contentHint": {
                          "nullable": true,
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-read-only-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "blob-read-write-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-non-pooling"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-prisma-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-user"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-host"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-password"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-database"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-no-ssl"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "integration-store-secret"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                },
                                "integrationId": {
                                  "type": "string"
                                },
                                "integrationProductId": {
                                  "type": "string"
                                },
                                "integrationConfigurationId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId",
                                "integrationId",
                                "integrationProductId",
                                "integrationConfigurationId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "flags-connection-string"
                                  ]
                                },
                                "projectId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "projectId"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "internalContentHint": {
                          "nullable": true,
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "flags-secret"
                              ]
                            },
                            "encryptedValue": {
                              "type": "string",
                              "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                            }
                          },
                          "required": [
                            "type",
                            "encryptedValue"
                          ],
                          "type": "object",
                          "description": "Similar to `contentHints`, but should not be exposed to the user."
                        },
                        "comment": {
                          "type": "string"
                        },
                        "customEnvironmentIds": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "type",
                        "value",
                        "key"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "The project is being transfered and removing an environment variable is not possible"
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string",
              "example": "prj_XLKmu1DyR1eY7zq8UgeRKbA7yVLA"
            }
          },
          {
            "name": "id",
            "description": "The unique environment variable identifier",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique environment variable identifier",
              "type": "string",
              "example": "XMbOEya1gUUO1ir4"
            }
          },
          {
            "name": "customEnvironmentId",
            "description": "The unique custom environment identifier within the project",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The unique custom environment identifier within the project",
              "example": "env_123abc4567"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "patch": {
        "description": "Edit a specific environment variable for a given project by passing the environment variable identifier and either passing the project `id` or `name` in the URL.",
        "operationId": "editProjectEnv",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Edit an environment variable",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The environment variable was successfully edited",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "target": {
                          "oneOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string",
                              "enum": [
                                "production",
                                "preview",
                                "development"
                              ]
                            }
                          ]
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "system",
                            "encrypted",
                            "plain",
                            "sensitive",
                            "secret"
                          ]
                        },
                        "sunsetSecretId": {
                          "type": "string",
                          "description": "This is used to identiy variables that have been migrated from type secret to sensitive."
                        },
                        "decrypted": {
                          "type": "boolean"
                        },
                        "value": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string"
                        },
                        "configurationId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        },
                        "createdBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "updatedBy": {
                          "nullable": true,
                          "type": "string"
                        },
                        "gitBranch": {
                          "type": "string"
                        },
                        "edgeConfigId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "edgeConfigTokenId": {
                          "nullable": true,
                          "type": "string"
                        },
                        "contentHint": {
                          "nullable": true,
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "redis-rest-api-read-only-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "blob-read-write-token"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-non-pooling"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-prisma-url"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-user"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-host"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-password"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-database"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "postgres-url-no-ssl"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "integration-store-secret"
                                  ]
                                },
                                "storeId": {
                                  "type": "string"
                                },
                                "integrationId": {
                                  "type": "string"
                                },
                                "integrationProductId": {
                                  "type": "string"
                                },
                                "integrationConfigurationId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "storeId",
                                "integrationId",
                                "integrationProductId",
                                "integrationConfigurationId"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "flags-connection-string"
                                  ]
                                },
                                "projectId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "projectId"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "internalContentHint": {
                          "nullable": true,
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "flags-secret"
                              ]
                            },
                            "encryptedValue": {
                              "type": "string",
                              "description": "Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda."
                            }
                          },
                          "required": [
                            "type",
                            "encryptedValue"
                          ],
                          "type": "object",
                          "description": "Similar to `contentHints`, but should not be exposed to the user."
                        },
                        "comment": {
                          "type": "string"
                        },
                        "customEnvironmentIds": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "type",
                        "value",
                        "key"
                      ],
                      "type": "object"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nAt least one environment variable failed validation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "The project is being transfered and removing an environment variable is not possible"
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelRateLimitError"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string",
              "example": "prj_XLKmu1DyR1eY7zq8UgeRKbA7yVLA"
            }
          },
          {
            "name": "id",
            "description": "The unique environment variable identifier",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique environment variable identifier",
              "type": "string",
              "example": "XMbOEya1gUUO1ir4"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "key": {
                    "description": "The name of the environment variable",
                    "type": "string",
                    "example": "GITHUB_APP_ID"
                  },
                  "target": {
                    "description": "The target environment of the environment variable",
                    "type": "array",
                    "items": {
                      "enum": [
                        "production",
                        "preview",
                        "development"
                      ]
                    },
                    "example": [
                      "preview"
                    ]
                  },
                  "gitBranch": {
                    "description": "If defined, the git branch of the environment variable (must have target=preview)",
                    "type": "string",
                    "maxLength": 250,
                    "example": "feature-1",
                    "nullable": true
                  },
                  "type": {
                    "description": "The type of environment variable",
                    "type": "string",
                    "enum": [
                      "system",
                      "secret",
                      "encrypted",
                      "plain",
                      "sensitive"
                    ],
                    "example": "plain"
                  },
                  "value": {
                    "description": "The value of the environment variable",
                    "type": "string",
                    "example": "bkWIjbnxcvo78"
                  },
                  "customEnvironmentIds": {
                    "type": "array",
                    "description": "The custom environments that the environment variable should be synced to",
                    "items": {
                      "type": "string",
                      "example": "env_1234567890"
                    }
                  },
                  "comment": {
                    "type": "string",
                    "description": "A comment to add context on what this env var is for",
                    "example": "database connection string for production",
                    "maxLength": 500
                  }
                }
              }
            }
          },
          "required": true
        },
        "x-speakeasy-test": false
      }
    },
    "/v1/projects/{idOrName}/rolling-release/billing": {
      "get": {
        "description": "Get the Rolling Releases billing status for a project. The team level billing status is used to determine if the project can be configured for rolling releases.",
        "operationId": "getRollingReleaseBillingStatus",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get rolling release billing status",
        "tags": [
          "rolling-release"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "availableSlots": {
                          "type": "number",
                          "enum": [
                            0
                          ]
                        },
                        "reason": {
                          "type": "string",
                          "enum": [
                            "plan_not_supported"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "availableSlots",
                        "reason",
                        "message"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "availableSlots": {
                          "type": "string",
                          "enum": [
                            "unlimited"
                          ]
                        },
                        "reason": {
                          "type": "string",
                          "enum": [
                            "unlimited_slots"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "availableSlots",
                        "reason",
                        "message"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "availableSlots": {
                          "type": "number",
                          "enum": [
                            0
                          ]
                        },
                        "reason": {
                          "type": "string",
                          "enum": [
                            "no_available_slots"
                          ]
                        },
                        "message": {
                          "type": "string"
                        },
                        "enabledProjects": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "availableSlots",
                        "reason",
                        "message",
                        "enabledProjects"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "availableSlots": {
                          "type": "number"
                        },
                        "reason": {
                          "type": "string",
                          "enum": [
                            "available_slots"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "availableSlots",
                        "reason",
                        "message"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "Project ID or project name (URL-encoded)",
            "in": "path",
            "required": true,
            "schema": {
              "description": "Project ID or project name (URL-encoded)",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/projects/{idOrName}/rolling-release/config": {
      "get": {
        "description": "Get the Rolling Releases configuration for a project. The project-level config is simply a template that will be used for any future rolling release, and not the configuration for any active rolling release.",
        "operationId": "getRollingReleaseConfig",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get rolling release configuration",
        "tags": [
          "rolling-release"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rollingRelease": {
                      "nullable": true,
                      "properties": {
                        "target": {
                          "type": "string",
                          "description": "The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.",
                          "example": "production"
                        },
                        "stages": {
                          "nullable": true,
                          "items": {
                            "properties": {
                              "targetPercentage": {
                                "type": "number",
                                "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                                "example": 25
                              },
                              "requireApproval": {
                                "type": "boolean",
                                "description": "Whether or not this stage requires manual approval to proceed",
                                "example": false
                              },
                              "duration": {
                                "type": "number",
                                "description": "Duration in minutes for automatic advancement to the next stage",
                                "example": 600
                              }
                            },
                            "required": [
                              "targetPercentage"
                            ],
                            "type": "object",
                            "description": "An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100."
                          },
                          "type": "array",
                          "description": "An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100."
                        },
                        "canaryResponseHeader": {
                          "type": "boolean",
                          "description": "Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.",
                          "example": false
                        }
                      },
                      "required": [
                        "target"
                      ],
                      "type": "object",
                      "description": "Project-level rolling release configuration that defines how deployments should be gradually rolled out"
                    }
                  },
                  "required": [
                    "rollingRelease"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "Project ID or project name (URL-encoded)",
            "in": "path",
            "required": true,
            "schema": {
              "description": "Project ID or project name (URL-encoded)",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "delete": {
        "description": "Disable Rolling Releases for a project means that future deployments will not undergo a rolling release. Changing the config never alters a rollout that's already in-flight—it only affects the next production deployment. If you want to also stop the current rollout, call this endpoint to disable the feature, and then call either the /complete or /abort endpoint.",
        "operationId": "deleteRollingReleaseConfig",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete rolling release configuration",
        "tags": [
          "rolling-release"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rollingRelease": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "rollingRelease"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "Project ID or project name (URL-encoded)",
            "in": "path",
            "required": true,
            "schema": {
              "description": "Project ID or project name (URL-encoded)",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "patch": {
        "description": "Update (or disable) Rolling Releases for a project. Changing the config never alters a rollout that's already in-flight. It only affects the next production deployment. This also applies to disabling Rolling Releases. If you want to also stop the current rollout, call this endpoint to disable the feature, and then call either the /complete or /abort endpoint. Note: Enabling Rolling Releases automatically enables skew protection on the project with the default value if it wasn't configured already.",
        "operationId": "updateRollingReleaseConfig",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update the rolling release settings for the project",
        "tags": [
          "rolling-release"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "rollingRelease": {
                          "nullable": true
                        }
                      },
                      "required": [
                        "rollingRelease"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "rollingRelease": {
                          "nullable": true,
                          "properties": {
                            "stages": {
                              "nullable": true,
                              "items": {
                                "properties": {
                                  "targetPercentage": {
                                    "type": "number",
                                    "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                                    "example": 25
                                  },
                                  "requireApproval": {
                                    "type": "boolean",
                                    "description": "Whether or not this stage requires manual approval to proceed",
                                    "example": false
                                  },
                                  "duration": {
                                    "type": "number",
                                    "description": "Duration in minutes for automatic advancement to the next stage",
                                    "example": 600
                                  }
                                },
                                "required": [
                                  "targetPercentage"
                                ],
                                "type": "object",
                                "description": "A stage object configured for a rolling release once a new deployment is triggered the first stage will be read in the proxy for first time visitors, and if a RNG \u003c targetPercentage then it will serve the new deployment. Upon approval the next stage will be read, etc."
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "required": [
                        "rollingRelease"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "Project ID or project name (URL-encoded)",
            "in": "path",
            "required": true,
            "schema": {
              "description": "Project ID or project name (URL-encoded)",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/projects/{idOrName}/rolling-release": {
      "get": {
        "description": "Return the Rolling Release for a project, regardless of whether the rollout is active, aborted, or completed. If the feature is enabled but no deployment has occurred yet, null will be returned.",
        "operationId": "getRollingRelease",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get the active rolling release information for a project",
        "tags": [
          "rolling-release"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rollingRelease": {
                      "nullable": true,
                      "properties": {
                        "state": {
                          "type": "string",
                          "enum": [
                            "ACTIVE",
                            "COMPLETE",
                            "ABORTED"
                          ],
                          "description": "The current state of the rolling release",
                          "example": "ACTIVE"
                        },
                        "currentDeployment": {
                          "nullable": true,
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "url": {
                              "type": "string"
                            },
                            "target": {
                              "nullable": true,
                              "type": "string",
                              "enum": [
                                "staging",
                                "production"
                              ]
                            },
                            "source": {
                              "type": "string",
                              "enum": [
                                "api-trigger-git-deploy",
                                "cli",
                                "clone/repo",
                                "git",
                                "import",
                                "import/repo",
                                "redeploy",
                                "v0-web"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "readyState": {
                              "type": "string",
                              "enum": [
                                "BUILDING",
                                "ERROR",
                                "INITIALIZING",
                                "QUEUED",
                                "READY",
                                "CANCELED"
                              ]
                            },
                            "readyStateAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "url",
                            "createdAt",
                            "readyState"
                          ],
                          "type": "object",
                          "description": "The current deployment receiving production traffic",
                          "example": {
                            "id": "dpl_abc123",
                            "name": "my-shop@main",
                            "url": "my-shop.vercel.app",
                            "target": "production",
                            "source": "git",
                            "createdAt": 1716206500000,
                            "readyState": "READY",
                            "readyStateAt": 1716206800000
                          }
                        },
                        "canaryDeployment": {
                          "nullable": true,
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "url": {
                              "type": "string"
                            },
                            "target": {
                              "nullable": true,
                              "type": "string",
                              "enum": [
                                "staging",
                                "production"
                              ]
                            },
                            "source": {
                              "type": "string",
                              "enum": [
                                "api-trigger-git-deploy",
                                "cli",
                                "clone/repo",
                                "git",
                                "import",
                                "import/repo",
                                "redeploy",
                                "v0-web"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "readyState": {
                              "type": "string",
                              "enum": [
                                "BUILDING",
                                "ERROR",
                                "INITIALIZING",
                                "QUEUED",
                                "READY",
                                "CANCELED"
                              ]
                            },
                            "readyStateAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "url",
                            "createdAt",
                            "readyState"
                          ],
                          "type": "object",
                          "description": "The canary deployment being rolled out",
                          "example": {
                            "id": "dpl_def456",
                            "name": "my-shop@9c7e2f4",
                            "url": "9c7e2f4-my-shop.vercel.app",
                            "target": "production",
                            "source": "git",
                            "createdAt": 1716210100000,
                            "readyState": "READY",
                            "readyStateAt": 1716210400000
                          }
                        },
                        "queuedDeploymentId": {
                          "nullable": true,
                          "type": "string",
                          "description": "The ID of a deployment queued for the next rolling release",
                          "example": "dpl_ghi789"
                        },
                        "advancementType": {
                          "type": "string",
                          "enum": [
                            "automatic",
                            "manual-approval"
                          ],
                          "description": "The advancement type of the rolling release",
                          "example": "manual-approval"
                        },
                        "stages": {
                          "items": {
                            "properties": {
                              "index": {
                                "type": "number",
                                "description": "The zero-based index of the stage",
                                "example": 0
                              },
                              "isFinalStage": {
                                "type": "boolean",
                                "description": "Whether or not this stage is the final stage (targetPercentage === 100)",
                                "example": false
                              },
                              "targetPercentage": {
                                "type": "number",
                                "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                                "example": 25
                              },
                              "requireApproval": {
                                "type": "boolean",
                                "description": "Whether or not this stage requires manual approval to proceed"
                              },
                              "duration": {
                                "nullable": true,
                                "type": "number",
                                "description": "Duration in seconds for automatic advancement, null for manual stages or the final stage",
                                "example": null
                              }
                            },
                            "required": [
                              "index",
                              "isFinalStage",
                              "targetPercentage",
                              "requireApproval",
                              "duration"
                            ],
                            "type": "object",
                            "description": "All stages configured for this rolling release",
                            "example": [
                              {
                                "index": 0,
                                "isFinalStage": false,
                                "targetPercentage": 5,
                                "requireApproval": true,
                                "duration": null
                              },
                              {
                                "index": 1,
                                "isFinalStage": false,
                                "targetPercentage": 25,
                                "requireApproval": true,
                                "duration": null
                              },
                              {
                                "index": 2,
                                "isFinalStage": false,
                                "targetPercentage": 60,
                                "requireApproval": true,
                                "duration": null
                              },
                              {
                                "index": 3,
                                "isFinalStage": true,
                                "targetPercentage": 100,
                                "requireApproval": false,
                                "duration": null
                              }
                            ]
                          },
                          "type": "array",
                          "description": "All stages configured for this rolling release",
                          "example": [
                            {
                              "index": 0,
                              "isFinalStage": false,
                              "targetPercentage": 5,
                              "requireApproval": true,
                              "duration": null
                            },
                            {
                              "index": 1,
                              "isFinalStage": false,
                              "targetPercentage": 25,
                              "requireApproval": true,
                              "duration": null
                            },
                            {
                              "index": 2,
                              "isFinalStage": false,
                              "targetPercentage": 60,
                              "requireApproval": true,
                              "duration": null
                            },
                            {
                              "index": 3,
                              "isFinalStage": true,
                              "targetPercentage": 100,
                              "requireApproval": false,
                              "duration": null
                            }
                          ]
                        },
                        "activeStage": {
                          "nullable": true,
                          "properties": {
                            "index": {
                              "type": "number",
                              "description": "The zero-based index of the stage",
                              "example": 0
                            },
                            "isFinalStage": {
                              "type": "boolean",
                              "description": "Whether or not this stage is the final stage (targetPercentage === 100)",
                              "example": false
                            },
                            "targetPercentage": {
                              "type": "number",
                              "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                              "example": 25
                            },
                            "requireApproval": {
                              "type": "boolean",
                              "description": "Whether or not this stage requires manual approval to proceed"
                            },
                            "duration": {
                              "nullable": true,
                              "type": "number",
                              "description": "Duration in seconds for automatic advancement, null for manual stages or the final stage",
                              "example": null
                            }
                          },
                          "required": [
                            "index",
                            "isFinalStage",
                            "targetPercentage",
                            "requireApproval",
                            "duration"
                          ],
                          "type": "object",
                          "description": "The currently active stage, null if the rollout is aborted",
                          "example": {
                            "index": 1,
                            "isFinalStage": false,
                            "targetPercentage": 25,
                            "requireApproval": true,
                            "duration": null
                          }
                        },
                        "nextStage": {
                          "nullable": true,
                          "properties": {
                            "index": {
                              "type": "number",
                              "description": "The zero-based index of the stage",
                              "example": 0
                            },
                            "isFinalStage": {
                              "type": "boolean",
                              "description": "Whether or not this stage is the final stage (targetPercentage === 100)",
                              "example": false
                            },
                            "targetPercentage": {
                              "type": "number",
                              "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                              "example": 25
                            },
                            "requireApproval": {
                              "type": "boolean",
                              "description": "Whether or not this stage requires manual approval to proceed"
                            },
                            "duration": {
                              "nullable": true,
                              "type": "number",
                              "description": "Duration in seconds for automatic advancement, null for manual stages or the final stage",
                              "example": null
                            }
                          },
                          "required": [
                            "index",
                            "isFinalStage",
                            "targetPercentage",
                            "requireApproval",
                            "duration"
                          ],
                          "type": "object",
                          "description": "The next stage to be activated, null if not in ACTIVE state",
                          "example": {
                            "index": 2,
                            "isFinalStage": false,
                            "targetPercentage": 60,
                            "requireApproval": true,
                            "duration": null
                          }
                        },
                        "startedAt": {
                          "type": "number",
                          "description": "Unix timestamp in milliseconds when the rolling release started",
                          "example": 1716210500000
                        },
                        "updatedAt": {
                          "type": "number",
                          "description": "Unix timestamp in milliseconds when the rolling release was last updated",
                          "example": 1716210600000
                        }
                      },
                      "required": [
                        "state",
                        "currentDeployment",
                        "canaryDeployment",
                        "queuedDeploymentId",
                        "advancementType",
                        "stages",
                        "activeStage",
                        "nextStage",
                        "startedAt",
                        "updatedAt"
                      ],
                      "type": "object",
                      "description": "Rolling release information including configuration and document details, or null if no rolling release exists"
                    }
                  },
                  "required": [
                    "rollingRelease"
                  ],
                  "type": "object",
                  "description": "The response format for rolling release endpoints that return rolling release information"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "Project ID or project name (URL-encoded)",
            "in": "path",
            "required": true,
            "schema": {
              "description": "Project ID or project name (URL-encoded)",
              "type": "string"
            }
          },
          {
            "name": "state",
            "description": "Filter by rolling release state",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by rolling release state",
              "type": "string",
              "enum": [
                "ACTIVE",
                "COMPLETE",
                "ABORTED"
              ]
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/projects/{idOrName}/rolling-release/approve-stage": {
      "post": {
        "description": "Advance a rollout to the next stage. This is only needed when rolling releases is configured to require manual approval.",
        "operationId": "approveRollingReleaseStage",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update the active rolling release to the next stage for a project",
        "tags": [
          "rolling-release"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rollingRelease": {
                      "nullable": true,
                      "properties": {
                        "state": {
                          "type": "string",
                          "enum": [
                            "ACTIVE",
                            "COMPLETE",
                            "ABORTED"
                          ],
                          "description": "The current state of the rolling release",
                          "example": "ACTIVE"
                        },
                        "currentDeployment": {
                          "nullable": true,
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "url": {
                              "type": "string"
                            },
                            "target": {
                              "nullable": true,
                              "type": "string",
                              "enum": [
                                "staging",
                                "production"
                              ]
                            },
                            "source": {
                              "type": "string",
                              "enum": [
                                "api-trigger-git-deploy",
                                "cli",
                                "clone/repo",
                                "git",
                                "import",
                                "import/repo",
                                "redeploy",
                                "v0-web"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "readyState": {
                              "type": "string",
                              "enum": [
                                "BUILDING",
                                "ERROR",
                                "INITIALIZING",
                                "QUEUED",
                                "READY",
                                "CANCELED"
                              ]
                            },
                            "readyStateAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "url",
                            "createdAt",
                            "readyState"
                          ],
                          "type": "object",
                          "description": "The current deployment receiving production traffic",
                          "example": {
                            "id": "dpl_abc123",
                            "name": "my-shop@main",
                            "url": "my-shop.vercel.app",
                            "target": "production",
                            "source": "git",
                            "createdAt": 1716206500000,
                            "readyState": "READY",
                            "readyStateAt": 1716206800000
                          }
                        },
                        "canaryDeployment": {
                          "nullable": true,
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "url": {
                              "type": "string"
                            },
                            "target": {
                              "nullable": true,
                              "type": "string",
                              "enum": [
                                "staging",
                                "production"
                              ]
                            },
                            "source": {
                              "type": "string",
                              "enum": [
                                "api-trigger-git-deploy",
                                "cli",
                                "clone/repo",
                                "git",
                                "import",
                                "import/repo",
                                "redeploy",
                                "v0-web"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "readyState": {
                              "type": "string",
                              "enum": [
                                "BUILDING",
                                "ERROR",
                                "INITIALIZING",
                                "QUEUED",
                                "READY",
                                "CANCELED"
                              ]
                            },
                            "readyStateAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "url",
                            "createdAt",
                            "readyState"
                          ],
                          "type": "object",
                          "description": "The canary deployment being rolled out",
                          "example": {
                            "id": "dpl_def456",
                            "name": "my-shop@9c7e2f4",
                            "url": "9c7e2f4-my-shop.vercel.app",
                            "target": "production",
                            "source": "git",
                            "createdAt": 1716210100000,
                            "readyState": "READY",
                            "readyStateAt": 1716210400000
                          }
                        },
                        "queuedDeploymentId": {
                          "nullable": true,
                          "type": "string",
                          "description": "The ID of a deployment queued for the next rolling release",
                          "example": "dpl_ghi789"
                        },
                        "advancementType": {
                          "type": "string",
                          "enum": [
                            "automatic",
                            "manual-approval"
                          ],
                          "description": "The advancement type of the rolling release",
                          "example": "manual-approval"
                        },
                        "stages": {
                          "items": {
                            "properties": {
                              "index": {
                                "type": "number",
                                "description": "The zero-based index of the stage",
                                "example": 0
                              },
                              "isFinalStage": {
                                "type": "boolean",
                                "description": "Whether or not this stage is the final stage (targetPercentage === 100)",
                                "example": false
                              },
                              "targetPercentage": {
                                "type": "number",
                                "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                                "example": 25
                              },
                              "requireApproval": {
                                "type": "boolean",
                                "description": "Whether or not this stage requires manual approval to proceed"
                              },
                              "duration": {
                                "nullable": true,
                                "type": "number",
                                "description": "Duration in seconds for automatic advancement, null for manual stages or the final stage",
                                "example": null
                              }
                            },
                            "required": [
                              "index",
                              "isFinalStage",
                              "targetPercentage",
                              "requireApproval",
                              "duration"
                            ],
                            "type": "object",
                            "description": "All stages configured for this rolling release",
                            "example": [
                              {
                                "index": 0,
                                "isFinalStage": false,
                                "targetPercentage": 5,
                                "requireApproval": true,
                                "duration": null
                              },
                              {
                                "index": 1,
                                "isFinalStage": false,
                                "targetPercentage": 25,
                                "requireApproval": true,
                                "duration": null
                              },
                              {
                                "index": 2,
                                "isFinalStage": false,
                                "targetPercentage": 60,
                                "requireApproval": true,
                                "duration": null
                              },
                              {
                                "index": 3,
                                "isFinalStage": true,
                                "targetPercentage": 100,
                                "requireApproval": false,
                                "duration": null
                              }
                            ]
                          },
                          "type": "array",
                          "description": "All stages configured for this rolling release",
                          "example": [
                            {
                              "index": 0,
                              "isFinalStage": false,
                              "targetPercentage": 5,
                              "requireApproval": true,
                              "duration": null
                            },
                            {
                              "index": 1,
                              "isFinalStage": false,
                              "targetPercentage": 25,
                              "requireApproval": true,
                              "duration": null
                            },
                            {
                              "index": 2,
                              "isFinalStage": false,
                              "targetPercentage": 60,
                              "requireApproval": true,
                              "duration": null
                            },
                            {
                              "index": 3,
                              "isFinalStage": true,
                              "targetPercentage": 100,
                              "requireApproval": false,
                              "duration": null
                            }
                          ]
                        },
                        "activeStage": {
                          "nullable": true,
                          "properties": {
                            "index": {
                              "type": "number",
                              "description": "The zero-based index of the stage",
                              "example": 0
                            },
                            "isFinalStage": {
                              "type": "boolean",
                              "description": "Whether or not this stage is the final stage (targetPercentage === 100)",
                              "example": false
                            },
                            "targetPercentage": {
                              "type": "number",
                              "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                              "example": 25
                            },
                            "requireApproval": {
                              "type": "boolean",
                              "description": "Whether or not this stage requires manual approval to proceed"
                            },
                            "duration": {
                              "nullable": true,
                              "type": "number",
                              "description": "Duration in seconds for automatic advancement, null for manual stages or the final stage",
                              "example": null
                            }
                          },
                          "required": [
                            "index",
                            "isFinalStage",
                            "targetPercentage",
                            "requireApproval",
                            "duration"
                          ],
                          "type": "object",
                          "description": "The currently active stage, null if the rollout is aborted",
                          "example": {
                            "index": 1,
                            "isFinalStage": false,
                            "targetPercentage": 25,
                            "requireApproval": true,
                            "duration": null
                          }
                        },
                        "nextStage": {
                          "nullable": true,
                          "properties": {
                            "index": {
                              "type": "number",
                              "description": "The zero-based index of the stage",
                              "example": 0
                            },
                            "isFinalStage": {
                              "type": "boolean",
                              "description": "Whether or not this stage is the final stage (targetPercentage === 100)",
                              "example": false
                            },
                            "targetPercentage": {
                              "type": "number",
                              "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                              "example": 25
                            },
                            "requireApproval": {
                              "type": "boolean",
                              "description": "Whether or not this stage requires manual approval to proceed"
                            },
                            "duration": {
                              "nullable": true,
                              "type": "number",
                              "description": "Duration in seconds for automatic advancement, null for manual stages or the final stage",
                              "example": null
                            }
                          },
                          "required": [
                            "index",
                            "isFinalStage",
                            "targetPercentage",
                            "requireApproval",
                            "duration"
                          ],
                          "type": "object",
                          "description": "The next stage to be activated, null if not in ACTIVE state",
                          "example": {
                            "index": 2,
                            "isFinalStage": false,
                            "targetPercentage": 60,
                            "requireApproval": true,
                            "duration": null
                          }
                        },
                        "startedAt": {
                          "type": "number",
                          "description": "Unix timestamp in milliseconds when the rolling release started",
                          "example": 1716210500000
                        },
                        "updatedAt": {
                          "type": "number",
                          "description": "Unix timestamp in milliseconds when the rolling release was last updated",
                          "example": 1716210600000
                        }
                      },
                      "required": [
                        "state",
                        "currentDeployment",
                        "canaryDeployment",
                        "queuedDeploymentId",
                        "advancementType",
                        "stages",
                        "activeStage",
                        "nextStage",
                        "startedAt",
                        "updatedAt"
                      ],
                      "type": "object",
                      "description": "Rolling release information including configuration and document details, or null if no rolling release exists"
                    }
                  },
                  "required": [
                    "rollingRelease"
                  ],
                  "type": "object",
                  "description": "The response format for rolling release endpoints that return rolling release information"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "Project ID or project name (URL-encoded)",
            "in": "path",
            "required": true,
            "schema": {
              "description": "Project ID or project name (URL-encoded)",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "nextStageIndex",
                  "canaryDeploymentId"
                ],
                "properties": {
                  "nextStageIndex": {
                    "description": "The index of the stage to transition to",
                    "type": "number"
                  },
                  "canaryDeploymentId": {
                    "description": "The id of the canary deployment to approve for the next stage",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/projects/{idOrName}/rolling-release/complete": {
      "post": {
        "description": "Force-complete a Rolling Release. The canary deployment will begin serving 100% of the traffic.",
        "operationId": "completeRollingRelease",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Complete the rolling release for the project",
        "tags": [
          "rolling-release"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rollingRelease": {
                      "nullable": true,
                      "properties": {
                        "state": {
                          "type": "string",
                          "enum": [
                            "ACTIVE",
                            "COMPLETE",
                            "ABORTED"
                          ],
                          "description": "The current state of the rolling release",
                          "example": "ACTIVE"
                        },
                        "currentDeployment": {
                          "nullable": true,
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "url": {
                              "type": "string"
                            },
                            "target": {
                              "nullable": true,
                              "type": "string",
                              "enum": [
                                "staging",
                                "production"
                              ]
                            },
                            "source": {
                              "type": "string",
                              "enum": [
                                "api-trigger-git-deploy",
                                "cli",
                                "clone/repo",
                                "git",
                                "import",
                                "import/repo",
                                "redeploy",
                                "v0-web"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "readyState": {
                              "type": "string",
                              "enum": [
                                "BUILDING",
                                "ERROR",
                                "INITIALIZING",
                                "QUEUED",
                                "READY",
                                "CANCELED"
                              ]
                            },
                            "readyStateAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "url",
                            "createdAt",
                            "readyState"
                          ],
                          "type": "object",
                          "description": "The current deployment receiving production traffic",
                          "example": {
                            "id": "dpl_abc123",
                            "name": "my-shop@main",
                            "url": "my-shop.vercel.app",
                            "target": "production",
                            "source": "git",
                            "createdAt": 1716206500000,
                            "readyState": "READY",
                            "readyStateAt": 1716206800000
                          }
                        },
                        "canaryDeployment": {
                          "nullable": true,
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "url": {
                              "type": "string"
                            },
                            "target": {
                              "nullable": true,
                              "type": "string",
                              "enum": [
                                "staging",
                                "production"
                              ]
                            },
                            "source": {
                              "type": "string",
                              "enum": [
                                "api-trigger-git-deploy",
                                "cli",
                                "clone/repo",
                                "git",
                                "import",
                                "import/repo",
                                "redeploy",
                                "v0-web"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "readyState": {
                              "type": "string",
                              "enum": [
                                "BUILDING",
                                "ERROR",
                                "INITIALIZING",
                                "QUEUED",
                                "READY",
                                "CANCELED"
                              ]
                            },
                            "readyStateAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "url",
                            "createdAt",
                            "readyState"
                          ],
                          "type": "object",
                          "description": "The canary deployment being rolled out",
                          "example": {
                            "id": "dpl_def456",
                            "name": "my-shop@9c7e2f4",
                            "url": "9c7e2f4-my-shop.vercel.app",
                            "target": "production",
                            "source": "git",
                            "createdAt": 1716210100000,
                            "readyState": "READY",
                            "readyStateAt": 1716210400000
                          }
                        },
                        "queuedDeploymentId": {
                          "nullable": true,
                          "type": "string",
                          "description": "The ID of a deployment queued for the next rolling release",
                          "example": "dpl_ghi789"
                        },
                        "advancementType": {
                          "type": "string",
                          "enum": [
                            "automatic",
                            "manual-approval"
                          ],
                          "description": "The advancement type of the rolling release",
                          "example": "manual-approval"
                        },
                        "stages": {
                          "items": {
                            "properties": {
                              "index": {
                                "type": "number",
                                "description": "The zero-based index of the stage",
                                "example": 0
                              },
                              "isFinalStage": {
                                "type": "boolean",
                                "description": "Whether or not this stage is the final stage (targetPercentage === 100)",
                                "example": false
                              },
                              "targetPercentage": {
                                "type": "number",
                                "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                                "example": 25
                              },
                              "requireApproval": {
                                "type": "boolean",
                                "description": "Whether or not this stage requires manual approval to proceed"
                              },
                              "duration": {
                                "nullable": true,
                                "type": "number",
                                "description": "Duration in seconds for automatic advancement, null for manual stages or the final stage",
                                "example": null
                              }
                            },
                            "required": [
                              "index",
                              "isFinalStage",
                              "targetPercentage",
                              "requireApproval",
                              "duration"
                            ],
                            "type": "object",
                            "description": "All stages configured for this rolling release",
                            "example": [
                              {
                                "index": 0,
                                "isFinalStage": false,
                                "targetPercentage": 5,
                                "requireApproval": true,
                                "duration": null
                              },
                              {
                                "index": 1,
                                "isFinalStage": false,
                                "targetPercentage": 25,
                                "requireApproval": true,
                                "duration": null
                              },
                              {
                                "index": 2,
                                "isFinalStage": false,
                                "targetPercentage": 60,
                                "requireApproval": true,
                                "duration": null
                              },
                              {
                                "index": 3,
                                "isFinalStage": true,
                                "targetPercentage": 100,
                                "requireApproval": false,
                                "duration": null
                              }
                            ]
                          },
                          "type": "array",
                          "description": "All stages configured for this rolling release",
                          "example": [
                            {
                              "index": 0,
                              "isFinalStage": false,
                              "targetPercentage": 5,
                              "requireApproval": true,
                              "duration": null
                            },
                            {
                              "index": 1,
                              "isFinalStage": false,
                              "targetPercentage": 25,
                              "requireApproval": true,
                              "duration": null
                            },
                            {
                              "index": 2,
                              "isFinalStage": false,
                              "targetPercentage": 60,
                              "requireApproval": true,
                              "duration": null
                            },
                            {
                              "index": 3,
                              "isFinalStage": true,
                              "targetPercentage": 100,
                              "requireApproval": false,
                              "duration": null
                            }
                          ]
                        },
                        "activeStage": {
                          "nullable": true,
                          "properties": {
                            "index": {
                              "type": "number",
                              "description": "The zero-based index of the stage",
                              "example": 0
                            },
                            "isFinalStage": {
                              "type": "boolean",
                              "description": "Whether or not this stage is the final stage (targetPercentage === 100)",
                              "example": false
                            },
                            "targetPercentage": {
                              "type": "number",
                              "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                              "example": 25
                            },
                            "requireApproval": {
                              "type": "boolean",
                              "description": "Whether or not this stage requires manual approval to proceed"
                            },
                            "duration": {
                              "nullable": true,
                              "type": "number",
                              "description": "Duration in seconds for automatic advancement, null for manual stages or the final stage",
                              "example": null
                            }
                          },
                          "required": [
                            "index",
                            "isFinalStage",
                            "targetPercentage",
                            "requireApproval",
                            "duration"
                          ],
                          "type": "object",
                          "description": "The currently active stage, null if the rollout is aborted",
                          "example": {
                            "index": 1,
                            "isFinalStage": false,
                            "targetPercentage": 25,
                            "requireApproval": true,
                            "duration": null
                          }
                        },
                        "nextStage": {
                          "nullable": true,
                          "properties": {
                            "index": {
                              "type": "number",
                              "description": "The zero-based index of the stage",
                              "example": 0
                            },
                            "isFinalStage": {
                              "type": "boolean",
                              "description": "Whether or not this stage is the final stage (targetPercentage === 100)",
                              "example": false
                            },
                            "targetPercentage": {
                              "type": "number",
                              "description": "The percentage of traffic to serve to the canary deployment (0-100)",
                              "example": 25
                            },
                            "requireApproval": {
                              "type": "boolean",
                              "description": "Whether or not this stage requires manual approval to proceed"
                            },
                            "duration": {
                              "nullable": true,
                              "type": "number",
                              "description": "Duration in seconds for automatic advancement, null for manual stages or the final stage",
                              "example": null
                            }
                          },
                          "required": [
                            "index",
                            "isFinalStage",
                            "targetPercentage",
                            "requireApproval",
                            "duration"
                          ],
                          "type": "object",
                          "description": "The next stage to be activated, null if not in ACTIVE state",
                          "example": {
                            "index": 2,
                            "isFinalStage": false,
                            "targetPercentage": 60,
                            "requireApproval": true,
                            "duration": null
                          }
                        },
                        "startedAt": {
                          "type": "number",
                          "description": "Unix timestamp in milliseconds when the rolling release started",
                          "example": 1716210500000
                        },
                        "updatedAt": {
                          "type": "number",
                          "description": "Unix timestamp in milliseconds when the rolling release was last updated",
                          "example": 1716210600000
                        }
                      },
                      "required": [
                        "state",
                        "currentDeployment",
                        "canaryDeployment",
                        "queuedDeploymentId",
                        "advancementType",
                        "stages",
                        "activeStage",
                        "nextStage",
                        "startedAt",
                        "updatedAt"
                      ],
                      "type": "object",
                      "description": "Rolling release information including configuration and document details, or null if no rolling release exists"
                    }
                  },
                  "required": [
                    "rollingRelease"
                  ],
                  "type": "object",
                  "description": "The response format for rolling release endpoints that return rolling release information"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "Project ID or project name (URL-encoded)",
            "in": "path",
            "required": true,
            "schema": {
              "description": "Project ID or project name (URL-encoded)",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "canaryDeploymentId"
                ],
                "properties": {
                  "canaryDeploymentId": {
                    "description": "The ID of the canary deployment to complete",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{idOrName}/transfer-request": {
      "post": {
        "description": "Initiates a project transfer request from one team to another. \u003cbr/\u003e Returns a `code` that remains valid for 24 hours and can be used to accept the transfer request by another team using the `PUT /projects/transfer-request/:code` endpoint. \u003cbr/\u003e Users can also accept the project transfer request using the claim URL: `https://vercel.com/claim-deployment?code=\u003ccode\u003e\u0026returnUrl=\u003creturnUrl\u003e`. \u003cbr/\u003e The `code` parameter specifies the project transfer request code generated using this endpoint. \u003cbr/\u003e The `returnUrl` parameter redirects users to a specific page of the application if the claim URL is invalid or expired.",
        "operationId": "createProjectTransferRequest",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create project transfer request",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "The project transfer request has been initiated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Code that can be used to accept the project transfer request.",
                      "example": "f99cc49a-602e-4786-a748-762dfb205880"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The ID or name of the project to transfer.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID or name of the project to transfer."
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "callbackUrl": {
                    "type": "string",
                    "description": "The URL to send a webhook to when the transfer is accepted."
                  },
                  "callbackSecret": {
                    "type": "string",
                    "description": "The secret to use to sign the webhook payload with HMAC-SHA256."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/transfer-request/{code}": {
      "put": {
        "description": "Accept a project transfer request initated by another team. \u003cbr/\u003e The `code` is generated using the `POST /projects/:idOrName/transfer-request` endpoint.",
        "operationId": "acceptProjectTransferRequest",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Accept project transfer request",
        "tags": [
          "projects"
        ],
        "responses": {
          "202": {
            "description": "The project has been transferred successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "partnerCalls": {
                          "items": {
                            "properties": {
                              "installationId": {
                                "type": "string"
                              },
                              "resourceIds": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "result": {
                                "properties": {
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "fulfilled",
                                      "errored"
                                    ]
                                  },
                                  "error": {
                                    "type": "object"
                                  },
                                  "code": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "status"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "installationId",
                              "resourceIds",
                              "result"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "resourceTransferErrors": {
                          "items": {
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "partnerCalls",
                        "resourceTransferErrors"
                      ],
                      "type": "object"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "422": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "code",
            "description": "The code of the project transfer request.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the project transfer request."
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "newProjectName": {
                    "description": "The desired name for the project",
                    "example": "a-project-name",
                    "type": "string",
                    "maxLength": 100
                  },
                  "paidFeatures": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "concurrentBuilds": {
                        "type": "integer",
                        "nullable": true
                      },
                      "passwordProtection": {
                        "type": "boolean",
                        "nullable": true
                      },
                      "previewDeploymentSuffix": {
                        "type": "boolean",
                        "nullable": true
                      }
                    }
                  },
                  "acceptedPolicies": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "required": [
                        "eula",
                        "privacy"
                      ],
                      "properties": {
                        "eula": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "privacy": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/projects/{idOrName}/protection-bypass": {
      "patch": {
        "description": "Update the deployment protection automation bypass for a project",
        "operationId": "updateProjectProtectionBypass",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update Protection Bypass for Automation",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "protectionBypass": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "properties": {
                              "createdAt": {
                                "type": "number"
                              },
                              "createdBy": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "integration-automation-bypass"
                                ]
                              },
                              "integrationId": {
                                "type": "string"
                              },
                              "configurationId": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "createdAt",
                              "createdBy",
                              "scope",
                              "integrationId",
                              "configurationId"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "createdAt": {
                                "type": "number"
                              },
                              "createdBy": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "automation-bypass"
                                ]
                              }
                            },
                            "required": [
                              "createdAt",
                              "createdBy",
                              "scope"
                            ],
                            "type": "object"
                          }
                        ]
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "idOrName",
            "description": "The unique project identifier or the project name",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique project identifier or the project name",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "revoke": {
                    "description": "Optional instructions for revoking and regenerating a automation bypass",
                    "type": "object",
                    "properties": {
                      "secret": {
                        "description": "Automation bypass to revoked",
                        "type": "string"
                      },
                      "regenerate": {
                        "description": "Whether or not a new automation bypass should be created after the provided secret is revoked",
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "secret",
                      "regenerate"
                    ]
                  },
                  "generate": {
                    "description": "Generate a new secret. If neither generate or revoke are provided, a new random secret will be generated.",
                    "type": "object",
                    "properties": {
                      "secret": {
                        "description": "Optional value of the secret to generate, don't send it for oauth2 tokens",
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9]{32}$"
                      }
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        }
      }
    },
    "/v10/projects/{projectId}/promote/{deploymentId}": {
      "post": {
        "description": "Allows users to promote a deployment to production. Note: This does NOT rebuild the deployment. If you need that, then call create-deployments endpoint.",
        "operationId": "requestPromote",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Points all production domains for a project to the given deploy",
        "tags": [
          "projects"
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "202": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "409": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/projects/{projectId}/promote/aliases": {
      "get": {
        "description": "Get a list of aliases related to the last promote request with their mapping status",
        "operationId": "listPromoteAliases",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Gets a list of aliases with status for the current promote",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object"
                    },
                    {
                      "properties": {
                        "aliases": {
                          "items": {
                            "properties": {
                              "status": {
                                "type": "string"
                              },
                              "alias": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "status",
                              "alias",
                              "id"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      },
                      "required": [
                        "aliases",
                        "pagination"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of aliases to list from a request (max 100).",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Maximum number of aliases to list from a request (max 100).",
              "type": "number",
              "example": 20,
              "maximum": 100
            }
          },
          {
            "name": "since",
            "description": "Get aliases created after this epoch timestamp.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Get aliases created after this epoch timestamp.",
              "type": "number",
              "example": 1609499532000
            }
          },
          {
            "name": "until",
            "description": "Get aliases created before this epoch timestamp.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Get aliases created before this epoch timestamp.",
              "type": "number",
              "example": 1612264332000
            }
          },
          {
            "name": "failedOnly",
            "description": "Filter results down to aliases that failed to map to the requested deployment",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter results down to aliases that failed to map to the requested deployment",
              "type": "boolean"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/projects/{projectId}/pause": {
      "post": {
        "description": "Pause a project by passing its project `id` in the URL. If the project does not exist given the id then the request will fail with 400 status code. If the project disables auto assigning custom production domains and blocks the active Production Deployment then the request will return with 200 status code.",
        "operationId": "pauseProject",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Pause a project",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "The unique project identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique project identifier"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/projects/{projectId}/unpause": {
      "post": {
        "description": "Unpause a project by passing its project `id` in the URL. If the project does not exist given the id then the request will fail with 400 status code. If the project enables auto assigning custom production domains and unblocks the active Production Deployment then the request will return with 200 status code.",
        "operationId": "unpauseProject",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Unpause a project",
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "The unique project identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique project identifier"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/security/attack-mode": {
      "post": {
        "description": "Update the setting for determining if the project has Attack Challenge mode enabled.",
        "operationId": "updateAttackChallengeMode",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update Attack Challenge mode",
        "tags": [
          "security"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "attackModeEnabled": {
                      "type": "boolean"
                    },
                    "attackModeUpdatedAt": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "attackModeEnabled",
                    "attackModeUpdatedAt"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "projectId",
                  "attackModeEnabled"
                ],
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "attackModeEnabled": {
                    "type": "boolean"
                  },
                  "attackModeActiveUntil": {
                    "type": "number",
                    "nullable": true
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/security/firewall/config": {
      "put": {
        "description": "Set the firewall configuration to provided rules and settings. Creates or overwrite the existing firewall configuration.",
        "operationId": "putFirewallConfig",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Put Firewall Configuration",
        "tags": [
          "security"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "active": {
                      "properties": {
                        "ownerId": {
                          "type": "string"
                        },
                        "projectKey": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "version": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "string"
                        },
                        "firewallEnabled": {
                          "type": "boolean"
                        },
                        "crs": {
                          "properties": {
                            "sd": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log"
                                  ]
                                }
                              },
                              "required": [
                                "active",
                                "action"
                              ],
                              "type": "object",
                              "description": "Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools."
                            },
                            "ma": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log"
                                  ]
                                }
                              },
                              "required": [
                                "active",
                                "action"
                              ],
                              "type": "object",
                              "description": "Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding."
                            },
                            "lfi": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log"
                                  ]
                                }
                              },
                              "required": [
                                "active",
                                "action"
                              ],
                              "type": "object",
                              "description": "Local File Inclusion Attack - Prevent unauthorized access to local files through web applications."
                            },
                            "rfi": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log"
                                  ]
                                }
                              },
                              "required": [
                                "active",
                                "action"
                              ],
                              "type": "object",
                              "description": "Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files."
                            },
                            "rce": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log"
                                  ]
                                }
                              },
                              "required": [
                                "active",
                                "action"
                              ],
                              "type": "object",
                              "description": "Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands."
                            },
                            "php": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log"
                                  ]
                                }
                              },
                              "required": [
                                "active",
                                "action"
                              ],
                              "type": "object",
                              "description": "PHP Attack - Safeguard against vulnerability exploits in PHP-based applications."
                            },
                            "gen": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log"
                                  ]
                                }
                              },
                              "required": [
                                "active",
                                "action"
                              ],
                              "type": "object",
                              "description": "Generic Attack - Provide broad protection from various undefined or novel attack vectors."
                            },
                            "xss": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log"
                                  ]
                                }
                              },
                              "required": [
                                "active",
                                "action"
                              ],
                              "type": "object",
                              "description": "XSS Attack - Prevent injection of malicious scripts into trusted webpages."
                            },
                            "sqli": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log"
                                  ]
                                }
                              },
                              "required": [
                                "active",
                                "action"
                              ],
                              "type": "object",
                              "description": "SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases."
                            },
                            "sf": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log"
                                  ]
                                }
                              },
                              "required": [
                                "active",
                                "action"
                              ],
                              "type": "object",
                              "description": "Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs."
                            },
                            "java": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log"
                                  ]
                                }
                              },
                              "required": [
                                "active",
                                "action"
                              ],
                              "type": "object",
                              "description": "Java Attack - Mitigate risks of exploitation targeting Java-based applications or components."
                            }
                          },
                          "required": [
                            "sd",
                            "ma",
                            "lfi",
                            "rfi",
                            "rce",
                            "php",
                            "gen",
                            "xss",
                            "sqli",
                            "sf",
                            "java"
                          ],
                          "type": "object",
                          "description": "Custom Ruleset"
                        },
                        "rules": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "active": {
                                "type": "boolean"
                              },
                              "conditionGroup": {
                                "items": {
                                  "properties": {
                                    "conditions": {
                                      "items": {
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "host",
                                              "path",
                                              "method",
                                              "header",
                                              "query",
                                              "cookie",
                                              "target_path",
                                              "route",
                                              "raw_path",
                                              "ip_address",
                                              "protocol",
                                              "region",
                                              "scheme",
                                              "environment",
                                              "user_agent",
                                              "geo_continent",
                                              "geo_country",
                                              "geo_country_region",
                                              "geo_city",
                                              "geo_as_number",
                                              "ja4_digest",
                                              "ja3_digest",
                                              "rate_limit_api_id",
                                              "server_action"
                                            ]
                                          },
                                          "op": {
                                            "type": "string",
                                            "enum": [
                                              "re",
                                              "eq",
                                              "ex",
                                              "inc",
                                              "pre",
                                              "suf",
                                              "sub",
                                              "gt",
                                              "gte",
                                              "lt",
                                              "lte",
                                              "nex",
                                              "ninc",
                                              "neq"
                                            ]
                                          },
                                          "neg": {
                                            "type": "boolean"
                                          },
                                          "key": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              }
                                            ]
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "op"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "required": [
                                    "conditions"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "action": {
                                "properties": {
                                  "mitigate": {
                                    "properties": {
                                      "action": {
                                        "type": "string",
                                        "enum": [
                                          "deny",
                                          "log",
                                          "challenge",
                                          "bypass",
                                          "rate_limit",
                                          "redirect"
                                        ]
                                      },
                                      "rateLimit": {
                                        "nullable": true,
                                        "properties": {
                                          "algo": {
                                            "type": "string",
                                            "enum": [
                                              "fixed_window",
                                              "token_bucket"
                                            ]
                                          },
                                          "window": {
                                            "type": "number"
                                          },
                                          "limit": {
                                            "type": "number"
                                          },
                                          "keys": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "action": {
                                            "nullable": true,
                                            "type": "string",
                                            "enum": [
                                              "deny",
                                              "log",
                                              "challenge",
                                              "rate_limit"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "algo",
                                          "window",
                                          "limit",
                                          "keys"
                                        ],
                                        "type": "object"
                                      },
                                      "redirect": {
                                        "nullable": true,
                                        "properties": {
                                          "location": {
                                            "type": "string"
                                          },
                                          "permanent": {
                                            "type": "boolean"
                                          }
                                        },
                                        "required": [
                                          "location",
                                          "permanent"
                                        ],
                                        "type": "object"
                                      },
                                      "actionDuration": {
                                        "nullable": true,
                                        "type": "string"
                                      },
                                      "bypassSystem": {
                                        "nullable": true,
                                        "type": "boolean"
                                      }
                                    },
                                    "required": [
                                      "action"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "active",
                              "conditionGroup",
                              "action"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "ips": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "hostname": {
                                "type": "string"
                              },
                              "ip": {
                                "type": "string"
                              },
                              "notes": {
                                "type": "string"
                              },
                              "action": {
                                "type": "string",
                                "enum": [
                                  "deny",
                                  "log",
                                  "challenge",
                                  "bypass"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "hostname",
                              "ip",
                              "action"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "changes": {
                          "items": {
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "managedRules": {
                          "properties": {
                            "bot_protection": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log",
                                    "challenge"
                                  ]
                                },
                                "updatedAt": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                },
                                "username": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            },
                            "ai_bots": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log",
                                    "challenge"
                                  ]
                                },
                                "updatedAt": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                },
                                "username": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            },
                            "owasp": {
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "deny",
                                    "log",
                                    "challenge"
                                  ]
                                },
                                "updatedAt": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                },
                                "username": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "active"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "botIdEnabled": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "ownerId",
                        "projectKey",
                        "id",
                        "version",
                        "updatedAt",
                        "firewallEnabled",
                        "crs",
                        "rules",
                        "ips",
                        "changes"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "active"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": ""
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firewallEnabled": {
                    "type": "boolean"
                  },
                  "managedRules": {
                    "type": "object",
                    "additionalProperties": {
                      "anyOf": []
                    }
                  },
                  "crs": {
                    "type": "object",
                    "properties": {
                      "sd": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "log"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "action"
                        ],
                        "additionalProperties": false,
                        "description": "Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools."
                      },
                      "ma": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "log"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "action"
                        ],
                        "additionalProperties": false,
                        "description": "Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding."
                      },
                      "lfi": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "log"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "action"
                        ],
                        "additionalProperties": false,
                        "description": "Local File Inclusion Attack - Prevent unauthorized access to local files through web applications."
                      },
                      "rfi": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "log"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "action"
                        ],
                        "additionalProperties": false,
                        "description": "Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files."
                      },
                      "rce": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "log"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "action"
                        ],
                        "additionalProperties": false,
                        "description": "Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands."
                      },
                      "php": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "log"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "action"
                        ],
                        "additionalProperties": false,
                        "description": "PHP Attack - Safeguard against vulnerability exploits in PHP-based applications."
                      },
                      "gen": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "log"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "action"
                        ],
                        "additionalProperties": false,
                        "description": "Generic Attack - Provide broad protection from various undefined or novel attack vectors."
                      },
                      "xss": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "log"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "action"
                        ],
                        "additionalProperties": false,
                        "description": "XSS Attack - Prevent injection of malicious scripts into trusted webpages."
                      },
                      "sqli": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "log"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "action"
                        ],
                        "additionalProperties": false,
                        "description": "SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases."
                      },
                      "sf": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "log"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "action"
                        ],
                        "additionalProperties": false,
                        "description": "Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs."
                      },
                      "java": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "log"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "action"
                        ],
                        "additionalProperties": false,
                        "description": "Java Attack - Mitigate risks of exploitation targeting Java-based applications or components."
                      }
                    },
                    "additionalProperties": false,
                    "description": "Custom Ruleset"
                  },
                  "rules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string",
                          "maxLength": 160
                        },
                        "description": {
                          "type": "string",
                          "maxLength": 256
                        },
                        "active": {
                          "type": "boolean"
                        },
                        "conditionGroup": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "conditions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "host",
                                        "path",
                                        "method",
                                        "header",
                                        "query",
                                        "cookie",
                                        "target_path",
                                        "route",
                                        "raw_path",
                                        "ip_address",
                                        "region",
                                        "protocol",
                                        "scheme",
                                        "environment",
                                        "user_agent",
                                        "geo_continent",
                                        "geo_country",
                                        "geo_country_region",
                                        "geo_city",
                                        "geo_as_number",
                                        "ja4_digest",
                                        "ja3_digest",
                                        "rate_limit_api_id"
                                      ],
                                      "description": "[Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic."
                                    },
                                    "op": {
                                      "type": "string",
                                      "enum": [
                                        "re",
                                        "eq",
                                        "neq",
                                        "ex",
                                        "nex",
                                        "inc",
                                        "ninc",
                                        "pre",
                                        "suf",
                                        "sub",
                                        "gt",
                                        "gte",
                                        "lt",
                                        "lte"
                                      ]
                                    },
                                    "neg": {
                                      "type": "boolean"
                                    },
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "anyOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "maxItems": 75
                                        },
                                        {
                                          "type": "number"
                                        }
                                      ]
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "op"
                                  ],
                                  "additionalProperties": false
                                },
                                "maxItems": 65
                              }
                            },
                            "required": [
                              "conditions"
                            ],
                            "additionalProperties": false
                          },
                          "maxItems": 25
                        },
                        "action": {
                          "type": "object",
                          "properties": {
                            "mitigate": {
                              "type": "object",
                              "properties": {
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "log",
                                    "challenge",
                                    "deny",
                                    "bypass",
                                    "rate_limit",
                                    "redirect"
                                  ]
                                },
                                "rateLimit": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "algo": {
                                          "type": "string",
                                          "enum": [
                                            "fixed_window",
                                            "token_bucket"
                                          ]
                                        },
                                        "window": {
                                          "type": "number"
                                        },
                                        "limit": {
                                          "type": "number"
                                        },
                                        "keys": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "action": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "enum": [
                                                "log",
                                                "challenge",
                                                "deny",
                                                "rate_limit"
                                              ]
                                            },
                                            {}
                                          ],
                                          "nullable": true
                                        }
                                      },
                                      "required": [
                                        "algo",
                                        "window",
                                        "limit",
                                        "keys"
                                      ],
                                      "additionalProperties": false
                                    },
                                    {}
                                  ],
                                  "nullable": true
                                },
                                "redirect": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "location": {
                                          "type": "string"
                                        },
                                        "permanent": {
                                          "type": "boolean"
                                        }
                                      },
                                      "required": [
                                        "location",
                                        "permanent"
                                      ],
                                      "additionalProperties": false
                                    },
                                    {}
                                  ],
                                  "nullable": true
                                },
                                "actionDuration": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "bypassSystem": {
                                  "type": "boolean",
                                  "nullable": true
                                }
                              },
                              "required": [
                                "action"
                              ],
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "name",
                        "active",
                        "conditionGroup",
                        "action"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "ips": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "hostname": {
                          "type": "string"
                        },
                        "ip": {
                          "type": "string"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "action": {
                          "type": "string",
                          "enum": [
                            "deny",
                            "challenge",
                            "log",
                            "bypass"
                          ]
                        }
                      },
                      "required": [
                        "hostname",
                        "ip",
                        "action"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "botIdEnabled": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "firewallEnabled"
                ],
                "additionalProperties": false
              }
            }
          },
          "required": true
        }
      },
      "patch": {
        "description": "Process updates to modify the existing firewall config for a project",
        "operationId": "updateFirewallConfig",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update Firewall Configuration",
        "tags": [
          "security"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": ""
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "description": "Enable Firewall",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "firewallEnabled"
                        ]
                      },
                      "id": {
                        "nullable": true
                      },
                      "value": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "action",
                      "value"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Add a custom rule",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "rules.insert"
                        ]
                      },
                      "id": {
                        "nullable": true
                      },
                      "value": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "maxLength": 160
                          },
                          "description": {
                            "type": "string",
                            "maxLength": 256
                          },
                          "active": {
                            "type": "boolean"
                          },
                          "conditionGroup": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "conditions": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "host",
                                          "path",
                                          "method",
                                          "header",
                                          "query",
                                          "cookie",
                                          "target_path",
                                          "route",
                                          "raw_path",
                                          "ip_address",
                                          "region",
                                          "protocol",
                                          "scheme",
                                          "environment",
                                          "user_agent",
                                          "geo_continent",
                                          "geo_country",
                                          "geo_country_region",
                                          "geo_city",
                                          "geo_as_number",
                                          "ja4_digest",
                                          "ja3_digest",
                                          "rate_limit_api_id",
                                          "server_action"
                                        ]
                                      },
                                      "op": {
                                        "type": "string",
                                        "enum": [
                                          "re",
                                          "eq",
                                          "neq",
                                          "ex",
                                          "nex",
                                          "inc",
                                          "ninc",
                                          "pre",
                                          "suf",
                                          "sub",
                                          "gt",
                                          "gte",
                                          "lt",
                                          "lte"
                                        ]
                                      },
                                      "neg": {
                                        "type": "boolean"
                                      },
                                      "key": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "maxItems": 75
                                          },
                                          {
                                            "type": "number"
                                          }
                                        ]
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "op"
                                    ],
                                    "additionalProperties": false
                                  },
                                  "maxItems": 65
                                }
                              },
                              "required": [
                                "conditions"
                              ],
                              "additionalProperties": false
                            },
                            "maxItems": 25
                          },
                          "action": {
                            "type": "object",
                            "properties": {
                              "mitigate": {
                                "type": "object",
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "log",
                                      "challenge",
                                      "deny",
                                      "bypass",
                                      "rate_limit",
                                      "redirect"
                                    ]
                                  },
                                  "rateLimit": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "algo": {
                                            "type": "string",
                                            "enum": [
                                              "fixed_window",
                                              "token_bucket"
                                            ]
                                          },
                                          "window": {
                                            "type": "number"
                                          },
                                          "limit": {
                                            "type": "number"
                                          },
                                          "keys": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "action": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "log",
                                                  "challenge",
                                                  "deny",
                                                  "rate_limit"
                                                ]
                                              },
                                              {}
                                            ],
                                            "nullable": true
                                          }
                                        },
                                        "required": [
                                          "algo",
                                          "window",
                                          "limit",
                                          "keys"
                                        ],
                                        "additionalProperties": false
                                      },
                                      {}
                                    ],
                                    "nullable": true
                                  },
                                  "redirect": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "location": {
                                            "type": "string"
                                          },
                                          "permanent": {
                                            "type": "boolean"
                                          }
                                        },
                                        "required": [
                                          "location",
                                          "permanent"
                                        ],
                                        "additionalProperties": false
                                      },
                                      {}
                                    ],
                                    "nullable": true
                                  },
                                  "actionDuration": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "bypassSystem": {
                                    "type": "boolean",
                                    "nullable": true
                                  }
                                },
                                "required": [
                                  "action"
                                ],
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "required": [
                          "name",
                          "active",
                          "conditionGroup",
                          "action"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "action",
                      "value"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Update a custom rule",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "rules.update"
                        ]
                      },
                      "id": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "maxLength": 160
                          },
                          "description": {
                            "type": "string",
                            "maxLength": 256
                          },
                          "active": {
                            "type": "boolean"
                          },
                          "conditionGroup": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "conditions": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "host",
                                          "path",
                                          "method",
                                          "header",
                                          "query",
                                          "cookie",
                                          "target_path",
                                          "route",
                                          "raw_path",
                                          "ip_address",
                                          "region",
                                          "protocol",
                                          "scheme",
                                          "environment",
                                          "user_agent",
                                          "geo_continent",
                                          "geo_country",
                                          "geo_country_region",
                                          "geo_city",
                                          "geo_as_number",
                                          "ja4_digest",
                                          "ja3_digest",
                                          "rate_limit_api_id",
                                          "server_action"
                                        ]
                                      },
                                      "op": {
                                        "type": "string",
                                        "enum": [
                                          "re",
                                          "eq",
                                          "neq",
                                          "ex",
                                          "nex",
                                          "inc",
                                          "ninc",
                                          "pre",
                                          "suf",
                                          "sub",
                                          "gt",
                                          "gte",
                                          "lt",
                                          "lte"
                                        ]
                                      },
                                      "neg": {
                                        "type": "boolean"
                                      },
                                      "key": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "anyOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "maxItems": 75
                                          },
                                          {
                                            "type": "number"
                                          }
                                        ]
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "op"
                                    ],
                                    "additionalProperties": false
                                  },
                                  "maxItems": 65
                                }
                              },
                              "required": [
                                "conditions"
                              ],
                              "additionalProperties": false
                            },
                            "maxItems": 25
                          },
                          "action": {
                            "type": "object",
                            "properties": {
                              "mitigate": {
                                "type": "object",
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "log",
                                      "challenge",
                                      "deny",
                                      "bypass",
                                      "rate_limit",
                                      "redirect"
                                    ]
                                  },
                                  "rateLimit": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "algo": {
                                            "type": "string",
                                            "enum": [
                                              "fixed_window",
                                              "token_bucket"
                                            ]
                                          },
                                          "window": {
                                            "type": "number"
                                          },
                                          "limit": {
                                            "type": "number"
                                          },
                                          "keys": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "action": {
                                            "anyOf": [
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "log",
                                                  "challenge",
                                                  "deny",
                                                  "rate_limit"
                                                ]
                                              },
                                              {}
                                            ],
                                            "nullable": true
                                          }
                                        },
                                        "required": [
                                          "algo",
                                          "window",
                                          "limit",
                                          "keys"
                                        ],
                                        "additionalProperties": false
                                      },
                                      {}
                                    ],
                                    "nullable": true
                                  },
                                  "redirect": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "location": {
                                            "type": "string"
                                          },
                                          "permanent": {
                                            "type": "boolean"
                                          }
                                        },
                                        "required": [
                                          "location",
                                          "permanent"
                                        ],
                                        "additionalProperties": false
                                      },
                                      {}
                                    ],
                                    "nullable": true
                                  },
                                  "actionDuration": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "bypassSystem": {
                                    "type": "boolean",
                                    "nullable": true
                                  }
                                },
                                "required": [
                                  "action"
                                ],
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "required": [
                          "name",
                          "active",
                          "conditionGroup",
                          "action"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "action",
                      "id",
                      "value"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Remove a custom rule",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "rules.remove"
                        ]
                      },
                      "id": {
                        "type": "string"
                      },
                      "value": {
                        "nullable": true
                      }
                    },
                    "required": [
                      "action",
                      "id"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Reorder a custom rule",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "rules.priority"
                        ]
                      },
                      "id": {
                        "type": "string"
                      },
                      "value": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "action",
                      "id",
                      "value"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Enable a managed rule",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "crs.update"
                        ]
                      },
                      "id": {
                        "type": "string",
                        "enum": [
                          "sd",
                          "ma",
                          "lfi",
                          "rfi",
                          "rce",
                          "php",
                          "gen",
                          "xss",
                          "sqli",
                          "sf",
                          "java"
                        ]
                      },
                      "value": {
                        "type": "object",
                        "properties": {
                          "active": {
                            "type": "boolean"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "log"
                            ]
                          }
                        },
                        "required": [
                          "active",
                          "action"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "action",
                      "id",
                      "value"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Disable a managed rule",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "crs.disable"
                        ]
                      },
                      "id": {
                        "nullable": true
                      },
                      "value": {
                        "nullable": true
                      }
                    },
                    "required": [
                      "action"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Add an IP Blocking rule",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "ip.insert"
                        ]
                      },
                      "id": {
                        "nullable": true
                      },
                      "value": {
                        "type": "object",
                        "properties": {
                          "hostname": {
                            "type": "string"
                          },
                          "ip": {
                            "type": "string"
                          },
                          "notes": {
                            "type": "string"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "challenge",
                              "log",
                              "bypass"
                            ]
                          }
                        },
                        "required": [
                          "hostname",
                          "ip",
                          "action"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "action",
                      "value"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Update an IP Blocking rule",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "ip.update"
                        ]
                      },
                      "id": {
                        "type": "string"
                      },
                      "value": {
                        "type": "object",
                        "properties": {
                          "hostname": {
                            "type": "string"
                          },
                          "ip": {
                            "type": "string"
                          },
                          "notes": {
                            "type": "string"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "challenge",
                              "log",
                              "bypass"
                            ]
                          }
                        },
                        "required": [
                          "hostname",
                          "ip",
                          "action"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "action",
                      "id",
                      "value"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Remove an IP Blocking rule",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "ip.remove"
                        ]
                      },
                      "id": {
                        "type": "string"
                      },
                      "value": {
                        "nullable": true
                      }
                    },
                    "required": [
                      "action",
                      "id"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Update a managed ruleset",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "enum": [
                          "managedRules.update"
                        ]
                      },
                      "id": {
                        "type": "string",
                        "enum": [
                          "ai_bots",
                          "bot_filter",
                          "bot_protection",
                          "owasp"
                        ]
                      },
                      "value": {
                        "type": "object",
                        "properties": {
                          "action": {
                            "type": "string",
                            "enum": [
                              "log",
                              "challenge",
                              "deny"
                            ]
                          },
                          "active": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "active"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "required": [
                      "action",
                      "id",
                      "value"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Update a managed rule group",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string",
                        "enum": [
                          "ai_bots",
                          "bot_filter",
                          "bot_protection",
                          "owasp"
                        ]
                      },
                      "value": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "log",
                                "challenge",
                                "deny"
                              ]
                            }
                          },
                          "required": [
                            "active"
                          ],
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": [
                      "action",
                      "id",
                      "value"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "description": "Toggle bot ID",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "value": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "action",
                      "value"
                    ],
                    "additionalProperties": false
                  }
                ]
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/security/firewall/config/{configVersion}": {
      "get": {
        "description": "Retrieve the specified firewall configuration for a project. The deployed configVersion will be `active`",
        "operationId": "getFirewallConfig",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Read Firewall Configuration",
        "tags": [
          "security"
        ],
        "responses": {
          "200": {
            "description": "If the firewall configuration includes a [custom managed ruleset](https://vercel.com/docs/security/vercel-waf/managed-rulesets), it will include a `crs` item that has the following values: sd: Scanner Detection ma: Multipart Attack lfi: Local File Inclusion Attack rfi: Remote File Inclusion Attack rce: Remote Execution Attack php: PHP Attack gen: Generic Attack xss: XSS Attack sqli: SQL Injection Attack sf: Session Fixation Attack java: Java Attack",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ownerId": {
                      "type": "string"
                    },
                    "projectKey": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "version": {
                      "type": "number"
                    },
                    "updatedAt": {
                      "type": "string"
                    },
                    "firewallEnabled": {
                      "type": "boolean"
                    },
                    "crs": {
                      "properties": {
                        "sd": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log"
                              ]
                            }
                          },
                          "required": [
                            "active",
                            "action"
                          ],
                          "type": "object",
                          "description": "Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools."
                        },
                        "ma": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log"
                              ]
                            }
                          },
                          "required": [
                            "active",
                            "action"
                          ],
                          "type": "object",
                          "description": "Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding."
                        },
                        "lfi": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log"
                              ]
                            }
                          },
                          "required": [
                            "active",
                            "action"
                          ],
                          "type": "object",
                          "description": "Local File Inclusion Attack - Prevent unauthorized access to local files through web applications."
                        },
                        "rfi": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log"
                              ]
                            }
                          },
                          "required": [
                            "active",
                            "action"
                          ],
                          "type": "object",
                          "description": "Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files."
                        },
                        "rce": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log"
                              ]
                            }
                          },
                          "required": [
                            "active",
                            "action"
                          ],
                          "type": "object",
                          "description": "Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands."
                        },
                        "php": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log"
                              ]
                            }
                          },
                          "required": [
                            "active",
                            "action"
                          ],
                          "type": "object",
                          "description": "PHP Attack - Safeguard against vulnerability exploits in PHP-based applications."
                        },
                        "gen": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log"
                              ]
                            }
                          },
                          "required": [
                            "active",
                            "action"
                          ],
                          "type": "object",
                          "description": "Generic Attack - Provide broad protection from various undefined or novel attack vectors."
                        },
                        "xss": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log"
                              ]
                            }
                          },
                          "required": [
                            "active",
                            "action"
                          ],
                          "type": "object",
                          "description": "XSS Attack - Prevent injection of malicious scripts into trusted webpages."
                        },
                        "sqli": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log"
                              ]
                            }
                          },
                          "required": [
                            "active",
                            "action"
                          ],
                          "type": "object",
                          "description": "SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases."
                        },
                        "sf": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log"
                              ]
                            }
                          },
                          "required": [
                            "active",
                            "action"
                          ],
                          "type": "object",
                          "description": "Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs."
                        },
                        "java": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log"
                              ]
                            }
                          },
                          "required": [
                            "active",
                            "action"
                          ],
                          "type": "object",
                          "description": "Java Attack - Mitigate risks of exploitation targeting Java-based applications or components."
                        }
                      },
                      "required": [
                        "sd",
                        "ma",
                        "lfi",
                        "rfi",
                        "rce",
                        "php",
                        "gen",
                        "xss",
                        "sqli",
                        "sf",
                        "java"
                      ],
                      "type": "object",
                      "description": "Custom Ruleset"
                    },
                    "rules": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "active": {
                            "type": "boolean"
                          },
                          "conditionGroup": {
                            "items": {
                              "properties": {
                                "conditions": {
                                  "items": {
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "host",
                                          "path",
                                          "method",
                                          "header",
                                          "query",
                                          "cookie",
                                          "target_path",
                                          "route",
                                          "raw_path",
                                          "ip_address",
                                          "protocol",
                                          "region",
                                          "scheme",
                                          "environment",
                                          "user_agent",
                                          "geo_continent",
                                          "geo_country",
                                          "geo_country_region",
                                          "geo_city",
                                          "geo_as_number",
                                          "ja4_digest",
                                          "ja3_digest",
                                          "rate_limit_api_id",
                                          "server_action"
                                        ],
                                        "description": "[Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic."
                                      },
                                      "op": {
                                        "type": "string",
                                        "enum": [
                                          "re",
                                          "eq",
                                          "ex",
                                          "inc",
                                          "pre",
                                          "suf",
                                          "sub",
                                          "gt",
                                          "gte",
                                          "lt",
                                          "lte",
                                          "nex",
                                          "ninc",
                                          "neq"
                                        ]
                                      },
                                      "neg": {
                                        "type": "boolean"
                                      },
                                      "key": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "type": "number"
                                          },
                                          {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        ]
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "op"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "conditions"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "action": {
                            "properties": {
                              "mitigate": {
                                "properties": {
                                  "action": {
                                    "type": "string",
                                    "enum": [
                                      "deny",
                                      "log",
                                      "challenge",
                                      "bypass",
                                      "rate_limit",
                                      "redirect"
                                    ]
                                  },
                                  "rateLimit": {
                                    "nullable": true,
                                    "properties": {
                                      "algo": {
                                        "type": "string",
                                        "enum": [
                                          "fixed_window",
                                          "token_bucket"
                                        ]
                                      },
                                      "window": {
                                        "type": "number"
                                      },
                                      "limit": {
                                        "type": "number"
                                      },
                                      "keys": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "action": {
                                        "nullable": true,
                                        "type": "string",
                                        "enum": [
                                          "deny",
                                          "log",
                                          "challenge",
                                          "rate_limit"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "algo",
                                      "window",
                                      "limit",
                                      "keys"
                                    ],
                                    "type": "object"
                                  },
                                  "redirect": {
                                    "nullable": true,
                                    "properties": {
                                      "location": {
                                        "type": "string"
                                      },
                                      "permanent": {
                                        "type": "boolean"
                                      }
                                    },
                                    "required": [
                                      "location",
                                      "permanent"
                                    ],
                                    "type": "object"
                                  },
                                  "actionDuration": {
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "bypassSystem": {
                                    "nullable": true,
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "action"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "active",
                          "conditionGroup",
                          "action"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ips": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "hostname": {
                            "type": "string"
                          },
                          "ip": {
                            "type": "string"
                          },
                          "notes": {
                            "type": "string"
                          },
                          "action": {
                            "type": "string",
                            "enum": [
                              "deny",
                              "log",
                              "challenge",
                              "bypass"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "hostname",
                          "ip",
                          "action"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "changes": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "managedRules": {
                      "properties": {
                        "bot_protection": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log",
                                "challenge"
                              ]
                            },
                            "updatedAt": {
                              "type": "string"
                            },
                            "userId": {
                              "type": "string"
                            },
                            "username": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "active"
                          ],
                          "type": "object"
                        },
                        "ai_bots": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log",
                                "challenge"
                              ]
                            },
                            "updatedAt": {
                              "type": "string"
                            },
                            "userId": {
                              "type": "string"
                            },
                            "username": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "active"
                          ],
                          "type": "object"
                        },
                        "owasp": {
                          "properties": {
                            "active": {
                              "type": "boolean"
                            },
                            "action": {
                              "type": "string",
                              "enum": [
                                "deny",
                                "log",
                                "challenge"
                              ]
                            },
                            "updatedAt": {
                              "type": "string"
                            },
                            "userId": {
                              "type": "string"
                            },
                            "username": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "active"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "botIdEnabled": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "ownerId",
                    "projectKey",
                    "id",
                    "version",
                    "updatedAt",
                    "firewallEnabled",
                    "crs",
                    "rules",
                    "ips",
                    "changes"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          },
          {
            "description": "The deployed configVersion for the firewall configuration",
            "in": "path",
            "name": "configVersion",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/v1/security/firewall/attack-status": {
      "get": {
        "description": "Retrieve active attack data within the last 24h window",
        "operationId": "getActiveAttackStatus",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Read active attack data",
        "tags": [
          "security"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object"
                    },
                    {
                      "properties": {
                        "anomalies": {
                          "items": {
                            "properties": {
                              "ownerId": {
                                "type": "string"
                              },
                              "projectId": {
                                "type": "string"
                              },
                              "startTime": {
                                "type": "number"
                              },
                              "endTime": {
                                "nullable": true,
                                "type": "number"
                              },
                              "atMinute": {
                                "type": "number"
                              },
                              "state": {
                                "type": "string"
                              },
                              "affectedHostMap": {
                                "additionalProperties": {
                                  "properties": {
                                    "anomalyAlerts": {
                                      "additionalProperties": {
                                        "properties": {
                                          "at_minute": {
                                            "type": "string"
                                          },
                                          "zscore": {
                                            "type": "number"
                                          },
                                          "total_requests_minute": {
                                            "type": "number"
                                          },
                                          "avg_requests": {
                                            "type": "number"
                                          },
                                          "stddev_requests": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "at_minute",
                                          "zscore",
                                          "total_requests_minute",
                                          "avg_requests",
                                          "stddev_requests"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "object"
                                    },
                                    "ddosAlerts": {
                                      "additionalProperties": {
                                        "properties": {
                                          "atMinute": {
                                            "type": "string"
                                          },
                                          "totalReqs": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "atMinute",
                                          "totalReqs"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "object"
                              }
                            },
                            "required": [
                              "ownerId",
                              "projectId",
                              "startTime",
                              "endTime",
                              "atMinute",
                              "affectedHostMap"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "anomalies"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "x-speakeasy-test": false
      }
    },
    "/v1/security/firewall/bypass": {
      "get": {
        "description": "Retrieve the system bypass rules configured for the specified project",
        "operationId": "getBypassIp",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Read System Bypass",
        "tags": [
          "security"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "properties": {
                          "OwnerId": {
                            "type": "string"
                          },
                          "Id": {
                            "type": "string"
                          },
                          "Domain": {
                            "type": "string"
                          },
                          "Ip": {
                            "type": "string"
                          },
                          "Action": {
                            "type": "string",
                            "enum": [
                              "block",
                              "bypass"
                            ]
                          },
                          "ProjectId": {
                            "type": "string"
                          },
                          "IsProjectRule": {
                            "type": "boolean"
                          },
                          "Note": {
                            "type": "string"
                          },
                          "CreatedAt": {
                            "type": "string"
                          },
                          "ActorId": {
                            "type": "string"
                          },
                          "UpdatedAt": {
                            "type": "string"
                          },
                          "UpdatedAtHour": {
                            "type": "string"
                          },
                          "DeletedAt": {
                            "type": "string"
                          },
                          "ExpiresAt": {
                            "nullable": true,
                            "type": "number"
                          }
                        },
                        "required": [
                          "OwnerId",
                          "Id",
                          "Domain",
                          "Ip",
                          "CreatedAt",
                          "UpdatedAt",
                          "UpdatedAtHour"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "properties": {
                        "OwnerId": {
                          "type": "string"
                        },
                        "Id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "OwnerId",
                        "Id"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "result"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10,
              "maximum": 256
            }
          },
          {
            "name": "sourceIp",
            "description": "Filter by source IP",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by source IP",
              "type": "string",
              "maxLength": 49
            }
          },
          {
            "name": "domain",
            "description": "Filter by domain",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by domain",
              "type": "string",
              "pattern": "([a-z]+[a-z.]+)$",
              "maxLength": 2544
            }
          },
          {
            "name": "projectScope",
            "description": "Filter by project scoped rules",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Filter by project scoped rules",
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "description": "Used for pagination. Retrieves results after the provided id",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Used for pagination. Retrieves results after the provided id",
              "type": "string",
              "maxLength": 2560
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "post": {
        "description": "Create new system bypass rules",
        "operationId": "addBypassIp",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create System Bypass Rule",
        "tags": [
          "security"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "ok": {
                          "type": "boolean"
                        },
                        "result": {
                          "items": {
                            "properties": {
                              "OwnerId": {
                                "type": "string"
                              },
                              "Id": {
                                "type": "string"
                              },
                              "Domain": {
                                "type": "string"
                              },
                              "Ip": {
                                "type": "string"
                              },
                              "ProjectId": {
                                "type": "string"
                              },
                              "Note": {
                                "type": "string"
                              },
                              "IsProjectRule": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "OwnerId",
                              "Id",
                              "Domain",
                              "ProjectId",
                              "Note",
                              "IsProjectRule"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "pagination": {
                          "nullable": true
                        }
                      },
                      "required": [
                        "ok",
                        "result",
                        "pagination"
                      ],
                      "type": "object"
                    },
                    {
                      "properties": {
                        "ok": {
                          "type": "boolean"
                        },
                        "result": {
                          "items": {
                            "properties": {
                              "OwnerId": {
                                "type": "string"
                              },
                              "Id": {
                                "type": "string"
                              },
                              "Domain": {
                                "type": "string"
                              },
                              "Ip": {
                                "type": "string"
                              },
                              "Action": {
                                "type": "string",
                                "enum": [
                                  "block",
                                  "bypass"
                                ]
                              },
                              "ProjectId": {
                                "type": "string"
                              },
                              "IsProjectRule": {
                                "type": "boolean"
                              },
                              "Note": {
                                "type": "string"
                              },
                              "CreatedAt": {
                                "type": "string"
                              },
                              "ActorId": {
                                "type": "string"
                              },
                              "UpdatedAt": {
                                "type": "string"
                              },
                              "UpdatedAtHour": {
                                "type": "string"
                              },
                              "DeletedAt": {
                                "type": "string"
                              },
                              "ExpiresAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "OwnerId",
                              "Id",
                              "Domain",
                              "Ip",
                              "CreatedAt",
                              "UpdatedAt",
                              "UpdatedAtHour"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "ok"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "oneOf": [
                  {
                    "required": [
                      "domain"
                    ]
                  },
                  {
                    "required": [
                      "projectScope"
                    ]
                  }
                ],
                "properties": {
                  "domain": {
                    "type": "string",
                    "pattern": "([a-z]+[a-z.]+)$",
                    "maxLength": 2544
                  },
                  "projectScope": {
                    "type": "boolean",
                    "description": "If the specified bypass will apply to all domains for a project."
                  },
                  "sourceIp": {
                    "type": "string"
                  },
                  "allSources": {
                    "type": "boolean"
                  },
                  "ttl": {
                    "type": "number",
                    "description": "Time to live in milliseconds"
                  },
                  "note": {
                    "type": "string",
                    "maxLength": 500
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Remove system bypass rules",
        "operationId": "removeBypassIp",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Remove System Bypass Rule",
        "tags": [
          "security"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ok": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "ok"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "oneOf": [
                  {
                    "required": [
                      "domain"
                    ]
                  },
                  {
                    "required": [
                      "projectScope"
                    ]
                  }
                ],
                "properties": {
                  "domain": {
                    "type": "string",
                    "pattern": "([a-z]+[a-z.]+)$",
                    "maxLength": 2544
                  },
                  "projectScope": {
                    "type": "boolean"
                  },
                  "sourceIp": {
                    "type": "string"
                  },
                  "allSources": {
                    "type": "boolean"
                  },
                  "note": {
                    "type": "string",
                    "maxLength": 500
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/storage/stores/integration/direct": {
      "post": {
        "description": "Creates an integration store for both FREE and PAID billing plans. This simplified endpoint automatically provisions real integration storage resources while handling billing complexity behind the scenes. It supports both free and paid billing plans with automatic authorization creation for paid resources. ## How it works 1. Validates the integration configuration and product 2. For free resources: Auto-discovers available free billing plans 3. For paid resources: Creates billing authorization inline using provided billingPlanId 4. Provisions real resources through the Vercel Marketplace 5. Returns the created store with connection details ## Workflow Before using this endpoint, discover available products and billing plans: 1. List your configurations: `GET /v1/integrations/configurations` 2. Get products for a configuration: `GET /v1/integrations/configuration/{id}/products` 3. Get billing plans for a product: `GET /integrations/integration/{integrationId}/products/{productId}/plans` 4. Review the `metadataSchema` for each product to understand required metadata 5. Create storage with discovered product: `POST /v1/storage/stores/integration/direct` ## Usage Patterns - **Free resources**: Omit `billingPlanId` - endpoint will auto-discover free plans - **Paid resources**: Provide `billingPlanId` from billing plans discovery - **Prepayment plans**: Also provide `prepaymentAmountCents` for variable amount plans ## Limitations - **Admin access required**: Only integration configuration admins can create stores - **Storage limits apply**: Subject to your team's storage quotas - **Payment method required**: For paid plans, ensure valid payment method is configured ## Error Responses - `400 Bad Request`: Invalid input, no plans available, or billing issues - `403 Forbidden`: Insufficient permissions (non-admin users) - `404 Not Found`: Integration configuration or product not found - `429 Too Many Requests`: Rate limit exceeded",
        "operationId": "createIntegrationStoreDirect",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create integration store (free and paid plans)",
        "tags": [
          "integrations"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "store": {
                      "nullable": true,
                      "type": "object",
                      "properties": {
                        "projectsMetadata": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "projectId": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "framework": {
                                "nullable": true,
                                "type": "string",
                                "enum": [
                                  "blitzjs",
                                  "nextjs",
                                  "gatsby",
                                  "remix",
                                  "react-router",
                                  "astro",
                                  "hexo",
                                  "eleventy",
                                  "docusaurus-2",
                                  "docusaurus",
                                  "preact",
                                  "solidstart-1",
                                  "solidstart",
                                  "dojo",
                                  "ember",
                                  "vue",
                                  "scully",
                                  "ionic-angular",
                                  "angular",
                                  "polymer",
                                  "svelte",
                                  "sveltekit",
                                  "sveltekit-1",
                                  "ionic-react",
                                  "create-react-app",
                                  "gridsome",
                                  "umijs",
                                  "sapper",
                                  "saber",
                                  "stencil",
                                  "nuxtjs",
                                  "redwoodjs",
                                  "hugo",
                                  "jekyll",
                                  "brunch",
                                  "middleman",
                                  "zola",
                                  "hydrogen",
                                  "vite",
                                  "vitepress",
                                  "vuepress",
                                  "parcel",
                                  "fastapi",
                                  "fasthtml",
                                  "sanity-v3",
                                  "sanity",
                                  "storybook",
                                  "nitro",
                                  "hono",
                                  "express",
                                  "xmcp"
                                ]
                              },
                              "latestDeployment": {
                                "type": "string"
                              },
                              "environments": {
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "production",
                                    "preview",
                                    "development"
                                  ]
                                },
                                "type": "array"
                              },
                              "envVarPrefix": {
                                "nullable": true,
                                "type": "string"
                              },
                              "environmentVariables": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "deployments": {
                                "properties": {
                                  "required": {
                                    "type": "boolean"
                                  },
                                  "actions": {
                                    "items": {
                                      "properties": {
                                        "slug": {
                                          "type": "string"
                                        },
                                        "environments": {
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "production",
                                              "preview",
                                              "development"
                                            ]
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "required": [
                                        "slug",
                                        "environments"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "required",
                                  "actions"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "id",
                              "projectId",
                              "name",
                              "environments",
                              "envVarPrefix",
                              "environmentVariables"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "totalConnectedProjects": {
                          "type": "number"
                        },
                        "usageQuotaExceeded": {
                          "type": "boolean"
                        },
                        "status": {
                          "nullable": true,
                          "type": "string",
                          "enum": [
                            "available",
                            "error",
                            "suspended",
                            "limits-exceeded-suspended",
                            "limits-exceeded-suspended-store-count",
                            "initializing",
                            "uninstalled"
                          ]
                        },
                        "metadata": {
                          "additionalProperties": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              },
                              {
                                "type": "boolean"
                              },
                              {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              {
                                "items": {
                                  "type": "number"
                                },
                                "type": "array"
                              }
                            ]
                          },
                          "type": "object"
                        },
                        "externalResourceId": {
                          "type": "string"
                        },
                        "externalResourceStatus": {
                          "nullable": true,
                          "type": "string",
                          "enum": [
                            "error",
                            "suspended",
                            "uninstalled",
                            "ready",
                            "pending",
                            "resumed"
                          ]
                        },
                        "product": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "slug": {
                              "type": "string"
                            },
                            "iconUrl": {
                              "type": "string"
                            },
                            "shortDescription": {
                              "type": "string"
                            },
                            "metadataSchema": {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "object"
                                  ]
                                },
                                "properties": {
                                  "additionalProperties": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "string"
                                            ]
                                          },
                                          "ui:control": {
                                            "type": "string",
                                            "enum": [
                                              "input"
                                            ]
                                          },
                                          "enum": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "maxLength": {
                                            "type": "object",
                                            "properties": {
                                              "__@BRAND@7838": {
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "__@BRAND@7838"
                                            ]
                                          },
                                          "minLength": {
                                            "type": "object",
                                            "properties": {
                                              "__@BRAND@7838": {
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "__@BRAND@7838"
                                            ]
                                          },
                                          "pattern": {
                                            "type": "object",
                                            "properties": {
                                              "__@BRAND@7838": {
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "__@BRAND@7838"
                                            ]
                                          },
                                          "description": {
                                            "type": "string"
                                          },
                                          "default": {
                                            "type": "string"
                                          },
                                          "ui:label": {
                                            "type": "string"
                                          },
                                          "ui:read-only": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:hidden": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:disabled": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:description": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              }
                                            ]
                                          },
                                          "ui:formatted-value": {
                                            "properties": {
                                              "expr": {
                                                "type": "string"
                                              }
                                            },
                                            "required": [
                                              "expr"
                                            ],
                                            "type": "object"
                                          },
                                          "ui:placeholder": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "ui:control"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "number"
                                            ]
                                          },
                                          "ui:control": {
                                            "type": "string",
                                            "enum": [
                                              "input"
                                            ]
                                          },
                                          "maximum": {
                                            "type": "number"
                                          },
                                          "exclusiveMaximum": {
                                            "type": "number"
                                          },
                                          "minimum": {
                                            "type": "number"
                                          },
                                          "exclusiveMinimum": {
                                            "type": "number"
                                          },
                                          "description": {
                                            "type": "string"
                                          },
                                          "default": {
                                            "type": "number"
                                          },
                                          "ui:label": {
                                            "type": "string"
                                          },
                                          "ui:read-only": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:hidden": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:disabled": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:description": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              }
                                            ]
                                          },
                                          "ui:formatted-value": {
                                            "properties": {
                                              "expr": {
                                                "type": "string"
                                              }
                                            },
                                            "required": [
                                              "expr"
                                            ],
                                            "type": "object"
                                          },
                                          "ui:placeholder": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "ui:control"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "boolean"
                                            ]
                                          },
                                          "ui:control": {
                                            "type": "string",
                                            "enum": [
                                              "toggle"
                                            ]
                                          },
                                          "description": {
                                            "type": "string"
                                          },
                                          "default": {
                                            "type": "boolean"
                                          },
                                          "ui:label": {
                                            "type": "string"
                                          },
                                          "ui:read-only": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:hidden": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:disabled": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:description": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              }
                                            ]
                                          },
                                          "ui:formatted-value": {
                                            "properties": {
                                              "expr": {
                                                "type": "string"
                                              }
                                            },
                                            "required": [
                                              "expr"
                                            ],
                                            "type": "object"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "ui:control"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "array"
                                            ]
                                          },
                                          "items": {
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "number"
                                                ]
                                              },
                                              "description": {
                                                "type": "string"
                                              },
                                              "minimum": {
                                                "type": "number"
                                              },
                                              "exclusiveMinimum": {
                                                "type": "number"
                                              },
                                              "maximum": {
                                                "type": "number"
                                              },
                                              "exclusiveMaximum": {
                                                "type": "number"
                                              },
                                              "default": {
                                                "type": "number"
                                              }
                                            },
                                            "required": [
                                              "type"
                                            ],
                                            "type": "object"
                                          },
                                          "ui:control": {
                                            "type": "string",
                                            "enum": [
                                              "slider"
                                            ]
                                          },
                                          "ui:steps": {
                                            "items": {
                                              "type": "number"
                                            },
                                            "type": "array"
                                          },
                                          "maxItems": {
                                            "type": "number"
                                          },
                                          "minItems": {
                                            "type": "number"
                                          },
                                          "description": {
                                            "type": "string"
                                          },
                                          "ui:label": {
                                            "type": "string"
                                          },
                                          "ui:read-only": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:hidden": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:disabled": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:description": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              }
                                            ]
                                          },
                                          "ui:formatted-value": {
                                            "properties": {
                                              "expr": {
                                                "type": "string"
                                              }
                                            },
                                            "required": [
                                              "expr"
                                            ],
                                            "type": "object"
                                          },
                                          "default": {
                                            "items": {
                                              "type": "number"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "items",
                                          "ui:control",
                                          "ui:steps"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "string"
                                            ]
                                          },
                                          "ui:control": {
                                            "type": "string",
                                            "enum": [
                                              "select"
                                            ]
                                          },
                                          "ui:options": {
                                            "items": {
                                              "properties": {
                                                "value": {
                                                  "type": "string"
                                                },
                                                "label": {
                                                  "type": "string"
                                                },
                                                "disabled": {
                                                  "oneOf": [
                                                    {
                                                      "type": "boolean"
                                                    },
                                                    {
                                                      "properties": {
                                                        "expr": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "expr"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "enum": [
                                                        "update",
                                                        "create"
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "hidden": {
                                                  "oneOf": [
                                                    {
                                                      "type": "boolean"
                                                    },
                                                    {
                                                      "properties": {
                                                        "expr": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "expr"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "enum": [
                                                        "update",
                                                        "create"
                                                      ]
                                                    }
                                                  ]
                                                }
                                              },
                                              "required": [
                                                "value",
                                                "label"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "enum": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "maxLength": {
                                            "type": "object",
                                            "properties": {
                                              "__@BRAND@7838": {
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "__@BRAND@7838"
                                            ]
                                          },
                                          "minLength": {
                                            "type": "object",
                                            "properties": {
                                              "__@BRAND@7838": {
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "__@BRAND@7838"
                                            ]
                                          },
                                          "pattern": {
                                            "type": "object",
                                            "properties": {
                                              "__@BRAND@7838": {
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "__@BRAND@7838"
                                            ]
                                          },
                                          "description": {
                                            "type": "string"
                                          },
                                          "default": {
                                            "type": "string"
                                          },
                                          "ui:label": {
                                            "type": "string"
                                          },
                                          "ui:read-only": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:hidden": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:disabled": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:description": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              }
                                            ]
                                          },
                                          "ui:formatted-value": {
                                            "properties": {
                                              "expr": {
                                                "type": "string"
                                              }
                                            },
                                            "required": [
                                              "expr"
                                            ],
                                            "type": "object"
                                          },
                                          "ui:placeholder": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "ui:control",
                                          "ui:options"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "array"
                                            ]
                                          },
                                          "items": {
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "string"
                                                ]
                                              },
                                              "description": {
                                                "type": "string"
                                              },
                                              "minLength": {
                                                "type": "object",
                                                "properties": {
                                                  "__@BRAND@7838": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "__@BRAND@7838"
                                                ]
                                              },
                                              "maxLength": {
                                                "type": "object",
                                                "properties": {
                                                  "__@BRAND@7838": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "__@BRAND@7838"
                                                ]
                                              },
                                              "pattern": {
                                                "type": "object",
                                                "properties": {
                                                  "__@BRAND@7838": {
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "__@BRAND@7838"
                                                ]
                                              },
                                              "default": {
                                                "type": "string"
                                              },
                                              "enum": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "required": [
                                              "type"
                                            ],
                                            "type": "object"
                                          },
                                          "ui:control": {
                                            "type": "string",
                                            "enum": [
                                              "multi-select"
                                            ]
                                          },
                                          "ui:options": {
                                            "items": {
                                              "properties": {
                                                "value": {
                                                  "type": "string"
                                                },
                                                "label": {
                                                  "type": "string"
                                                },
                                                "disabled": {
                                                  "oneOf": [
                                                    {
                                                      "type": "boolean"
                                                    },
                                                    {
                                                      "properties": {
                                                        "expr": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "expr"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "enum": [
                                                        "update",
                                                        "create"
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "hidden": {
                                                  "oneOf": [
                                                    {
                                                      "type": "boolean"
                                                    },
                                                    {
                                                      "properties": {
                                                        "expr": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "required": [
                                                        "expr"
                                                      ],
                                                      "type": "object"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "enum": [
                                                        "update",
                                                        "create"
                                                      ]
                                                    }
                                                  ]
                                                }
                                              },
                                              "required": [
                                                "value",
                                                "label"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "maxItems": {
                                            "type": "number"
                                          },
                                          "minItems": {
                                            "type": "number"
                                          },
                                          "description": {
                                            "type": "string"
                                          },
                                          "ui:label": {
                                            "type": "string"
                                          },
                                          "ui:read-only": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:hidden": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:disabled": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:description": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              }
                                            ]
                                          },
                                          "ui:formatted-value": {
                                            "properties": {
                                              "expr": {
                                                "type": "string"
                                              }
                                            },
                                            "required": [
                                              "expr"
                                            ],
                                            "type": "object"
                                          },
                                          "ui:placeholder": {
                                            "type": "string"
                                          },
                                          "default": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "example": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "items",
                                          "ui:control",
                                          "ui:options"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "string"
                                            ]
                                          },
                                          "ui:control": {
                                            "type": "string",
                                            "enum": [
                                              "vercel-region"
                                            ]
                                          },
                                          "ui:options": {
                                            "items": {
                                              "oneOf": [
                                                {
                                                  "properties": {
                                                    "value": {
                                                      "type": "string"
                                                    },
                                                    "label": {
                                                      "type": "string"
                                                    },
                                                    "disabled": {
                                                      "oneOf": [
                                                        {
                                                          "type": "boolean"
                                                        },
                                                        {
                                                          "properties": {
                                                            "expr": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "required": [
                                                            "expr"
                                                          ],
                                                          "type": "object"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "enum": [
                                                            "update",
                                                            "create"
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "hidden": {
                                                      "oneOf": [
                                                        {
                                                          "type": "boolean"
                                                        },
                                                        {
                                                          "properties": {
                                                            "expr": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "required": [
                                                            "expr"
                                                          ],
                                                          "type": "object"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "enum": [
                                                            "update",
                                                            "create"
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "required": [
                                                    "value",
                                                    "label"
                                                  ],
                                                  "type": "object"
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "__@BRAND@7838": {
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "__@BRAND@7838"
                                                  ]
                                                },
                                                {
                                                  "properties": {
                                                    "value": {
                                                      "type": "object",
                                                      "properties": {
                                                        "__@BRAND@7838": {
                                                          "type": "object"
                                                        }
                                                      },
                                                      "required": [
                                                        "__@BRAND@7838"
                                                      ]
                                                    },
                                                    "disabled": {
                                                      "oneOf": [
                                                        {
                                                          "type": "boolean"
                                                        },
                                                        {
                                                          "properties": {
                                                            "expr": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "required": [
                                                            "expr"
                                                          ],
                                                          "type": "object"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "enum": [
                                                            "update",
                                                            "create"
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "hidden": {
                                                      "oneOf": [
                                                        {
                                                          "type": "boolean"
                                                        },
                                                        {
                                                          "properties": {
                                                            "expr": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "required": [
                                                            "expr"
                                                          ],
                                                          "type": "object"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "enum": [
                                                            "update",
                                                            "create"
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  "required": [
                                                    "value"
                                                  ],
                                                  "type": "object"
                                                }
                                              ]
                                            },
                                            "type": "array"
                                          },
                                          "enum": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "maxLength": {
                                            "type": "object",
                                            "properties": {
                                              "__@BRAND@7838": {
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "__@BRAND@7838"
                                            ]
                                          },
                                          "minLength": {
                                            "type": "object",
                                            "properties": {
                                              "__@BRAND@7838": {
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "__@BRAND@7838"
                                            ]
                                          },
                                          "pattern": {
                                            "type": "object",
                                            "properties": {
                                              "__@BRAND@7838": {
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "__@BRAND@7838"
                                            ]
                                          },
                                          "description": {
                                            "type": "string"
                                          },
                                          "default": {
                                            "type": "string"
                                          },
                                          "ui:label": {
                                            "type": "string"
                                          },
                                          "ui:read-only": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:hidden": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:disabled": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "ui:description": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              }
                                            ]
                                          },
                                          "ui:formatted-value": {
                                            "properties": {
                                              "expr": {
                                                "type": "string"
                                              }
                                            },
                                            "required": [
                                              "expr"
                                            ],
                                            "type": "object"
                                          },
                                          "ui:placeholder": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type",
                                          "ui:control",
                                          "ui:options"
                                        ],
                                        "type": "object"
                                      },
                                      {
                                        "properties": {
                                          "value": {
                                            "type": "object",
                                            "properties": {
                                              "__@BRAND@7838": {
                                                "type": "object"
                                              }
                                            },
                                            "required": [
                                              "__@BRAND@7838"
                                            ]
                                          },
                                          "disabled": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          },
                                          "hidden": {
                                            "oneOf": [
                                              {
                                                "type": "boolean"
                                              },
                                              {
                                                "properties": {
                                                  "expr": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "expr"
                                                ],
                                                "type": "object"
                                              },
                                              {
                                                "type": "string",
                                                "enum": [
                                                  "update",
                                                  "create"
                                                ]
                                              }
                                            ]
                                          }
                                        },
                                        "required": [
                                          "value"
                                        ],
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  "type": "object"
                                },
                                "required": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "type",
                                "properties"
                              ],
                              "type": "object"
                            },
                            "resourceLinks": {
                              "items": {
                                "properties": {
                                  "href": {
                                    "type": "string"
                                  },
                                  "title": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "href",
                                  "title"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "tags": {
                              "items": {
                                "type": "string",
                                "enum": [
                                  "edge-config",
                                  "redis",
                                  "postgres",
                                  "blob",
                                  "checks",
                                  "experimentation",
                                  "storage",
                                  "ai",
                                  "observability",
                                  "video",
                                  "authentication",
                                  "workflow",
                                  "logDrain",
                                  "traceDrain",
                                  "messaging",
                                  "other",
                                  "mysql",
                                  "vector",
                                  "tag_ai",
                                  "tag_analytics",
                                  "tag_authentication",
                                  "tag_cms",
                                  "tag_code_repository",
                                  "tag_commerce",
                                  "tag_databases",
                                  "tag_dev_tools",
                                  "tag_experimentation",
                                  "tag_flags",
                                  "tag_logging",
                                  "tag_messaging",
                                  "tag_monitoring",
                                  "tag_observability",
                                  "tag_performance",
                                  "tag_productivity",
                                  "tag_searching",
                                  "tag_security",
                                  "tag_testing",
                                  "tag_video",
                                  "tag_workflow",
                                  "tag_checks",
                                  "tag_storage",
                                  "tag_logDrain",
                                  "tag_traceDrain",
                                  "tag_other"
                                ]
                              },
                              "type": "array"
                            },
                            "projectConnectionScopes": {
                              "items": {
                                "type": "string",
                                "enum": [
                                  "read:deployment",
                                  "read:domain",
                                  "read:project",
                                  "read-write:deployment",
                                  "read-write:deployment-check",
                                  "read-write:domain",
                                  "read-write:global-project-env-vars",
                                  "read-write:integration-deployment-action",
                                  "read-write:log-drain",
                                  "read-write:project-env-vars",
                                  "read-write:project-protection-bypass",
                                  "read-write:trace-drain"
                                ]
                              },
                              "type": "array"
                            },
                            "showSSOLinkOnProjectConnection": {
                              "type": "boolean"
                            },
                            "disableResourceRenaming": {
                              "type": "boolean"
                            },
                            "repl": {
                              "properties": {
                                "enabled": {
                                  "type": "boolean"
                                },
                                "supportsReadOnlyMode": {
                                  "type": "boolean"
                                },
                                "welcomeMessage": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "enabled",
                                "supportsReadOnlyMode"
                              ],
                              "type": "object"
                            },
                            "guides": {
                              "items": {
                                "properties": {
                                  "framework": {
                                    "type": "string"
                                  },
                                  "title": {
                                    "type": "string"
                                  },
                                  "steps": {
                                    "items": {
                                      "properties": {
                                        "title": {
                                          "type": "string"
                                        },
                                        "content": {
                                          "type": "string"
                                        },
                                        "actions": {
                                          "items": {
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "enum": [
                                                  "connect_to_project",
                                                  "configure_project_connections"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "type"
                                            ],
                                            "type": "object"
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "required": [
                                        "title",
                                        "content"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "framework",
                                  "title",
                                  "steps"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "__@BRAND@7838": {
                                  "type": "object"
                                }
                              },
                              "required": [
                                "__@BRAND@7838"
                              ]
                            },
                            "disabled": {
                              "oneOf": [
                                {
                                  "type": "boolean"
                                },
                                {
                                  "properties": {
                                    "expr": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "expr"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "type": "string",
                                  "enum": [
                                    "update",
                                    "create"
                                  ]
                                }
                              ]
                            },
                            "hidden": {
                              "oneOf": [
                                {
                                  "type": "boolean"
                                },
                                {
                                  "properties": {
                                    "expr": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "expr"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "type": "string",
                                  "enum": [
                                    "update",
                                    "create"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "value"
                          ],
                          "type": "object"
                        },
                        "protocolSettings": {
                          "properties": {
                            "experimentation": {
                              "properties": {
                                "edgeConfigSyncingEnabled": {
                                  "type": "boolean"
                                },
                                "edgeConfigId": {
                                  "type": "string"
                                },
                                "edgeConfigTokenId": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "notification": {
                          "properties": {
                            "title": {
                              "type": "string"
                            },
                            "level": {
                              "type": "string",
                              "enum": [
                                "error",
                                "info",
                                "warn"
                              ]
                            },
                            "message": {
                              "type": "string"
                            },
                            "href": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "title",
                            "level"
                          ],
                          "type": "object"
                        },
                        "secrets": {
                          "items": {
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "length": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "name",
                              "length"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "billingPlan": {
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "prepayment",
                                "subscription"
                              ]
                            },
                            "description": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "scope": {
                              "type": "string",
                              "enum": [
                                "installation",
                                "resource"
                              ]
                            },
                            "paymentMethodRequired": {
                              "type": "boolean"
                            },
                            "preauthorizationAmount": {
                              "type": "number"
                            },
                            "initialCharge": {
                              "type": "string"
                            },
                            "minimumAmount": {
                              "type": "string"
                            },
                            "maximumAmount": {
                              "type": "string"
                            },
                            "maximumAmountAutoPurchasePerPeriod": {
                              "type": "string"
                            },
                            "cost": {
                              "type": "string"
                            },
                            "details": {
                              "items": {
                                "properties": {
                                  "label": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "label"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "highlightedDetails": {
                              "items": {
                                "properties": {
                                  "label": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "label"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "quote": {
                              "items": {
                                "properties": {
                                  "line": {
                                    "type": "string"
                                  },
                                  "amount": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "line",
                                  "amount"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "effectiveDate": {
                              "type": "string"
                            },
                            "disabled": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "type",
                            "description",
                            "id",
                            "name",
                            "scope",
                            "paymentMethodRequired"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "projectsMetadata",
                        "usageQuotaExceeded",
                        "status",
                        "externalResourceId",
                        "product",
                        "secrets"
                      ]
                    }
                  },
                  "required": [
                    "store"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelRateLimitError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "integrationConfigurationId",
                  "integrationProductIdOrSlug"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 128,
                    "description": "Human-readable name for the storage resource",
                    "example": "my-dev-database"
                  },
                  "integrationConfigurationId": {
                    "type": "string",
                    "description": "ID of your integration configuration. Get this from GET /v1/integrations/configurations",
                    "example": "icfg_cuwj0AdCdH3BwWT4LPijCC7t",
                    "pattern": "^icfg_[a-zA-Z0-9]+$"
                  },
                  "integrationProductIdOrSlug": {
                    "type": "string",
                    "description": "ID or slug of the integration product. Get available products from GET /v1/integrations/configuration/{id}/products",
                    "example": "iap_postgres_db",
                    "oneOf": [
                      {
                        "pattern": "^iap_[a-zA-Z0-9_]+$",
                        "description": "Product ID format"
                      },
                      {
                        "pattern": "^[a-z0-9-]+$",
                        "description": "Product slug format"
                      }
                    ]
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Optional key-value pairs for resource metadata",
                    "additionalProperties": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      ]
                    },
                    "example": {
                      "environment": "development",
                      "project": "my-app",
                      "tags": [
                        "database",
                        "postgres"
                      ]
                    }
                  },
                  "externalId": {
                    "type": "string",
                    "description": "Optional external identifier for tracking purposes",
                    "example": "dev-db-001"
                  },
                  "protocolSettings": {
                    "type": "object",
                    "description": "Protocol-specific configuration settings",
                    "additionalProperties": true,
                    "example": {
                      "experimentation": {
                        "edgeConfigSyncingEnabled": true
                      }
                    }
                  },
                  "source": {
                    "type": "string",
                    "description": "Source of the store creation request",
                    "example": "api",
                    "default": "marketplace"
                  },
                  "billingPlanId": {
                    "type": "string",
                    "description": "ID of the billing plan for paid resources. Get available plans from GET /integrations/integration/{id}/products/{productId}/plans. If not provided, automatically discovers free billing plans.",
                    "example": "bp_abc123def456"
                  },
                  "paymentMethodId": {
                    "type": "string",
                    "description": "Payment method ID for paid resources. Optional - uses default payment method if not provided.",
                    "example": "pm_1AbcDefGhiJklMno"
                  },
                  "prepaymentAmountCents": {
                    "type": "number",
                    "minimum": 50,
                    "description": "Amount in cents for prepayment billing plans. Required only for prepayment plans with variable amounts.",
                    "example": 5000
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/teams/{teamId}/members": {
      "get": {
        "description": "Get a paginated list of team members for the provided team.",
        "operationId": "getTeamMembers",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List team members",
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "members": {
                      "items": {
                        "properties": {
                          "avatar": {
                            "type": "string",
                            "description": "ID of the file for the Avatar of this member.",
                            "example": "123a6c5209bc3778245d011443644c8d27dc2c50"
                          },
                          "confirmed": {
                            "type": "boolean",
                            "description": "Boolean that indicates if this member was confirmed by an owner.",
                            "example": true
                          },
                          "email": {
                            "type": "string",
                            "description": "The email of this member.",
                            "example": "jane.doe@example.com"
                          },
                          "github": {
                            "properties": {
                              "login": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "description": "Information about the GitHub account for this user."
                          },
                          "gitlab": {
                            "properties": {
                              "login": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "description": "Information about the GitLab account of this user."
                          },
                          "bitbucket": {
                            "properties": {
                              "login": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "description": "Information about the Bitbucket account of this user."
                          },
                          "role": {
                            "type": "string",
                            "enum": [
                              "OWNER",
                              "MEMBER",
                              "DEVELOPER",
                              "SECURITY",
                              "BILLING",
                              "VIEWER",
                              "VIEWER_FOR_PLUS",
                              "CONTRIBUTOR"
                            ],
                            "description": "Role of this user in the team.",
                            "example": "OWNER"
                          },
                          "uid": {
                            "type": "string",
                            "description": "The ID of this user.",
                            "example": "zTuNVUXEAvvnNN3IaqinkyMw"
                          },
                          "username": {
                            "type": "string",
                            "description": "The unique username of this user.",
                            "example": "jane-doe"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of this user.",
                            "example": "Jane Doe"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "Timestamp in milliseconds when this member was added.",
                            "example": 1588720733602
                          },
                          "accessRequestedAt": {
                            "type": "number",
                            "description": "Timestamp in milliseconds for when this team member was accepted by an owner.",
                            "example": 1588820733602
                          },
                          "joinedFrom": {
                            "properties": {
                              "origin": {
                                "type": "string",
                                "enum": [
                                  "teams",
                                  "link",
                                  "mail",
                                  "import",
                                  "github",
                                  "gitlab",
                                  "bitbucket",
                                  "saml",
                                  "dsync",
                                  "feedback",
                                  "organization-teams"
                                ]
                              },
                              "commitId": {
                                "type": "string"
                              },
                              "repoId": {
                                "type": "string"
                              },
                              "repoPath": {
                                "type": "string"
                              },
                              "gitUserId": {
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "gitUserLogin": {
                                "type": "string"
                              },
                              "ssoUserId": {
                                "type": "string"
                              },
                              "ssoConnectedAt": {
                                "type": "number"
                              },
                              "idpUserId": {
                                "type": "string"
                              },
                              "dsyncUserId": {
                                "type": "string"
                              },
                              "dsyncConnectedAt": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "origin"
                            ],
                            "type": "object",
                            "description": "Map with information about the members origin if they joined by requesting access."
                          },
                          "projects": {
                            "items": {
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "role": {
                                  "type": "string",
                                  "enum": [
                                    "ADMIN",
                                    "PROJECT_DEVELOPER",
                                    "PROJECT_VIEWER"
                                  ]
                                }
                              },
                              "required": [
                                "name",
                                "id"
                              ],
                              "type": "object",
                              "description": "Array of project memberships"
                            },
                            "type": "array",
                            "description": "Array of project memberships"
                          }
                        },
                        "required": [
                          "confirmed",
                          "email",
                          "role",
                          "uid",
                          "username",
                          "createdAt"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "emailInviteCodes": {
                      "items": {
                        "properties": {
                          "accessGroups": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "id": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "role": {
                            "type": "string",
                            "enum": [
                              "OWNER",
                              "MEMBER",
                              "DEVELOPER",
                              "SECURITY",
                              "BILLING",
                              "VIEWER",
                              "VIEWER_FOR_PLUS",
                              "CONTRIBUTOR"
                            ]
                          },
                          "teamRoles": {
                            "items": {
                              "type": "string",
                              "enum": [
                                "OWNER",
                                "MEMBER",
                                "DEVELOPER",
                                "SECURITY",
                                "BILLING",
                                "VIEWER",
                                "VIEWER_FOR_PLUS",
                                "CONTRIBUTOR"
                              ]
                            },
                            "type": "array"
                          },
                          "teamPermissions": {
                            "items": {
                              "type": "string",
                              "enum": [
                                "IntegrationManager",
                                "CreateProject",
                                "FullProductionDeployment",
                                "UsageViewer",
                                "EnvVariableManager",
                                "EnvironmentManager",
                                "V0Builder",
                                "V0Chatter",
                                "V0Viewer"
                              ]
                            },
                            "type": "array"
                          },
                          "isDSyncUser": {
                            "type": "boolean"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "expired": {
                            "type": "boolean"
                          },
                          "projects": {
                            "additionalProperties": {
                              "type": "string",
                              "enum": [
                                "ADMIN",
                                "PROJECT_DEVELOPER",
                                "PROJECT_VIEWER"
                              ]
                            },
                            "type": "object"
                          },
                          "entitlements": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "id",
                          "isDSyncUser"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "properties": {
                        "hasNext": {
                          "type": "boolean"
                        },
                        "count": {
                          "type": "number",
                          "description": "Amount of items in the current page.",
                          "example": 20
                        },
                        "next": {
                          "nullable": true,
                          "type": "number",
                          "description": "Timestamp that must be used to request the next page.",
                          "example": 1540095775951
                        },
                        "prev": {
                          "nullable": true,
                          "type": "number",
                          "description": "Timestamp that must be used to request the previous page.",
                          "example": 1540095775951
                        }
                      },
                      "required": [
                        "hasNext",
                        "count",
                        "next",
                        "prev"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "members",
                    "pagination"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Limit how many teams should be returned",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Limit how many teams should be returned",
              "example": 20,
              "minimum": 1,
              "type": "number"
            }
          },
          {
            "name": "since",
            "description": "Timestamp in milliseconds to only include members added since then.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Timestamp in milliseconds to only include members added since then.",
              "example": 1540095775951,
              "type": "number"
            }
          },
          {
            "name": "until",
            "description": "Timestamp in milliseconds to only include members added until then.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Timestamp in milliseconds to only include members added until then.",
              "example": 1540095775951,
              "type": "number"
            }
          },
          {
            "name": "search",
            "description": "Search team members by their name, username, and email.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Search team members by their name, username, and email.",
              "type": "string"
            }
          },
          {
            "name": "role",
            "description": "Only return members with the specified team role.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Only return members with the specified team role.",
              "example": "OWNER",
              "type": "string",
              "enum": [
                "OWNER",
                "MEMBER",
                "DEVELOPER",
                "SECURITY",
                "BILLING",
                "VIEWER",
                "VIEWER_FOR_PLUS",
                "CONTRIBUTOR"
              ]
            }
          },
          {
            "name": "excludeProject",
            "description": "Exclude members who belong to the specified project.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Exclude members who belong to the specified project.",
              "type": "string"
            }
          },
          {
            "name": "eligibleMembersForProjectId",
            "description": "Include team members who are eligible to be members of the specified project.",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Include team members who are eligible to be members of the specified project.",
              "type": "string"
            }
          }
        ],
        "x-speakeasy-test": false
      }
    },
    "/v1/teams/{teamId}/members": {
      "post": {
        "description": "Invite a user to join the team specified in the URL. The authenticated user needs to be an `OWNER` in order to successfully invoke this endpoint. The user can be specified with an email or an ID. If both email and ID are provided, ID will take priority.",
        "operationId": "inviteUserToTeam",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Invite a user",
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "description": "The member was successfully added to the team",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "uid": {
                      "type": "string",
                      "description": "The ID of the invited user",
                      "example": "kr1PsOIzqEL5Xg6M4VZcZosf"
                    },
                    "username": {
                      "type": "string",
                      "description": "The username of the invited user",
                      "example": "john-doe"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email of the invited user.",
                      "example": "john@user.co"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "OWNER",
                        "MEMBER",
                        "DEVELOPER",
                        "SECURITY",
                        "BILLING",
                        "VIEWER",
                        "VIEWER_FOR_PLUS",
                        "CONTRIBUTOR"
                      ],
                      "description": "The role used for the invitation",
                      "example": "MEMBER"
                    },
                    "teamRoles": {
                      "items": {
                        "type": "string",
                        "enum": [
                          "OWNER",
                          "MEMBER",
                          "DEVELOPER",
                          "SECURITY",
                          "BILLING",
                          "VIEWER",
                          "VIEWER_FOR_PLUS",
                          "CONTRIBUTOR"
                        ],
                        "description": "The team roles of the user",
                        "example": [
                          "MEMBER"
                        ]
                      },
                      "type": "array",
                      "description": "The team roles of the user",
                      "example": [
                        "MEMBER"
                      ]
                    },
                    "teamPermissions": {
                      "items": {
                        "type": "string",
                        "enum": [
                          "IntegrationManager",
                          "CreateProject",
                          "FullProductionDeployment",
                          "UsageViewer",
                          "EnvVariableManager",
                          "EnvironmentManager",
                          "V0Builder",
                          "V0Chatter",
                          "V0Viewer"
                        ],
                        "description": "The team permissions of the user",
                        "example": [
                          "CreateProject"
                        ]
                      },
                      "type": "array",
                      "description": "The team permissions of the user",
                      "example": [
                        "CreateProject"
                      ]
                    }
                  },
                  "required": [
                    "uid",
                    "username",
                    "email",
                    "role"
                  ],
                  "type": "object",
                  "description": "The member was successfully added to the team"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nThe user already requested access to the team\nThe team reached the maximum allowed amount of members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user must be a team owner to perform the action\nYou do not have permission to access this resource."
          },
          "503": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique team identifier",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the user to invite",
                    "example": "john@example.com"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "OWNER",
                      "MEMBER",
                      "DEVELOPER",
                      "SECURITY",
                      "BILLING",
                      "VIEWER",
                      "VIEWER_FOR_PLUS",
                      "CONTRIBUTOR"
                    ],
                    "description": "The role of the user to invite",
                    "example": [
                      "OWNER",
                      "MEMBER",
                      "DEVELOPER",
                      "SECURITY",
                      "BILLING",
                      "VIEWER",
                      "VIEWER_FOR_PLUS",
                      "CONTRIBUTOR"
                    ],
                    "default": "MEMBER"
                  },
                  "projects": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "role",
                        "projectId"
                      ],
                      "properties": {
                        "projectId": {
                          "type": "string",
                          "maxLength": 64,
                          "example": "prj_ndlgr43fadlPyCtREAqxxdyFK",
                          "description": "The ID of the project."
                        },
                        "role": {
                          "type": "string",
                          "enum": [
                            "ADMIN",
                            "PROJECT_VIEWER",
                            "PROJECT_DEVELOPER"
                          ],
                          "example": "ADMIN",
                          "description": "Sets the project roles for the invited user"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "x-speakeasy-test": false
      }
    },
    "/v1/teams/{teamId}/request": {
      "post": {
        "description": "Request access to a team as a member. An owner has to approve the request. Only 10 users can request access to a team at the same time.",
        "operationId": "requestAccessToTeam",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Request access to a team",
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "description": "Successfuly requested access to the team.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "teamSlug": {
                      "type": "string"
                    },
                    "teamName": {
                      "type": "string"
                    },
                    "confirmed": {
                      "type": "boolean"
                    },
                    "joinedFrom": {
                      "properties": {
                        "origin": {
                          "type": "string",
                          "enum": [
                            "import",
                            "teams",
                            "github",
                            "gitlab",
                            "bitbucket",
                            "feedback",
                            "organization-teams",
                            "link",
                            "mail",
                            "saml",
                            "dsync"
                          ]
                        },
                        "commitId": {
                          "type": "string"
                        },
                        "repoId": {
                          "type": "string"
                        },
                        "repoPath": {
                          "type": "string"
                        },
                        "gitUserId": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "gitUserLogin": {
                          "type": "string"
                        },
                        "ssoUserId": {
                          "type": "string"
                        },
                        "ssoConnectedAt": {
                          "type": "number"
                        },
                        "idpUserId": {
                          "type": "string"
                        },
                        "dsyncUserId": {
                          "type": "string"
                        },
                        "dsyncConnectedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "origin"
                      ],
                      "type": "object"
                    },
                    "accessRequestedAt": {
                      "type": "number"
                    },
                    "github": {
                      "nullable": true,
                      "properties": {
                        "login": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "gitlab": {
                      "nullable": true,
                      "properties": {
                        "login": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "bitbucket": {
                      "nullable": true,
                      "properties": {
                        "login": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "teamSlug",
                    "teamName",
                    "github",
                    "gitlab",
                    "bitbucket"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The team was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "503": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique team identifier",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "joinedFrom"
                ],
                "properties": {
                  "joinedFrom": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "origin"
                    ],
                    "properties": {
                      "origin": {
                        "type": "string",
                        "enum": [
                          "import",
                          "teams",
                          "github",
                          "gitlab",
                          "bitbucket",
                          "feedback",
                          "organization-teams"
                        ],
                        "description": "The origin of the request.",
                        "example": "github"
                      },
                      "commitId": {
                        "type": "string",
                        "description": "The commit sha if the origin is a git provider.",
                        "example": "f498d25d8bd654b578716203be73084b31130cd7"
                      },
                      "repoId": {
                        "type": "string",
                        "description": "The ID of the repository for the given Git provider.",
                        "example": "67753070"
                      },
                      "repoPath": {
                        "type": "string",
                        "description": "The path to the repository for the given Git provider.",
                        "example": "jane-doe/example"
                      },
                      "gitUserId": {
                        "description": "The ID of the Git account of the user who requests access.",
                        "example": 103053343,
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "gitUserLogin": {
                        "type": "string",
                        "description": "The login name for the Git account of the user who requests access.",
                        "example": "jane-doe"
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/teams/{teamId}/request/{userId}": {
      "get": {
        "description": "Check the status of a join request. It'll respond with a 404 if the request has been declined. If no `userId` path segment was provided, this endpoint will instead return the status of the authenticated user.",
        "operationId": "getTeamAccessRequest",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get access request status",
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "description": "Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "teamSlug": {
                      "type": "string",
                      "description": "The slug of the team.",
                      "example": "my-team"
                    },
                    "teamName": {
                      "type": "string",
                      "description": "The name of the team.",
                      "example": "My Team"
                    },
                    "confirmed": {
                      "type": "boolean",
                      "description": "Current status of the membership. Will be `true` if confirmed, if pending it'll be `false`.",
                      "example": false
                    },
                    "joinedFrom": {
                      "properties": {
                        "origin": {
                          "type": "string",
                          "enum": [
                            "link",
                            "mail",
                            "import",
                            "teams",
                            "github",
                            "gitlab",
                            "bitbucket",
                            "saml",
                            "dsync",
                            "feedback",
                            "organization-teams"
                          ]
                        },
                        "commitId": {
                          "type": "string"
                        },
                        "repoId": {
                          "type": "string"
                        },
                        "repoPath": {
                          "type": "string"
                        },
                        "gitUserId": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "gitUserLogin": {
                          "type": "string"
                        },
                        "ssoUserId": {
                          "type": "string"
                        },
                        "ssoConnectedAt": {
                          "type": "number"
                        },
                        "idpUserId": {
                          "type": "string"
                        },
                        "dsyncUserId": {
                          "type": "string"
                        },
                        "dsyncConnectedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "origin"
                      ],
                      "type": "object",
                      "description": "A map that describes the origin from where the user joined."
                    },
                    "accessRequestedAt": {
                      "type": "number",
                      "description": "Timestamp in milliseconds when the user requested access to the team.",
                      "example": 1588720733602
                    },
                    "github": {
                      "nullable": true,
                      "properties": {
                        "login": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "description": "Map of the connected GitHub account."
                    },
                    "gitlab": {
                      "nullable": true,
                      "properties": {
                        "login": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "description": "Map of the connected GitLab account."
                    },
                    "bitbucket": {
                      "nullable": true,
                      "properties": {
                        "login": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "description": "Map of the connected Bitbucket account."
                    }
                  },
                  "required": [
                    "teamSlug",
                    "teamName",
                    "confirmed",
                    "joinedFrom",
                    "accessRequestedAt",
                    "github",
                    "gitlab",
                    "bitbucket"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.\nUser is already a confirmed member of the team and did not request access. Only visible when the authenticated user does have access to the team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The provided user doesn't have a membership.\nTeam was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique user identifier"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique team identifier",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          }
        ]
      }
    },
    "/v1/teams/{teamId}/members/teams/join": {
      "post": {
        "description": "Join a team with a provided invite code or team ID.",
        "operationId": "joinTeam",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Join a team",
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "description": "Successfully joined a team.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "teamId": {
                      "type": "string",
                      "description": "The ID of the team the user joined.",
                      "example": "team_LLHUOMOoDlqOp8wPE4kFo9pE"
                    },
                    "slug": {
                      "type": "string",
                      "description": "The slug of the team the user joined.",
                      "example": "my-team"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the team the user joined.",
                      "example": "My Team"
                    },
                    "from": {
                      "type": "string",
                      "description": "The origin of how the user joined.",
                      "example": "email"
                    }
                  },
                  "required": [
                    "teamId",
                    "slug",
                    "name",
                    "from"
                  ],
                  "type": "object",
                  "description": "Successfully joined a team."
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": ""
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique team identifier",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inviteCode": {
                    "type": "string",
                    "description": "The invite code to join the team.",
                    "example": "fisdh38aejkeivn34nslfore9vjtn4ls"
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/teams/{teamId}/members/{uid}": {
      "patch": {
        "description": "Update the membership of a Team Member on the Team specified by `teamId`, such as changing the _role_ of the member, or confirming a request to join the Team for an unconfirmed member. The authenticated user must be an `OWNER` of the Team.",
        "operationId": "updateTeamMember",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update a Team Member",
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the membership.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the team."
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nCannot disconnect SSO from a Team member that does not have a SSO connection.\nCannot confirm a member that is already confirmed.\nCannot confirm a member that did not request access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Team members can only be updated by an owner, or by the authenticated user if they are only disconnecting their SAML connection to the Team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": ""
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The provided user is not part of this team.\nA user with the specified ID does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "uid",
            "description": "The ID of the member.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the member.",
              "example": "ndfasllgPyCtREAqxxdyFKb"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique team identifier",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "confirmed": {
                    "type": "boolean",
                    "enum": [
                      true
                    ],
                    "description": "Accept a user who requested access to the team.",
                    "example": true
                  },
                  "role": {
                    "type": "string",
                    "description": "The role in the team of the member.",
                    "example": [
                      "MEMBER",
                      "VIEWER"
                    ],
                    "default": "MEMBER"
                  },
                  "projects": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "role",
                        "projectId"
                      ],
                      "properties": {
                        "projectId": {
                          "type": "string",
                          "maxLength": 256,
                          "example": "prj_ndlgr43fadlPyCtREAqxxdyFK",
                          "description": "The ID of the project."
                        },
                        "role": {
                          "type": "string",
                          "enum": [
                            "ADMIN",
                            "PROJECT_VIEWER",
                            "PROJECT_DEVELOPER",
                            null
                          ],
                          "example": "ADMIN",
                          "description": "The project role of the member that will be added. \\\"null\\\" will remove this project level role.",
                          "nullable": true
                        }
                      }
                    }
                  },
                  "joinedFrom": {
                    "additionalProperties": false,
                    "type": "object",
                    "properties": {
                      "ssoUserId": {
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "description": "Remove a Team Member from the Team, or dismiss a user that requested access, or leave a team.",
        "operationId": "removeTeamMember",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Remove a Team Member",
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "description": "Successfully removed a member of the team.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the team."
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource.\nNot authorized to update the team."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "503": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "uid",
            "description": "The user ID of the member.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The user ID of the member.",
              "example": "ndlgr43fadlPyCtREAqxxdyFK"
            }
          },
          {
            "name": "newDefaultTeamId",
            "description": "The ID of the team to set as the new default team for the Northstar user.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID of the team to set as the new default team for the Northstar user.",
              "example": "team_nllPyCtREAqxxdyFKbbMDlxd"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique team identifier",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          }
        ]
      }
    },
    "/v2/teams/{teamId}": {
      "get": {
        "description": "Get information for the Team specified by the `teamId` parameter.",
        "operationId": "getTeam",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get a Team",
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "description": "The requested team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource.\nNot authorized to access the team."
          },
          "404": {
            "description": "Team was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "path",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            },
            "required": true
          }
        ]
      },
      "patch": {
        "description": "Update the information of a Team specified by the `teamId` parameter. The request body should contain the information that will be updated on the Team.",
        "operationId": "patchTeam",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update a Team",
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource.\nNot authorized to update the team. Must be an OWNER."
          },
          "428": {
            "description": "Owner does not have protection add-on\nAdvanced Deployment Protection is not available for the user plan"
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "path",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            },
            "required": true
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "regex",
                    "description": "The hash value of an uploaded image."
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 140,
                    "example": "Our mission is to make cloud computing accessible to everyone",
                    "description": "A short text that describes the team."
                  },
                  "emailDomain": {
                    "type": "string",
                    "format": "regex",
                    "example": "example.com",
                    "nullable": true
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 256,
                    "example": "My Team",
                    "description": "The name of the team."
                  },
                  "previewDeploymentSuffix": {
                    "type": "string",
                    "format": "hostname",
                    "example": "example.dev",
                    "description": "Suffix that will be used for all preview deployments.",
                    "nullable": true
                  },
                  "regenerateInviteCode": {
                    "type": "boolean",
                    "example": true,
                    "description": "Create a new invite code and replace the current one."
                  },
                  "saml": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "enforced": {
                        "type": "boolean",
                        "example": true,
                        "description": "Require that members of the team use SAML Single Sign-On."
                      },
                      "roles": {
                        "type": "object",
                        "description": "Directory groups to role or access group mappings.",
                        "additionalProperties": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "OWNER",
                                "MEMBER",
                                "DEVELOPER",
                                "SECURITY",
                                "BILLING",
                                "VIEWER",
                                "VIEWER_FOR_PLUS",
                                "CONTRIBUTOR"
                              ]
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "accessGroupId"
                              ],
                              "properties": {
                                "accessGroupId": {
                                  "type": "string",
                                  "pattern": "^ag_[A-z0-9_ -]+$"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  "slug": {
                    "type": "string",
                    "example": "my-team",
                    "description": "A new slug for the team."
                  },
                  "enablePreviewFeedback": {
                    "type": "string",
                    "example": "on",
                    "description": "Enable preview toolbar: one of on, off or default."
                  },
                  "enableProductionFeedback": {
                    "type": "string",
                    "example": "on",
                    "description": "Enable production toolbar: one of on, off or default."
                  },
                  "sensitiveEnvironmentVariablePolicy": {
                    "type": "string",
                    "example": "on",
                    "description": "Sensitive environment variable policy: one of on, off or default."
                  },
                  "remoteCaching": {
                    "type": "object",
                    "description": "Whether or not remote caching is enabled for the team",
                    "additionalProperties": false,
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "example": true,
                        "description": "Enable or disable remote caching for the team."
                      }
                    }
                  },
                  "hideIpAddresses": {
                    "type": "boolean",
                    "example": false,
                    "description": "Display or hide IP addresses in Monitoring queries."
                  },
                  "hideIpAddressesInLogDrains": {
                    "type": "boolean",
                    "example": false,
                    "description": "Display or hide IP addresses in Log Drains."
                  },
                  "defaultDeploymentProtection": {
                    "type": "object",
                    "description": "Default deployment protection settings for new projects.",
                    "additionalProperties": false,
                    "properties": {
                      "passwordProtection": {
                        "additionalProperties": false,
                        "description": "Allows to protect project deployments with a password",
                        "properties": {
                          "deploymentType": {
                            "description": "Specify if the password will apply to every Deployment Target or just Preview",
                            "enum": [
                              "all",
                              "preview",
                              "prod_deployment_urls_and_all_previews",
                              "all_except_custom_domains"
                            ],
                            "type": "string"
                          },
                          "password": {
                            "description": "The password that will be used to protect Project Deployments",
                            "maxLength": 72,
                            "type": "string",
                            "nullable": true
                          }
                        },
                        "required": [
                          "deploymentType"
                        ],
                        "type": "object",
                        "nullable": true
                      },
                      "ssoProtection": {
                        "additionalProperties": false,
                        "description": "Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team",
                        "properties": {
                          "deploymentType": {
                            "default": "preview",
                            "description": "Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview",
                            "enum": [
                              "all",
                              "preview",
                              "prod_deployment_urls_and_all_previews",
                              "all_except_custom_domains"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "deploymentType"
                        ],
                        "type": "object",
                        "nullable": true
                      }
                    }
                  },
                  "defaultExpirationSettings": {
                    "properties": {
                      "expiration": {
                        "description": "The time period to keep non-production deployments for",
                        "example": "1y",
                        "type": "string",
                        "enum": [
                          "1y",
                          "6m",
                          "3m",
                          "2m",
                          "1m",
                          "2w",
                          "1w",
                          "1d",
                          "unlimited"
                        ]
                      },
                      "expirationProduction": {
                        "description": "The time period to keep production deployments for",
                        "example": "1y",
                        "type": "string",
                        "enum": [
                          "1y",
                          "6m",
                          "3m",
                          "2m",
                          "1m",
                          "2w",
                          "1w",
                          "1d",
                          "unlimited"
                        ]
                      },
                      "expirationCanceled": {
                        "description": "The time period to keep canceled deployments for",
                        "example": "1y",
                        "type": "string",
                        "enum": [
                          "1y",
                          "6m",
                          "3m",
                          "2m",
                          "1m",
                          "2w",
                          "1w",
                          "1d",
                          "unlimited"
                        ]
                      },
                      "expirationErrored": {
                        "description": "The time period to keep errored deployments for",
                        "example": "1y",
                        "type": "string",
                        "enum": [
                          "1y",
                          "6m",
                          "3m",
                          "2m",
                          "1m",
                          "2w",
                          "1w",
                          "1d",
                          "unlimited"
                        ]
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v2/teams": {
      "get": {
        "description": "Get a paginated list of all the Teams the authenticated User is a member of.",
        "operationId": "getTeams",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List all teams",
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "description": "A paginated list of teams.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "teams": {
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/Team"
                          },
                          {
                            "$ref": "#/components/schemas/TeamLimited"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "required": [
                    "teams",
                    "pagination"
                  ],
                  "type": "object",
                  "description": "A paginated list of teams."
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Maximum number of Teams which may be returned.",
            "in": "query",
            "schema": {
              "description": "Maximum number of Teams which may be returned.",
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "since",
            "description": "Timestamp (in milliseconds) to only include Teams created since then.",
            "in": "query",
            "schema": {
              "description": "Timestamp (in milliseconds) to only include Teams created since then.",
              "example": 1540095775951,
              "type": "number"
            }
          },
          {
            "name": "until",
            "description": "Timestamp (in milliseconds) to only include Teams created until then.",
            "in": "query",
            "schema": {
              "description": "Timestamp (in milliseconds) to only include Teams created until then.",
              "example": 1540095775951,
              "type": "number"
            }
          }
        ]
      }
    },
    "/v1/teams": {
      "post": {
        "description": "Create a new Team under your account. You need to send a POST request with the desired Team slug, and optionally the Team name.",
        "operationId": "createTeam",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create a Team",
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "description": "The team was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Id of the created team",
                      "example": "team_nLlpyC6RE1qxqglFKbrMxlud"
                    },
                    "slug": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "slug"
                  ],
                  "type": "object",
                  "description": "The team was created successfully"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nThe slug is already in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "slug"
                ],
                "properties": {
                  "slug": {
                    "example": "a-random-team",
                    "description": "The desired slug for the Team",
                    "type": "string",
                    "maxLength": 48
                  },
                  "name": {
                    "example": "A Random Team",
                    "description": "The desired name for the Team. It will be generated from the provided slug if nothing is provided",
                    "type": "string",
                    "maxLength": 256
                  },
                  "attribution": {
                    "type": "object",
                    "description": "Attribution information for the session or current page",
                    "properties": {
                      "sessionReferrer": {
                        "type": "string",
                        "description": "Session referrer"
                      },
                      "landingPage": {
                        "type": "string",
                        "description": "Session landing page"
                      },
                      "pageBeforeConversionPage": {
                        "type": "string",
                        "description": "Referrer to the signup page"
                      },
                      "utm": {
                        "type": "object",
                        "properties": {
                          "utmSource": {
                            "type": "string",
                            "description": "UTM source"
                          },
                          "utmMedium": {
                            "type": "string",
                            "description": "UTM medium"
                          },
                          "utmCampaign": {
                            "type": "string",
                            "description": "UTM campaign"
                          },
                          "utmTerm": {
                            "type": "string",
                            "description": "UTM term"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/teams/{teamId}": {
      "delete": {
        "description": "Delete a team under your account. You need to send a `DELETE` request with the desired team `id`. An optional array of reasons for deletion may also be sent.",
        "operationId": "deleteTeam",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete a Team",
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "description": "The Team was successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the deleted Team",
                      "example": "team_LLHUOMOoDlqOp8wPE4kFo9pE"
                    },
                    "newDefaultTeamIdError": {
                      "type": "boolean",
                      "description": "Signifies whether the default team update has failed, when newDefaultTeamId is provided in request query.",
                      "example": true
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object",
                  "description": "The Team was successfully deleted"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": ""
          },
          "403": {
            "description": "You do not have permission to access this resource.\nThe authenticated user can't access the team"
          },
          "409": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "newDefaultTeamId",
            "description": "Id of the team to be set as the new default team",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Id of the team to be set as the new default team",
              "example": "team_LLHUOMOoDlqOp8wPE4kFo9pE"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "path",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            },
            "required": true
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "reasons": {
                    "type": "array",
                    "description": "Optional array of objects that describe the reason why the team is being deleted.",
                    "items": {
                      "type": "object",
                      "description": "An object describing the reason why the team is being deleted.",
                      "required": [
                        "slug",
                        "description"
                      ],
                      "additionalProperties": false,
                      "properties": {
                        "slug": {
                          "type": "string",
                          "description": "Idenitifier slug of the reason why the team is being deleted."
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the reason why the team is being deleted."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/teams/{teamId}/invites/{inviteId}": {
      "delete": {
        "description": "Delete an active Team invite code.",
        "operationId": "deleteTeamInviteCode",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete a Team invite code",
        "tags": [
          "teams"
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted Team invite code.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the team."
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource.\nInvite managed by directory sync\nNot authorized to access this team."
          },
          "404": {
            "description": "Team invite code not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "inviteId",
            "description": "The Team invite code ID.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The Team invite code ID.",
              "example": "2wn2hudbr4chb1ecywo9dvzo7g9sscs6mzcz8htdde0txyom4l"
            }
          },
          {
            "name": "teamId",
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of.",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          }
        ]
      }
    },
    "/v2/files": {
      "post": {
        "description": "Before you create a deployment you need to upload the required files for that deployment. To do it, you need to first upload each file to this endpoint. Once that's completed, you can create a new deployment with the uploaded files. The file content must be placed inside the body of the request. In the case of a successful response you'll receive a status code 200 with an empty body.",
        "operationId": "uploadFile",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Upload Deployment Files",
        "tags": [
          "deployments"
        ],
        "responses": {
          "200": {
            "description": "File already uploaded\nFile successfully uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "urls": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "description": "Array of URLs where the file was updated",
                          "example": [
                            "example-upload.aws.com"
                          ]
                        }
                      },
                      "required": [
                        "urls"
                      ],
                      "type": "object"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the headers is invalid\nDigest is not valid\nFile size is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "in": "header",
            "description": "The file size in bytes",
            "schema": {
              "description": "The file size in bytes",
              "type": "number"
            },
            "name": "Content-Length"
          },
          {
            "in": "header",
            "description": "The file SHA1 used to check the integrity",
            "schema": {
              "type": "string",
              "description": "The file SHA1 used to check the integrity",
              "maxLength": 40
            },
            "name": "x-vercel-digest"
          },
          {
            "in": "header",
            "description": "The file SHA1 used to check the integrity",
            "schema": {
              "deprecated": true,
              "type": "string",
              "description": "The file SHA1 used to check the integrity",
              "maxLength": 40
            },
            "name": "x-now-digest"
          },
          {
            "in": "header",
            "description": "The file size as an alternative to `Content-Length`",
            "schema": {
              "type": "number",
              "deprecated": true,
              "description": "The file size as an alternative to `Content-Length`"
            },
            "name": "x-now-size"
          },
          {
            "in": "header",
            "description": "Shared secret token set by v0 deployments. When present and valid, the API applies an extended rate limit.",
            "schema": {
              "type": "string",
              "description": "Shared secret token set by v0 deployments. When present and valid, the API applies an extended rate limit."
            },
            "name": "x-internal-v0-token"
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    },
    "/v5/user/tokens": {
      "get": {
        "description": "Retrieve a list of the current User's authentication tokens.",
        "operationId": "listAuthTokens",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List Auth Tokens",
        "tags": [
          "authentication"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tokens": {
                      "items": {
                        "$ref": "#/components/schemas/AuthToken"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "required": [
                    "tokens",
                    "pagination"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": []
      }
    },
    "/v3/user/tokens": {
      "post": {
        "description": "Creates and returns a new authentication token for the currently authenticated User. The `bearerToken` property is only provided once, in the response body, so be sure to save it on the client for use with API requests.",
        "operationId": "createAuthToken",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Create an Auth Token",
        "tags": [
          "authentication"
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "$ref": "#/components/schemas/AuthToken"
                    },
                    "bearerToken": {
                      "type": "string",
                      "description": "The authentication token's actual value. This token is only provided in this response, and can never be retrieved again in the future. Be sure to save it somewhere safe!",
                      "example": "uRKJSTt0L4RaSkiMj41QTkxM"
                    }
                  },
                  "required": [
                    "token",
                    "bearerToken"
                  ],
                  "type": "object",
                  "description": "Successful response."
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "expiresAt": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v5/user/tokens/{tokenId}": {
      "get": {
        "description": "Retrieve metadata about an authentication token belonging to the currently authenticated User.",
        "operationId": "getAuthToken",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Auth Token Metadata",
        "tags": [
          "authentication"
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "$ref": "#/components/schemas/AuthToken"
                    }
                  },
                  "required": [
                    "token"
                  ],
                  "type": "object",
                  "description": "Successful response."
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "Token not found with the requested `tokenId`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "tokenId",
            "description": "The identifier of the token to retrieve. The special value \\\"current\\\" may be supplied, which returns the metadata for the token that the current HTTP request is authenticated with.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the token to retrieve. The special value \\\"current\\\" may be supplied, which returns the metadata for the token that the current HTTP request is authenticated with.",
              "example": "5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391"
            }
          }
        ]
      }
    },
    "/v3/user/tokens/{tokenId}": {
      "delete": {
        "description": "Invalidate an authentication token, such that it will no longer be valid for future HTTP requests.",
        "operationId": "deleteAuthToken",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete an authentication token",
        "tags": [
          "authentication"
        ],
        "responses": {
          "200": {
            "description": "Authentication token successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tokenId": {
                      "type": "string",
                      "description": "The unique identifier of the token that was deleted.",
                      "example": "5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391"
                    }
                  },
                  "required": [
                    "tokenId"
                  ],
                  "type": "object",
                  "description": "Authentication token successfully deleted."
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "Token not found with the requested `tokenId`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "tokenId",
            "description": "The identifier of the token to invalidate. The special value \\\"current\\\" may be supplied, which invalidates the token that the HTTP request was authenticated with.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier of the token to invalidate. The special value \\\"current\\\" may be supplied, which invalidates the token that the HTTP request was authenticated with.",
              "example": "5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391"
            }
          }
        ]
      }
    },
    "/v2/user": {
      "get": {
        "description": "Retrieves information related to the currently authenticated User.",
        "operationId": "getAuthUser",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get the User",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "user": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/AuthUser"
                        },
                        {
                          "$ref": "#/components/schemas/AuthUserLimited"
                        }
                      ]
                    }
                  },
                  "required": [
                    "user"
                  ],
                  "type": "object",
                  "description": "Successful response."
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "409": {
            "description": ""
          }
        },
        "parameters": [],
        "x-speakeasy-test": false
      }
    },
    "/v1/user": {
      "delete": {
        "description": "Initiates the deletion process for the currently authenticated User, by sending a deletion confirmation email. The email contains a link that the user needs to visit in order to proceed with the deletion process.",
        "operationId": "requestDelete",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete User Account",
        "tags": [
          "user"
        ],
        "responses": {
          "202": {
            "description": "Response indicating that the User deletion process has been initiated, and a confirmation email has been sent.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the User who has initiated deletion."
                    },
                    "email": {
                      "type": "string",
                      "description": "Email address of the User who has initiated deletion."
                    },
                    "message": {
                      "type": "string",
                      "description": "User deletion progress status.",
                      "example": "Verification email sent"
                    }
                  },
                  "required": [
                    "id",
                    "email",
                    "message"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": ""
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "reasons": {
                    "type": "array",
                    "description": "Optional array of objects that describe the reason why the User account is being deleted.",
                    "items": {
                      "type": "object",
                      "description": "An object describing the reason why the User account is being deleted.",
                      "required": [
                        "slug",
                        "description"
                      ],
                      "additionalProperties": false,
                      "properties": {
                        "slug": {
                          "type": "string",
                          "description": "Idenitifier slug of the reason why the User account is being deleted."
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the reason why the User account is being deleted."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/webhooks": {
      "post": {
        "description": "Creates a webhook",
        "operationId": "createWebhook",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Creates a webhook",
        "tags": [
          "webhooks"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "secret": {
                      "type": "string",
                      "description": "The webhook secret used to sign the payload"
                    },
                    "events": {
                      "items": {
                        "type": "string",
                        "enum": [
                          "budget.reached",
                          "budget.reset",
                          "domain.created",
                          "domain.dns.records.changed",
                          "domain.transfer-in.started",
                          "domain.transfer-in.completed",
                          "domain.transfer-in.failed",
                          "domain.certificate.add",
                          "domain.certificate.add.failed",
                          "domain.certificate.renew",
                          "domain.certificate.renew.failed",
                          "domain.certificate.deleted",
                          "domain.renewal",
                          "domain.renewal.failed",
                          "domain.auto-renew.changed",
                          "deployment.created",
                          "deployment.cleanup",
                          "deployment.error",
                          "deployment.canceled",
                          "deployment.succeeded",
                          "deployment.ready",
                          "deployment.check-rerequested",
                          "deployment.promoted",
                          "deployment.integration.action.start",
                          "deployment.integration.action.cancel",
                          "deployment.integration.action.cleanup",
                          "deployment.checkrun.start",
                          "deployment.checkrun.cancel",
                          "edge-config.created",
                          "edge-config.deleted",
                          "edge-config.items.updated",
                          "firewall.attack",
                          "integration-configuration.permission-upgraded",
                          "integration-configuration.removed",
                          "integration-configuration.scope-change-confirmed",
                          "integration-resource.project-connected",
                          "integration-resource.project-disconnected",
                          "project.created",
                          "project.removed",
                          "project.domain.created",
                          "project.domain.updated",
                          "project.domain.deleted",
                          "project.domain.verified",
                          "project.domain.unverified",
                          "project.domain.moved",
                          "project.rolling-release.started",
                          "project.rolling-release.aborted",
                          "project.rolling-release.completed",
                          "project.rolling-release.approved",
                          "deployment.checks.failed",
                          "deployment.checks.succeeded",
                          "deployment-checks-completed",
                          "deployment-ready",
                          "deployment-prepared",
                          "deployment-error",
                          "deployment-check-rerequested",
                          "deployment-canceled",
                          "project-created",
                          "project-removed",
                          "domain-created",
                          "deployment",
                          "integration-configuration-permission-updated",
                          "integration-configuration-removed",
                          "integration-configuration-scope-change-confirmed",
                          "marketplace.member.changed",
                          "marketplace.invoice.created",
                          "marketplace.invoice.paid",
                          "marketplace.invoice.notpaid",
                          "marketplace.invoice.refunded",
                          "observability.anomaly",
                          "observability.anomaly-error",
                          "test-webhook"
                        ],
                        "description": "The webhooks events",
                        "example": "deployment.created",
                        "x-speakeasy-enums": {
                          "budget.reached": "BudgetReached",
                          "budget.reset": "BudgetReset",
                          "domain.created": "DomainCreated",
                          "domain.dns.records.changed": "DomainDnsRecordsChanged",
                          "domain.transfer-in.started": "DomainTransferInStarted",
                          "domain.transfer-in.completed": "DomainTransferInCompleted",
                          "domain.transfer-in.failed": "DomainTransferInFailed",
                          "domain.certificate.add": "DomainCertificateAdd",
                          "domain.certificate.add.failed": "DomainCertificateAddFailed",
                          "domain.certificate.renew": "DomainCertificateRenew",
                          "domain.certificate.renew.failed": "DomainCertificateRenewFailed",
                          "domain.certificate.deleted": "DomainCertificateDeleted",
                          "domain.renewal": "DomainRenewal",
                          "domain.renewal.failed": "DomainRenewalFailed",
                          "domain.auto-renew.changed": "DomainAutoRenewChanged",
                          "deployment.created": "DeploymentCreated",
                          "deployment.cleanup": "DeploymentCleanup",
                          "deployment.error": "DeploymentError",
                          "deployment.canceled": "DeploymentCanceled",
                          "deployment.succeeded": "DeploymentSucceeded",
                          "deployment.ready": "DeploymentReady",
                          "deployment.check-rerequested": "DeploymentCheckRerequested",
                          "deployment.promoted": "DeploymentPromoted",
                          "deployment.integration.action.start": "DeploymentIntegrationActionStart",
                          "deployment.integration.action.cancel": "DeploymentIntegrationActionCancel",
                          "deployment.integration.action.cleanup": "DeploymentIntegrationActionCleanup",
                          "deployment.checkrun.start": "DeploymentCheckrunStart",
                          "deployment.checkrun.cancel": "DeploymentCheckrunCancel",
                          "edge-config.created": "EdgeConfigCreated",
                          "edge-config.deleted": "EdgeConfigDeleted",
                          "edge-config.items.updated": "EdgeConfigItemsUpdated",
                          "firewall.attack": "FirewallAttack",
                          "integration-configuration.permission-upgraded": "IntegrationConfigurationPermissionUpgraded",
                          "integration-configuration.removed": "IntegrationConfigurationRemoved",
                          "integration-configuration.scope-change-confirmed": "IntegrationConfigurationScopeChangeConfirmed",
                          "integration-resource.project-connected": "IntegrationResourceProjectConnected",
                          "integration-resource.project-disconnected": "IntegrationResourceProjectDisconnected",
                          "project.created": "ProjectCreated",
                          "project.removed": "ProjectRemoved",
                          "project.domain.created": "ProjectDomainCreated",
                          "project.domain.updated": "ProjectDomainUpdated",
                          "project.domain.deleted": "ProjectDomainDeleted",
                          "project.domain.verified": "ProjectDomainVerified",
                          "project.domain.unverified": "ProjectDomainUnverified",
                          "project.domain.moved": "ProjectDomainMoved",
                          "project.rolling-release.started": "ProjectRollingReleaseStarted",
                          "project.rolling-release.aborted": "ProjectRollingReleaseAborted",
                          "project.rolling-release.completed": "ProjectRollingReleaseCompleted",
                          "project.rolling-release.approved": "ProjectRollingReleaseApproved",
                          "deployment.checks.failed": "DeploymentChecksFailed",
                          "deployment.checks.succeeded": "DeploymentChecksSucceeded",
                          "deployment-checks-completed": "DeploymentChecksCompleted",
                          "deployment-ready": "DeploymentReadyHyphen",
                          "deployment-prepared": "DeploymentPreparedHyphen",
                          "deployment-error": "DeploymentErrorHyphen",
                          "deployment-check-rerequested": "DeploymentCheckRerequestedHyphen",
                          "deployment-canceled": "DeploymentCanceledHyphen",
                          "project-created": "ProjectCreatedHyphen",
                          "project-removed": "ProjectRemovedHyphen",
                          "domain-created": "DomainCreatedHyphen",
                          "deployment": "Deployment",
                          "integration-configuration-permission-updated": "IntegrationConfigurationPermissionUpdatedHyphen",
                          "integration-configuration-removed": "IntegrationConfigurationRemovedHyphen",
                          "integration-configuration-scope-change-confirmed": "IntegrationConfigurationScopeChangeConfirmedHyphen",
                          "marketplace.invoice.created": "MarketplaceInvoiceCreated",
                          "marketplace.invoice.paid": "MarketplaceInvoicePaid",
                          "marketplace.invoice.notpaid": "MarketplaceInvoiceNotpaid",
                          "marketplace.invoice.refunded": "MarketplaceInvoiceRefunded",
                          "observability.anomaly": "ObservabilityAnomaly",
                          "observability.anomaly-error": "ObservabilityAnomalyError",
                          "test-webhook": "TestWebhook"
                        }
                      },
                      "type": "array",
                      "description": "The webhooks events",
                      "example": "deployment.created"
                    },
                    "id": {
                      "type": "string",
                      "description": "The webhook id",
                      "example": "account_hook_GflD6EYyo7F4ViYS"
                    },
                    "url": {
                      "type": "string",
                      "description": "A string with the URL of the webhook",
                      "example": "https://my-webhook.com"
                    },
                    "ownerId": {
                      "type": "string",
                      "description": "The unique ID of the team the webhook belongs to",
                      "example": "ZspSRT4ljIEEmMHgoDwKWDei"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "A number containing the date when the webhook was created in in milliseconds",
                      "example": 1567024758130
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "A number containing the date when the webhook was updated in in milliseconds",
                      "example": 1567024758130
                    },
                    "projectIds": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "The ID of the projects the webhook is associated with",
                      "example": [
                        "prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB"
                      ]
                    }
                  },
                  "required": [
                    "secret",
                    "events",
                    "id",
                    "url",
                    "ownerId",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "url",
                  "events"
                ],
                "properties": {
                  "url": {
                    "format": "uri",
                    "pattern": "^https?://",
                    "type": "string"
                  },
                  "events": {
                    "minItems": 1,
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "budget.reached",
                        "budget.reset",
                        "domain.created",
                        "domain.dns.records.changed",
                        "domain.transfer-in.started",
                        "domain.transfer-in.completed",
                        "domain.transfer-in.failed",
                        "domain.certificate.add",
                        "domain.certificate.add.failed",
                        "domain.certificate.renew",
                        "domain.certificate.renew.failed",
                        "domain.certificate.deleted",
                        "domain.renewal",
                        "domain.renewal.failed",
                        "domain.auto-renew.changed",
                        "deployment.created",
                        "deployment.cleanup",
                        "deployment.error",
                        "deployment.canceled",
                        "deployment.succeeded",
                        "deployment.ready",
                        "deployment.check-rerequested",
                        "deployment.promoted",
                        "deployment.integration.action.start",
                        "deployment.integration.action.cancel",
                        "deployment.integration.action.cleanup",
                        "deployment.checkrun.start",
                        "deployment.checkrun.cancel",
                        "edge-config.created",
                        "edge-config.deleted",
                        "edge-config.items.updated",
                        "firewall.attack",
                        "integration-configuration.permission-upgraded",
                        "integration-configuration.removed",
                        "integration-configuration.scope-change-confirmed",
                        "integration-resource.project-connected",
                        "integration-resource.project-disconnected",
                        "project.created",
                        "project.removed",
                        "project.domain.created",
                        "project.domain.updated",
                        "project.domain.deleted",
                        "project.domain.verified",
                        "project.domain.unverified",
                        "project.domain.moved",
                        "project.rolling-release.started",
                        "project.rolling-release.aborted",
                        "project.rolling-release.completed",
                        "project.rolling-release.approved",
                        "deployment.checks.failed",
                        "deployment.checks.succeeded",
                        "deployment-checks-completed",
                        "deployment-ready",
                        "deployment-prepared",
                        "deployment-error",
                        "deployment-check-rerequested",
                        "deployment-canceled",
                        "project-created",
                        "project-removed",
                        "domain-created",
                        "deployment",
                        "integration-configuration-permission-updated",
                        "integration-configuration-removed",
                        "integration-configuration-scope-change-confirmed",
                        "marketplace.member.changed",
                        "marketplace.invoice.created",
                        "marketplace.invoice.paid",
                        "marketplace.invoice.notpaid",
                        "marketplace.invoice.refunded",
                        "observability.anomaly",
                        "observability.anomaly-error",
                        "test-webhook"
                      ],
                      "x-speakeasy-enums": {
                        "budget.reached": "BudgetReached",
                        "budget.reset": "BudgetReset",
                        "domain.created": "DomainCreated",
                        "domain.dns.records.changed": "DomainDnsRecordsChanged",
                        "domain.transfer-in.started": "DomainTransferInStarted",
                        "domain.transfer-in.completed": "DomainTransferInCompleted",
                        "domain.transfer-in.failed": "DomainTransferInFailed",
                        "domain.certificate.add": "DomainCertificateAdd",
                        "domain.certificate.add.failed": "DomainCertificateAddFailed",
                        "domain.certificate.renew": "DomainCertificateRenew",
                        "domain.certificate.renew.failed": "DomainCertificateRenewFailed",
                        "domain.certificate.deleted": "DomainCertificateDeleted",
                        "domain.renewal": "DomainRenewal",
                        "domain.renewal.failed": "DomainRenewalFailed",
                        "domain.auto-renew.changed": "DomainAutoRenewChanged",
                        "deployment.created": "DeploymentCreated",
                        "deployment.cleanup": "DeploymentCleanup",
                        "deployment.error": "DeploymentError",
                        "deployment.canceled": "DeploymentCanceled",
                        "deployment.succeeded": "DeploymentSucceeded",
                        "deployment.ready": "DeploymentReady",
                        "deployment.check-rerequested": "DeploymentCheckRerequested",
                        "deployment.promoted": "DeploymentPromoted",
                        "deployment.integration.action.start": "DeploymentIntegrationActionStart",
                        "deployment.integration.action.cancel": "DeploymentIntegrationActionCancel",
                        "deployment.integration.action.cleanup": "DeploymentIntegrationActionCleanup",
                        "deployment.checkrun.start": "DeploymentCheckrunStart",
                        "deployment.checkrun.cancel": "DeploymentCheckrunCancel",
                        "edge-config.created": "EdgeConfigCreated",
                        "edge-config.deleted": "EdgeConfigDeleted",
                        "edge-config.items.updated": "EdgeConfigItemsUpdated",
                        "firewall.attack": "FirewallAttack",
                        "integration-configuration.permission-upgraded": "IntegrationConfigurationPermissionUpgraded",
                        "integration-configuration.removed": "IntegrationConfigurationRemoved",
                        "integration-configuration.scope-change-confirmed": "IntegrationConfigurationScopeChangeConfirmed",
                        "integration-resource.project-connected": "IntegrationResourceProjectConnected",
                        "integration-resource.project-disconnected": "IntegrationResourceProjectDisconnected",
                        "project.created": "ProjectCreated",
                        "project.removed": "ProjectRemoved",
                        "project.domain.created": "ProjectDomainCreated",
                        "project.domain.updated": "ProjectDomainUpdated",
                        "project.domain.deleted": "ProjectDomainDeleted",
                        "project.domain.verified": "ProjectDomainVerified",
                        "project.domain.unverified": "ProjectDomainUnverified",
                        "project.domain.moved": "ProjectDomainMoved",
                        "project.rolling-release.started": "ProjectRollingReleaseStarted",
                        "project.rolling-release.aborted": "ProjectRollingReleaseAborted",
                        "project.rolling-release.completed": "ProjectRollingReleaseCompleted",
                        "project.rolling-release.approved": "ProjectRollingReleaseApproved",
                        "deployment.checks.failed": "DeploymentChecksFailed",
                        "deployment.checks.succeeded": "DeploymentChecksSucceeded",
                        "deployment-checks-completed": "DeploymentChecksCompleted",
                        "deployment-ready": "DeploymentReadyHyphen",
                        "deployment-prepared": "DeploymentPreparedHyphen",
                        "deployment-error": "DeploymentErrorHyphen",
                        "deployment-check-rerequested": "DeploymentCheckRerequestedHyphen",
                        "deployment-canceled": "DeploymentCanceledHyphen",
                        "project-created": "ProjectCreatedHyphen",
                        "project-removed": "ProjectRemovedHyphen",
                        "domain-created": "DomainCreatedHyphen",
                        "deployment": "Deployment",
                        "integration-configuration-permission-updated": "IntegrationConfigurationPermissionUpdatedHyphen",
                        "integration-configuration-removed": "IntegrationConfigurationRemovedHyphen",
                        "integration-configuration-scope-change-confirmed": "IntegrationConfigurationScopeChangeConfirmedHyphen",
                        "marketplace.invoice.created": "MarketplaceInvoiceCreated",
                        "marketplace.invoice.paid": "MarketplaceInvoicePaid",
                        "marketplace.invoice.notpaid": "MarketplaceInvoiceNotpaid",
                        "marketplace.invoice.refunded": "MarketplaceInvoiceRefunded",
                        "observability.anomaly": "ObservabilityAnomaly",
                        "observability.anomaly-error": "ObservabilityAnomalyError",
                        "test-webhook": "TestWebhook"
                      }
                    }
                  },
                  "projectIds": {
                    "minItems": 1,
                    "maxItems": 50,
                    "type": "array",
                    "items": {
                      "pattern": "^[a-zA-z0-9_]+$",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        }
      },
      "get": {
        "description": "Get a list of webhooks",
        "operationId": "getWebhooks",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get a list of webhooks",
        "tags": [
          "webhooks"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "properties": {
                          "projectsMetadata": {
                            "nullable": true,
                            "items": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "framework": {
                                  "nullable": true,
                                  "type": "string",
                                  "enum": [
                                    "blitzjs",
                                    "nextjs",
                                    "gatsby",
                                    "remix",
                                    "react-router",
                                    "astro",
                                    "hexo",
                                    "eleventy",
                                    "docusaurus-2",
                                    "docusaurus",
                                    "preact",
                                    "solidstart-1",
                                    "solidstart",
                                    "dojo",
                                    "ember",
                                    "vue",
                                    "scully",
                                    "ionic-angular",
                                    "angular",
                                    "polymer",
                                    "svelte",
                                    "sveltekit",
                                    "sveltekit-1",
                                    "ionic-react",
                                    "create-react-app",
                                    "gridsome",
                                    "umijs",
                                    "sapper",
                                    "saber",
                                    "stencil",
                                    "nuxtjs",
                                    "redwoodjs",
                                    "hugo",
                                    "jekyll",
                                    "brunch",
                                    "middleman",
                                    "zola",
                                    "hydrogen",
                                    "vite",
                                    "vitepress",
                                    "vuepress",
                                    "parcel",
                                    "fastapi",
                                    "fasthtml",
                                    "sanity-v3",
                                    "sanity",
                                    "storybook",
                                    "nitro",
                                    "hono",
                                    "express",
                                    "xmcp"
                                  ]
                                },
                                "latestDeployment": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "name"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "events": {
                            "items": {
                              "type": "string",
                              "enum": [
                                "budget.reached",
                                "budget.reset",
                                "domain.created",
                                "domain.dns.records.changed",
                                "domain.transfer-in.started",
                                "domain.transfer-in.completed",
                                "domain.transfer-in.failed",
                                "domain.certificate.add",
                                "domain.certificate.add.failed",
                                "domain.certificate.renew",
                                "domain.certificate.renew.failed",
                                "domain.certificate.deleted",
                                "domain.renewal",
                                "domain.renewal.failed",
                                "domain.auto-renew.changed",
                                "deployment.created",
                                "deployment.cleanup",
                                "deployment.error",
                                "deployment.canceled",
                                "deployment.succeeded",
                                "deployment.ready",
                                "deployment.check-rerequested",
                                "deployment.promoted",
                                "deployment.integration.action.start",
                                "deployment.integration.action.cancel",
                                "deployment.integration.action.cleanup",
                                "deployment.checkrun.start",
                                "deployment.checkrun.cancel",
                                "edge-config.created",
                                "edge-config.deleted",
                                "edge-config.items.updated",
                                "firewall.attack",
                                "integration-configuration.permission-upgraded",
                                "integration-configuration.removed",
                                "integration-configuration.scope-change-confirmed",
                                "integration-resource.project-connected",
                                "integration-resource.project-disconnected",
                                "project.created",
                                "project.removed",
                                "project.domain.created",
                                "project.domain.updated",
                                "project.domain.deleted",
                                "project.domain.verified",
                                "project.domain.unverified",
                                "project.domain.moved",
                                "project.rolling-release.started",
                                "project.rolling-release.aborted",
                                "project.rolling-release.completed",
                                "project.rolling-release.approved",
                                "deployment.checks.failed",
                                "deployment.checks.succeeded",
                                "deployment-checks-completed",
                                "deployment-ready",
                                "deployment-prepared",
                                "deployment-error",
                                "deployment-check-rerequested",
                                "deployment-canceled",
                                "project-created",
                                "project-removed",
                                "domain-created",
                                "deployment",
                                "integration-configuration-permission-updated",
                                "integration-configuration-removed",
                                "integration-configuration-scope-change-confirmed",
                                "marketplace.member.changed",
                                "marketplace.invoice.created",
                                "marketplace.invoice.paid",
                                "marketplace.invoice.notpaid",
                                "marketplace.invoice.refunded",
                                "observability.anomaly",
                                "observability.anomaly-error",
                                "test-webhook"
                              ],
                              "description": "The webhooks events",
                              "example": "deployment.created",
                              "x-speakeasy-enums": {
                                "budget.reached": "BudgetReached",
                                "budget.reset": "BudgetReset",
                                "domain.created": "DomainCreated",
                                "domain.dns.records.changed": "DomainDnsRecordsChanged",
                                "domain.transfer-in.started": "DomainTransferInStarted",
                                "domain.transfer-in.completed": "DomainTransferInCompleted",
                                "domain.transfer-in.failed": "DomainTransferInFailed",
                                "domain.certificate.add": "DomainCertificateAdd",
                                "domain.certificate.add.failed": "DomainCertificateAddFailed",
                                "domain.certificate.renew": "DomainCertificateRenew",
                                "domain.certificate.renew.failed": "DomainCertificateRenewFailed",
                                "domain.certificate.deleted": "DomainCertificateDeleted",
                                "domain.renewal": "DomainRenewal",
                                "domain.renewal.failed": "DomainRenewalFailed",
                                "domain.auto-renew.changed": "DomainAutoRenewChanged",
                                "deployment.created": "DeploymentCreated",
                                "deployment.cleanup": "DeploymentCleanup",
                                "deployment.error": "DeploymentError",
                                "deployment.canceled": "DeploymentCanceled",
                                "deployment.succeeded": "DeploymentSucceeded",
                                "deployment.ready": "DeploymentReady",
                                "deployment.check-rerequested": "DeploymentCheckRerequested",
                                "deployment.promoted": "DeploymentPromoted",
                                "deployment.integration.action.start": "DeploymentIntegrationActionStart",
                                "deployment.integration.action.cancel": "DeploymentIntegrationActionCancel",
                                "deployment.integration.action.cleanup": "DeploymentIntegrationActionCleanup",
                                "deployment.checkrun.start": "DeploymentCheckrunStart",
                                "deployment.checkrun.cancel": "DeploymentCheckrunCancel",
                                "edge-config.created": "EdgeConfigCreated",
                                "edge-config.deleted": "EdgeConfigDeleted",
                                "edge-config.items.updated": "EdgeConfigItemsUpdated",
                                "firewall.attack": "FirewallAttack",
                                "integration-configuration.permission-upgraded": "IntegrationConfigurationPermissionUpgraded",
                                "integration-configuration.removed": "IntegrationConfigurationRemoved",
                                "integration-configuration.scope-change-confirmed": "IntegrationConfigurationScopeChangeConfirmed",
                                "integration-resource.project-connected": "IntegrationResourceProjectConnected",
                                "integration-resource.project-disconnected": "IntegrationResourceProjectDisconnected",
                                "project.created": "ProjectCreated",
                                "project.removed": "ProjectRemoved",
                                "project.domain.created": "ProjectDomainCreated",
                                "project.domain.updated": "ProjectDomainUpdated",
                                "project.domain.deleted": "ProjectDomainDeleted",
                                "project.domain.verified": "ProjectDomainVerified",
                                "project.domain.unverified": "ProjectDomainUnverified",
                                "project.domain.moved": "ProjectDomainMoved",
                                "project.rolling-release.started": "ProjectRollingReleaseStarted",
                                "project.rolling-release.aborted": "ProjectRollingReleaseAborted",
                                "project.rolling-release.completed": "ProjectRollingReleaseCompleted",
                                "project.rolling-release.approved": "ProjectRollingReleaseApproved",
                                "deployment.checks.failed": "DeploymentChecksFailed",
                                "deployment.checks.succeeded": "DeploymentChecksSucceeded",
                                "deployment-checks-completed": "DeploymentChecksCompleted",
                                "deployment-ready": "DeploymentReadyHyphen",
                                "deployment-prepared": "DeploymentPreparedHyphen",
                                "deployment-error": "DeploymentErrorHyphen",
                                "deployment-check-rerequested": "DeploymentCheckRerequestedHyphen",
                                "deployment-canceled": "DeploymentCanceledHyphen",
                                "project-created": "ProjectCreatedHyphen",
                                "project-removed": "ProjectRemovedHyphen",
                                "domain-created": "DomainCreatedHyphen",
                                "deployment": "Deployment",
                                "integration-configuration-permission-updated": "IntegrationConfigurationPermissionUpdatedHyphen",
                                "integration-configuration-removed": "IntegrationConfigurationRemovedHyphen",
                                "integration-configuration-scope-change-confirmed": "IntegrationConfigurationScopeChangeConfirmedHyphen",
                                "marketplace.invoice.created": "MarketplaceInvoiceCreated",
                                "marketplace.invoice.paid": "MarketplaceInvoicePaid",
                                "marketplace.invoice.notpaid": "MarketplaceInvoiceNotpaid",
                                "marketplace.invoice.refunded": "MarketplaceInvoiceRefunded",
                                "observability.anomaly": "ObservabilityAnomaly",
                                "observability.anomaly-error": "ObservabilityAnomalyError",
                                "test-webhook": "TestWebhook"
                              }
                            },
                            "type": "array",
                            "description": "The webhooks events",
                            "example": "deployment.created"
                          },
                          "id": {
                            "type": "string",
                            "description": "The webhook id",
                            "example": "account_hook_GflD6EYyo7F4ViYS"
                          },
                          "url": {
                            "type": "string",
                            "description": "A string with the URL of the webhook",
                            "example": "https://my-webhook.com"
                          },
                          "ownerId": {
                            "type": "string",
                            "description": "The unique ID of the team the webhook belongs to",
                            "example": "ZspSRT4ljIEEmMHgoDwKWDei"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "A number containing the date when the webhook was created in in milliseconds",
                            "example": 1567024758130
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "A number containing the date when the webhook was updated in in milliseconds",
                            "example": 1567024758130
                          },
                          "projectIds": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "The ID of the projects the webhook is associated with",
                            "example": [
                              "prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB"
                            ]
                          }
                        },
                        "required": [
                          "projectsMetadata",
                          "events",
                          "id",
                          "url",
                          "ownerId",
                          "createdAt",
                          "updatedAt"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    {
                      "items": {
                        "properties": {
                          "events": {
                            "items": {
                              "type": "string",
                              "enum": [
                                "budget.reached",
                                "budget.reset",
                                "domain.created",
                                "domain.dns.records.changed",
                                "domain.transfer-in.started",
                                "domain.transfer-in.completed",
                                "domain.transfer-in.failed",
                                "domain.certificate.add",
                                "domain.certificate.add.failed",
                                "domain.certificate.renew",
                                "domain.certificate.renew.failed",
                                "domain.certificate.deleted",
                                "domain.renewal",
                                "domain.renewal.failed",
                                "domain.auto-renew.changed",
                                "deployment.created",
                                "deployment.cleanup",
                                "deployment.error",
                                "deployment.canceled",
                                "deployment.succeeded",
                                "deployment.ready",
                                "deployment.check-rerequested",
                                "deployment.promoted",
                                "deployment.integration.action.start",
                                "deployment.integration.action.cancel",
                                "deployment.integration.action.cleanup",
                                "deployment.checkrun.start",
                                "deployment.checkrun.cancel",
                                "edge-config.created",
                                "edge-config.deleted",
                                "edge-config.items.updated",
                                "firewall.attack",
                                "integration-configuration.permission-upgraded",
                                "integration-configuration.removed",
                                "integration-configuration.scope-change-confirmed",
                                "integration-resource.project-connected",
                                "integration-resource.project-disconnected",
                                "project.created",
                                "project.removed",
                                "project.domain.created",
                                "project.domain.updated",
                                "project.domain.deleted",
                                "project.domain.verified",
                                "project.domain.unverified",
                                "project.domain.moved",
                                "project.rolling-release.started",
                                "project.rolling-release.aborted",
                                "project.rolling-release.completed",
                                "project.rolling-release.approved",
                                "deployment.checks.failed",
                                "deployment.checks.succeeded",
                                "deployment-checks-completed",
                                "deployment-ready",
                                "deployment-prepared",
                                "deployment-error",
                                "deployment-check-rerequested",
                                "deployment-canceled",
                                "project-created",
                                "project-removed",
                                "domain-created",
                                "deployment",
                                "integration-configuration-permission-updated",
                                "integration-configuration-removed",
                                "integration-configuration-scope-change-confirmed",
                                "marketplace.member.changed",
                                "marketplace.invoice.created",
                                "marketplace.invoice.paid",
                                "marketplace.invoice.notpaid",
                                "marketplace.invoice.refunded",
                                "observability.anomaly",
                                "observability.anomaly-error",
                                "test-webhook"
                              ],
                              "description": "The webhooks events",
                              "example": "deployment.created",
                              "x-speakeasy-enums": {
                                "budget.reached": "BudgetReached",
                                "budget.reset": "BudgetReset",
                                "domain.created": "DomainCreated",
                                "domain.dns.records.changed": "DomainDnsRecordsChanged",
                                "domain.transfer-in.started": "DomainTransferInStarted",
                                "domain.transfer-in.completed": "DomainTransferInCompleted",
                                "domain.transfer-in.failed": "DomainTransferInFailed",
                                "domain.certificate.add": "DomainCertificateAdd",
                                "domain.certificate.add.failed": "DomainCertificateAddFailed",
                                "domain.certificate.renew": "DomainCertificateRenew",
                                "domain.certificate.renew.failed": "DomainCertificateRenewFailed",
                                "domain.certificate.deleted": "DomainCertificateDeleted",
                                "domain.renewal": "DomainRenewal",
                                "domain.renewal.failed": "DomainRenewalFailed",
                                "domain.auto-renew.changed": "DomainAutoRenewChanged",
                                "deployment.created": "DeploymentCreated",
                                "deployment.cleanup": "DeploymentCleanup",
                                "deployment.error": "DeploymentError",
                                "deployment.canceled": "DeploymentCanceled",
                                "deployment.succeeded": "DeploymentSucceeded",
                                "deployment.ready": "DeploymentReady",
                                "deployment.check-rerequested": "DeploymentCheckRerequested",
                                "deployment.promoted": "DeploymentPromoted",
                                "deployment.integration.action.start": "DeploymentIntegrationActionStart",
                                "deployment.integration.action.cancel": "DeploymentIntegrationActionCancel",
                                "deployment.integration.action.cleanup": "DeploymentIntegrationActionCleanup",
                                "deployment.checkrun.start": "DeploymentCheckrunStart",
                                "deployment.checkrun.cancel": "DeploymentCheckrunCancel",
                                "edge-config.created": "EdgeConfigCreated",
                                "edge-config.deleted": "EdgeConfigDeleted",
                                "edge-config.items.updated": "EdgeConfigItemsUpdated",
                                "firewall.attack": "FirewallAttack",
                                "integration-configuration.permission-upgraded": "IntegrationConfigurationPermissionUpgraded",
                                "integration-configuration.removed": "IntegrationConfigurationRemoved",
                                "integration-configuration.scope-change-confirmed": "IntegrationConfigurationScopeChangeConfirmed",
                                "integration-resource.project-connected": "IntegrationResourceProjectConnected",
                                "integration-resource.project-disconnected": "IntegrationResourceProjectDisconnected",
                                "project.created": "ProjectCreated",
                                "project.removed": "ProjectRemoved",
                                "project.domain.created": "ProjectDomainCreated",
                                "project.domain.updated": "ProjectDomainUpdated",
                                "project.domain.deleted": "ProjectDomainDeleted",
                                "project.domain.verified": "ProjectDomainVerified",
                                "project.domain.unverified": "ProjectDomainUnverified",
                                "project.domain.moved": "ProjectDomainMoved",
                                "project.rolling-release.started": "ProjectRollingReleaseStarted",
                                "project.rolling-release.aborted": "ProjectRollingReleaseAborted",
                                "project.rolling-release.completed": "ProjectRollingReleaseCompleted",
                                "project.rolling-release.approved": "ProjectRollingReleaseApproved",
                                "deployment.checks.failed": "DeploymentChecksFailed",
                                "deployment.checks.succeeded": "DeploymentChecksSucceeded",
                                "deployment-checks-completed": "DeploymentChecksCompleted",
                                "deployment-ready": "DeploymentReadyHyphen",
                                "deployment-prepared": "DeploymentPreparedHyphen",
                                "deployment-error": "DeploymentErrorHyphen",
                                "deployment-check-rerequested": "DeploymentCheckRerequestedHyphen",
                                "deployment-canceled": "DeploymentCanceledHyphen",
                                "project-created": "ProjectCreatedHyphen",
                                "project-removed": "ProjectRemovedHyphen",
                                "domain-created": "DomainCreatedHyphen",
                                "deployment": "Deployment",
                                "integration-configuration-permission-updated": "IntegrationConfigurationPermissionUpdatedHyphen",
                                "integration-configuration-removed": "IntegrationConfigurationRemovedHyphen",
                                "integration-configuration-scope-change-confirmed": "IntegrationConfigurationScopeChangeConfirmedHyphen",
                                "marketplace.invoice.created": "MarketplaceInvoiceCreated",
                                "marketplace.invoice.paid": "MarketplaceInvoicePaid",
                                "marketplace.invoice.notpaid": "MarketplaceInvoiceNotpaid",
                                "marketplace.invoice.refunded": "MarketplaceInvoiceRefunded",
                                "observability.anomaly": "ObservabilityAnomaly",
                                "observability.anomaly-error": "ObservabilityAnomalyError",
                                "test-webhook": "TestWebhook"
                              }
                            },
                            "type": "array",
                            "description": "The webhooks events",
                            "example": "deployment.created"
                          },
                          "id": {
                            "type": "string",
                            "description": "The webhook id",
                            "example": "account_hook_GflD6EYyo7F4ViYS"
                          },
                          "url": {
                            "type": "string",
                            "description": "A string with the URL of the webhook",
                            "example": "https://my-webhook.com"
                          },
                          "ownerId": {
                            "type": "string",
                            "description": "The unique ID of the team the webhook belongs to",
                            "example": "ZspSRT4ljIEEmMHgoDwKWDei"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "A number containing the date when the webhook was created in in milliseconds",
                            "example": 1567024758130
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "A number containing the date when the webhook was updated in in milliseconds",
                            "example": 1567024758130
                          },
                          "projectIds": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "The ID of the projects the webhook is associated with",
                            "example": [
                              "prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB"
                            ]
                          }
                        },
                        "required": [
                          "events",
                          "id",
                          "url",
                          "ownerId",
                          "createdAt",
                          "updatedAt"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "pattern": "^[a-zA-z0-9_]+$",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v1/webhooks/{id}": {
      "get": {
        "description": "Get a webhook",
        "operationId": "getWebhook",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get a webhook",
        "tags": [
          "webhooks"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "events": {
                      "items": {
                        "type": "string",
                        "enum": [
                          "budget.reached",
                          "budget.reset",
                          "domain.created",
                          "domain.dns.records.changed",
                          "domain.transfer-in.started",
                          "domain.transfer-in.completed",
                          "domain.transfer-in.failed",
                          "domain.certificate.add",
                          "domain.certificate.add.failed",
                          "domain.certificate.renew",
                          "domain.certificate.renew.failed",
                          "domain.certificate.deleted",
                          "domain.renewal",
                          "domain.renewal.failed",
                          "domain.auto-renew.changed",
                          "deployment.created",
                          "deployment.cleanup",
                          "deployment.error",
                          "deployment.canceled",
                          "deployment.succeeded",
                          "deployment.ready",
                          "deployment.check-rerequested",
                          "deployment.promoted",
                          "deployment.integration.action.start",
                          "deployment.integration.action.cancel",
                          "deployment.integration.action.cleanup",
                          "deployment.checkrun.start",
                          "deployment.checkrun.cancel",
                          "edge-config.created",
                          "edge-config.deleted",
                          "edge-config.items.updated",
                          "firewall.attack",
                          "integration-configuration.permission-upgraded",
                          "integration-configuration.removed",
                          "integration-configuration.scope-change-confirmed",
                          "integration-resource.project-connected",
                          "integration-resource.project-disconnected",
                          "project.created",
                          "project.removed",
                          "project.domain.created",
                          "project.domain.updated",
                          "project.domain.deleted",
                          "project.domain.verified",
                          "project.domain.unverified",
                          "project.domain.moved",
                          "project.rolling-release.started",
                          "project.rolling-release.aborted",
                          "project.rolling-release.completed",
                          "project.rolling-release.approved",
                          "deployment.checks.failed",
                          "deployment.checks.succeeded",
                          "deployment-checks-completed",
                          "deployment-ready",
                          "deployment-prepared",
                          "deployment-error",
                          "deployment-check-rerequested",
                          "deployment-canceled",
                          "project-created",
                          "project-removed",
                          "domain-created",
                          "deployment",
                          "integration-configuration-permission-updated",
                          "integration-configuration-removed",
                          "integration-configuration-scope-change-confirmed",
                          "marketplace.member.changed",
                          "marketplace.invoice.created",
                          "marketplace.invoice.paid",
                          "marketplace.invoice.notpaid",
                          "marketplace.invoice.refunded",
                          "observability.anomaly",
                          "observability.anomaly-error",
                          "test-webhook"
                        ],
                        "description": "The webhooks events",
                        "example": "deployment.created",
                        "x-speakeasy-enums": {
                          "budget.reached": "BudgetReached",
                          "budget.reset": "BudgetReset",
                          "domain.created": "DomainCreated",
                          "domain.dns.records.changed": "DomainDnsRecordsChanged",
                          "domain.transfer-in.started": "DomainTransferInStarted",
                          "domain.transfer-in.completed": "DomainTransferInCompleted",
                          "domain.transfer-in.failed": "DomainTransferInFailed",
                          "domain.certificate.add": "DomainCertificateAdd",
                          "domain.certificate.add.failed": "DomainCertificateAddFailed",
                          "domain.certificate.renew": "DomainCertificateRenew",
                          "domain.certificate.renew.failed": "DomainCertificateRenewFailed",
                          "domain.certificate.deleted": "DomainCertificateDeleted",
                          "domain.renewal": "DomainRenewal",
                          "domain.renewal.failed": "DomainRenewalFailed",
                          "domain.auto-renew.changed": "DomainAutoRenewChanged",
                          "deployment.created": "DeploymentCreated",
                          "deployment.cleanup": "DeploymentCleanup",
                          "deployment.error": "DeploymentError",
                          "deployment.canceled": "DeploymentCanceled",
                          "deployment.succeeded": "DeploymentSucceeded",
                          "deployment.ready": "DeploymentReady",
                          "deployment.check-rerequested": "DeploymentCheckRerequested",
                          "deployment.promoted": "DeploymentPromoted",
                          "deployment.integration.action.start": "DeploymentIntegrationActionStart",
                          "deployment.integration.action.cancel": "DeploymentIntegrationActionCancel",
                          "deployment.integration.action.cleanup": "DeploymentIntegrationActionCleanup",
                          "deployment.checkrun.start": "DeploymentCheckrunStart",
                          "deployment.checkrun.cancel": "DeploymentCheckrunCancel",
                          "edge-config.created": "EdgeConfigCreated",
                          "edge-config.deleted": "EdgeConfigDeleted",
                          "edge-config.items.updated": "EdgeConfigItemsUpdated",
                          "firewall.attack": "FirewallAttack",
                          "integration-configuration.permission-upgraded": "IntegrationConfigurationPermissionUpgraded",
                          "integration-configuration.removed": "IntegrationConfigurationRemoved",
                          "integration-configuration.scope-change-confirmed": "IntegrationConfigurationScopeChangeConfirmed",
                          "integration-resource.project-connected": "IntegrationResourceProjectConnected",
                          "integration-resource.project-disconnected": "IntegrationResourceProjectDisconnected",
                          "project.created": "ProjectCreated",
                          "project.removed": "ProjectRemoved",
                          "project.domain.created": "ProjectDomainCreated",
                          "project.domain.updated": "ProjectDomainUpdated",
                          "project.domain.deleted": "ProjectDomainDeleted",
                          "project.domain.verified": "ProjectDomainVerified",
                          "project.domain.unverified": "ProjectDomainUnverified",
                          "project.domain.moved": "ProjectDomainMoved",
                          "project.rolling-release.started": "ProjectRollingReleaseStarted",
                          "project.rolling-release.aborted": "ProjectRollingReleaseAborted",
                          "project.rolling-release.completed": "ProjectRollingReleaseCompleted",
                          "project.rolling-release.approved": "ProjectRollingReleaseApproved",
                          "deployment.checks.failed": "DeploymentChecksFailed",
                          "deployment.checks.succeeded": "DeploymentChecksSucceeded",
                          "deployment-checks-completed": "DeploymentChecksCompleted",
                          "deployment-ready": "DeploymentReadyHyphen",
                          "deployment-prepared": "DeploymentPreparedHyphen",
                          "deployment-error": "DeploymentErrorHyphen",
                          "deployment-check-rerequested": "DeploymentCheckRerequestedHyphen",
                          "deployment-canceled": "DeploymentCanceledHyphen",
                          "project-created": "ProjectCreatedHyphen",
                          "project-removed": "ProjectRemovedHyphen",
                          "domain-created": "DomainCreatedHyphen",
                          "deployment": "Deployment",
                          "integration-configuration-permission-updated": "IntegrationConfigurationPermissionUpdatedHyphen",
                          "integration-configuration-removed": "IntegrationConfigurationRemovedHyphen",
                          "integration-configuration-scope-change-confirmed": "IntegrationConfigurationScopeChangeConfirmedHyphen",
                          "marketplace.invoice.created": "MarketplaceInvoiceCreated",
                          "marketplace.invoice.paid": "MarketplaceInvoicePaid",
                          "marketplace.invoice.notpaid": "MarketplaceInvoiceNotpaid",
                          "marketplace.invoice.refunded": "MarketplaceInvoiceRefunded",
                          "observability.anomaly": "ObservabilityAnomaly",
                          "observability.anomaly-error": "ObservabilityAnomalyError",
                          "test-webhook": "TestWebhook"
                        }
                      },
                      "type": "array",
                      "description": "The webhooks events",
                      "example": "deployment.created"
                    },
                    "id": {
                      "type": "string",
                      "description": "The webhook id",
                      "example": "account_hook_GflD6EYyo7F4ViYS"
                    },
                    "url": {
                      "type": "string",
                      "description": "A string with the URL of the webhook",
                      "example": "https://my-webhook.com"
                    },
                    "ownerId": {
                      "type": "string",
                      "description": "The unique ID of the team the webhook belongs to",
                      "example": "ZspSRT4ljIEEmMHgoDwKWDei"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "A number containing the date when the webhook was created in in milliseconds",
                      "example": 1567024758130
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "A number containing the date when the webhook was updated in in milliseconds",
                      "example": 1567024758130
                    },
                    "projectIds": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "description": "The ID of the projects the webhook is associated with",
                      "example": [
                        "prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB"
                      ]
                    }
                  },
                  "required": [
                    "events",
                    "id",
                    "url",
                    "ownerId",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "delete": {
        "description": "Deletes a webhook",
        "operationId": "deleteWebhook",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Deletes a webhook",
        "tags": [
          "webhooks"
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v2/deployments/{id}/aliases": {
      "get": {
        "description": "Retrieves all Aliases for the Deployment with the given ID. The authenticated user or team must own the deployment.",
        "operationId": "listDeploymentAliases",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List Deployment Aliases",
        "tags": [
          "aliases"
        ],
        "responses": {
          "200": {
            "description": "The list of aliases assigned to the deployment",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "aliases": {
                      "items": {
                        "properties": {
                          "uid": {
                            "type": "string",
                            "description": "The unique identifier of the alias",
                            "example": "2WjyKQmM8ZnGcJsPWMrHRHrE"
                          },
                          "alias": {
                            "type": "string",
                            "description": "The alias name, it could be a `.vercel.app` subdomain or a custom domain",
                            "example": "my-alias.vercel.app"
                          },
                          "created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date when the alias was created",
                            "example": "2017-04-26T23:00:34.232Z"
                          },
                          "redirect": {
                            "nullable": true,
                            "type": "string",
                            "description": "Target destination domain for redirect when the alias is a redirect"
                          },
                          "protectionBypass": {
                            "additionalProperties": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "createdAt": {
                                      "type": "number"
                                    },
                                    "createdBy": {
                                      "type": "string"
                                    },
                                    "scope": {
                                      "type": "string",
                                      "enum": [
                                        "shareable-link"
                                      ]
                                    },
                                    "expires": {
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "createdAt",
                                    "createdBy",
                                    "scope"
                                  ],
                                  "type": "object",
                                  "description": "The protection bypass for the alias"
                                },
                                {
                                  "properties": {
                                    "createdAt": {
                                      "type": "number"
                                    },
                                    "lastUpdatedAt": {
                                      "type": "number"
                                    },
                                    "lastUpdatedBy": {
                                      "type": "string"
                                    },
                                    "access": {
                                      "type": "string",
                                      "enum": [
                                        "requested",
                                        "granted"
                                      ]
                                    },
                                    "scope": {
                                      "type": "string",
                                      "enum": [
                                        "user"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "lastUpdatedBy",
                                    "access",
                                    "scope"
                                  ],
                                  "type": "object",
                                  "description": "The protection bypass for the alias"
                                },
                                {
                                  "properties": {
                                    "createdAt": {
                                      "type": "number"
                                    },
                                    "createdBy": {
                                      "type": "string"
                                    },
                                    "scope": {
                                      "type": "string",
                                      "enum": [
                                        "alias-protection-override"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "createdAt",
                                    "createdBy",
                                    "scope"
                                  ],
                                  "type": "object",
                                  "description": "The protection bypass for the alias"
                                },
                                {
                                  "properties": {
                                    "createdAt": {
                                      "type": "number"
                                    },
                                    "lastUpdatedAt": {
                                      "type": "number"
                                    },
                                    "lastUpdatedBy": {
                                      "type": "string"
                                    },
                                    "scope": {
                                      "type": "string",
                                      "enum": [
                                        "email_invite"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "lastUpdatedBy",
                                    "scope"
                                  ],
                                  "type": "object",
                                  "description": "The protection bypass for the alias"
                                }
                              ]
                            },
                            "type": "object",
                            "description": "The protection bypass for the alias"
                          }
                        },
                        "required": [
                          "uid",
                          "alias",
                          "created"
                        ],
                        "type": "object",
                        "description": "A list of the aliases assigned to the deployment"
                      },
                      "type": "array",
                      "description": "A list of the aliases assigned to the deployment"
                    }
                  },
                  "required": [
                    "aliases"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The deployment was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the deployment the aliases should be listed for",
            "in": "path",
            "required": true,
            "schema": {
              "example": "dpl_FjvFJncQHQcZMznrUm9EoB8sFuPa",
              "description": "The ID of the deployment the aliases should be listed for",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "post": {
        "description": "Creates a new alias for the deployment with the given deployment ID. The authenticated user or team must own this deployment. If the desired alias is already assigned to another deployment, then it will be removed from the old deployment and assigned to the new one.",
        "operationId": "assignAlias",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Assign an Alias",
        "tags": [
          "aliases"
        ],
        "responses": {
          "200": {
            "description": "The alias was successfully assigned to the deployment",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "uid": {
                      "type": "string",
                      "description": "The unique identifier of the alias",
                      "example": "2WjyKQmM8ZnGcJsPWMrHRHrE"
                    },
                    "alias": {
                      "type": "string",
                      "description": "The assigned alias name",
                      "example": "my-alias.vercel.app"
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date when the alias was created",
                      "example": "2017-04-26T23:00:34.232Z"
                    },
                    "oldDeploymentId": {
                      "nullable": true,
                      "type": "string",
                      "description": "The unique identifier of the previously aliased deployment, only received when the alias was used before",
                      "example": "dpl_FjvFJncQHQcZMznrUm9EoB8sFuPa"
                    }
                  },
                  "required": [
                    "uid",
                    "alias",
                    "created"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.\nThe cert for the provided alias is not ready\nThe deployment is not READY and can not be aliased\nThe supplied alias is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource.\nIf no .vercel.app alias exists then we fail (nothing to mirror)"
          },
          "404": {
            "description": "The domain used for the alias was not found\nThe deployment was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "The provided alias is already assigned to the given deployment\nThe domain is not allowed to be used"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the deployment the aliases should be listed for",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The ID of the deployment the aliases should be listed for",
              "example": "dpl_FjvFJncQHQcZMznrUm9EoB8sFuPa",
              "oneOf": [
                {
                  "type": "string"
                }
              ]
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "alias": {
                    "description": "The alias we want to assign to the deployment defined in the URL",
                    "example": "my-alias.vercel.app",
                    "type": "string"
                  },
                  "redirect": {
                    "description": "The redirect property will take precedence over the deployment id from the URL and consists of a hostname (like test.com) to which the alias should redirect using status code 307",
                    "example": null,
                    "type": "string",
                    "nullable": true
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v4/aliases": {
      "get": {
        "description": "Retrieves a list of aliases for the authenticated User or Team. When `domain` is provided, only aliases for that domain will be returned. When `projectId` is provided, it will only return the given project aliases.",
        "operationId": "listAliases",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List aliases",
        "tags": [
          "aliases"
        ],
        "responses": {
          "200": {
            "description": "The paginated list of aliases",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "aliases": {
                      "items": {
                        "properties": {
                          "alias": {
                            "type": "string",
                            "description": "The alias name, it could be a `.vercel.app` subdomain or a custom domain",
                            "example": "my-alias.vercel.app"
                          },
                          "created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date when the alias was created",
                            "example": "2017-04-26T23:00:34.232Z"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The date when the alias was created in milliseconds since the UNIX epoch",
                            "example": 1540095775941
                          },
                          "creator": {
                            "properties": {
                              "uid": {
                                "type": "string",
                                "description": "ID of the user who created the alias",
                                "example": "96SnxkFiMyVKsK3pnoHfx3Hz"
                              },
                              "email": {
                                "type": "string",
                                "description": "Email of the user who created the alias",
                                "example": "john-doe@gmail.com"
                              },
                              "username": {
                                "type": "string",
                                "description": "Username of the user who created the alias",
                                "example": "john-doe"
                              }
                            },
                            "required": [
                              "uid",
                              "email",
                              "username"
                            ],
                            "type": "object",
                            "description": "Information of the user who created the alias"
                          },
                          "deletedAt": {
                            "type": "number",
                            "description": "The date when the alias was deleted in milliseconds since the UNIX epoch",
                            "example": 1540095775941,
                            "nullable": true
                          },
                          "deployment": {
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The deployment unique identifier",
                                "example": "dpl_5m8CQaRBm3FnWRW1od3wKTpaECPx"
                              },
                              "url": {
                                "type": "string",
                                "description": "The deployment unique URL",
                                "example": "my-instant-deployment-3ij3cxz9qr.now.sh"
                              },
                              "meta": {
                                "type": "string",
                                "description": "The deployment metadata",
                                "example": {}
                              }
                            },
                            "required": [
                              "id",
                              "url"
                            ],
                            "type": "object",
                            "description": "A map with the deployment ID, URL and metadata"
                          },
                          "deploymentId": {
                            "nullable": true,
                            "type": "string",
                            "description": "The deployment ID",
                            "example": "dpl_5m8CQaRBm3FnWRW1od3wKTpaECPx"
                          },
                          "projectId": {
                            "nullable": true,
                            "type": "string",
                            "description": "The unique identifier of the project",
                            "example": "prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB"
                          },
                          "redirect": {
                            "nullable": true,
                            "type": "string",
                            "description": "Target destination domain for redirect when the alias is a redirect"
                          },
                          "redirectStatusCode": {
                            "nullable": true,
                            "type": "number",
                            "enum": [
                              301,
                              302,
                              307,
                              308
                            ],
                            "description": "Status code to be used on redirect"
                          },
                          "uid": {
                            "type": "string",
                            "description": "The unique identifier of the alias"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The date when the alias was updated in milliseconds since the UNIX epoch",
                            "example": 1540095775941
                          },
                          "protectionBypass": {
                            "additionalProperties": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "createdAt": {
                                      "type": "number"
                                    },
                                    "createdBy": {
                                      "type": "string"
                                    },
                                    "scope": {
                                      "type": "string",
                                      "enum": [
                                        "shareable-link"
                                      ]
                                    },
                                    "expires": {
                                      "type": "number"
                                    }
                                  },
                                  "required": [
                                    "createdAt",
                                    "createdBy",
                                    "scope"
                                  ],
                                  "type": "object",
                                  "description": "The protection bypass for the alias"
                                },
                                {
                                  "properties": {
                                    "createdAt": {
                                      "type": "number"
                                    },
                                    "lastUpdatedAt": {
                                      "type": "number"
                                    },
                                    "lastUpdatedBy": {
                                      "type": "string"
                                    },
                                    "access": {
                                      "type": "string",
                                      "enum": [
                                        "requested",
                                        "granted"
                                      ]
                                    },
                                    "scope": {
                                      "type": "string",
                                      "enum": [
                                        "user"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "lastUpdatedBy",
                                    "access",
                                    "scope"
                                  ],
                                  "type": "object",
                                  "description": "The protection bypass for the alias"
                                },
                                {
                                  "properties": {
                                    "createdAt": {
                                      "type": "number"
                                    },
                                    "createdBy": {
                                      "type": "string"
                                    },
                                    "scope": {
                                      "type": "string",
                                      "enum": [
                                        "alias-protection-override"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "createdAt",
                                    "createdBy",
                                    "scope"
                                  ],
                                  "type": "object",
                                  "description": "The protection bypass for the alias"
                                },
                                {
                                  "properties": {
                                    "createdAt": {
                                      "type": "number"
                                    },
                                    "lastUpdatedAt": {
                                      "type": "number"
                                    },
                                    "lastUpdatedBy": {
                                      "type": "string"
                                    },
                                    "scope": {
                                      "type": "string",
                                      "enum": [
                                        "email_invite"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "lastUpdatedBy",
                                    "scope"
                                  ],
                                  "type": "object",
                                  "description": "The protection bypass for the alias"
                                }
                              ]
                            },
                            "type": "object",
                            "description": "The protection bypass for the alias"
                          },
                          "microfrontends": {
                            "properties": {
                              "defaultApp": {
                                "properties": {
                                  "projectId": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "projectId"
                                ],
                                "type": "object"
                              },
                              "applications": {
                                "oneOf": [
                                  {
                                    "items": {
                                      "properties": {
                                        "fallbackHost": {
                                          "type": "string",
                                          "description": "This is always set. In production it is used as a pointer to each apps production deployment. For pre-production, it's used as the fallback if there is no deployment for the branch."
                                        },
                                        "projectId": {
                                          "type": "string",
                                          "description": "The project ID of the microfrontends application."
                                        }
                                      },
                                      "required": [
                                        "fallbackHost",
                                        "projectId"
                                      ],
                                      "type": "object",
                                      "description": "A list of the deployment routing information for each project."
                                    },
                                    "type": "array",
                                    "description": "A list of the deployment routing information for each project."
                                  },
                                  {
                                    "items": {
                                      "properties": {
                                        "fallbackHost": {
                                          "type": "string",
                                          "description": "This is always set. For branch aliases, it's used as the fallback if there is no deployment for the branch."
                                        },
                                        "branchAlias": {
                                          "type": "string",
                                          "description": "Could point to a branch without a deployment if the project was never deployed. The proxy will fallback to the fallbackHost if there is no deployment."
                                        },
                                        "projectId": {
                                          "type": "string",
                                          "description": "The project ID of the microfrontends application."
                                        }
                                      },
                                      "required": [
                                        "fallbackHost",
                                        "branchAlias",
                                        "projectId"
                                      ],
                                      "type": "object",
                                      "description": "A list of the deployment routing information for each project."
                                    },
                                    "type": "array",
                                    "description": "A list of the deployment routing information for each project."
                                  },
                                  {
                                    "items": {
                                      "properties": {
                                        "deploymentId": {
                                          "type": "string",
                                          "description": "This is the deployment for the same commit, it could be a cancelled deployment. The proxy will fallback to the branchDeploymentId and then the fallbackDeploymentId."
                                        },
                                        "branchDeploymentId": {
                                          "type": "string",
                                          "description": "This is the latest non-cancelled deployment of the branch alias at the time the commit alias was created. It is possible there is no deployment for the branch, or this was set before the deployment was canceled, in which case this will point to a cancelled deployment, in either case the proxy will fallback to the fallbackDeploymentId."
                                        },
                                        "fallbackDeploymentId": {
                                          "type": "string",
                                          "description": "This is the deployment of the fallback host at the time the commit alias was created. It is possible for this to be a deleted deployment, in which case the proxy will show that the deployment is deleted. It will not use the fallbackHost, as a future deployment on the fallback host could be invalid for this deployment, and it could lead to confusion / incorrect behavior for the commit alias."
                                        },
                                        "fallbackHost": {
                                          "type": "string",
                                          "description": "Temporary for backwards compatibility. Can remove when metadata change is released"
                                        },
                                        "branchAlias": {
                                          "type": "string"
                                        },
                                        "projectId": {
                                          "type": "string",
                                          "description": "The project ID of the microfrontends application."
                                        }
                                      },
                                      "required": [
                                        "projectId"
                                      ],
                                      "type": "object",
                                      "description": "A list of the deployment routing information for each project."
                                    },
                                    "type": "array",
                                    "description": "A list of the deployment routing information for each project."
                                  }
                                ]
                              }
                            },
                            "required": [
                              "defaultApp",
                              "applications"
                            ],
                            "type": "object",
                            "description": "The microfrontends for the alias including the routing configuration"
                          }
                        },
                        "required": [
                          "alias",
                          "created",
                          "deploymentId",
                          "projectId",
                          "uid"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "required": [
                    "aliases",
                    "pagination"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "Get only aliases of the given domain name",
            "in": "query",
            "schema": {
              "description": "Get only aliases of the given domain name",
              "example": "my-test-domain.com",
              "maxItems": 20,
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          {
            "name": "from",
            "description": "Get only aliases created after the provided timestamp",
            "in": "query",
            "schema": {
              "deprecated": true,
              "description": "Get only aliases created after the provided timestamp",
              "example": 1540095775951,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of aliases to list from a request",
            "in": "query",
            "schema": {
              "description": "Maximum number of aliases to list from a request",
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "projectId",
            "description": "Filter aliases from the given `projectId`",
            "in": "query",
            "schema": {
              "description": "Filter aliases from the given `projectId`",
              "example": "prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB",
              "type": "string"
            }
          },
          {
            "name": "since",
            "description": "Get aliases created after this JavaScript timestamp",
            "in": "query",
            "schema": {
              "description": "Get aliases created after this JavaScript timestamp",
              "example": 1540095775941,
              "type": "number"
            }
          },
          {
            "name": "until",
            "description": "Get aliases created before this JavaScript timestamp",
            "in": "query",
            "schema": {
              "description": "Get aliases created before this JavaScript timestamp",
              "example": 1540095775951,
              "type": "number"
            }
          },
          {
            "name": "rollbackDeploymentId",
            "description": "Get aliases that would be rolled back for the given deployment",
            "in": "query",
            "schema": {
              "description": "Get aliases that would be rolled back for the given deployment",
              "example": "dpl_XXX",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v4/aliases/{idOrAlias}": {
      "get": {
        "description": "Retrieves an Alias for the given host name or alias ID.",
        "operationId": "getAlias",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get an Alias",
        "tags": [
          "aliases"
        ],
        "responses": {
          "200": {
            "description": "The alias information",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "alias": {
                        "type": "string",
                        "description": "The alias name, it could be a `.vercel.app` subdomain or a custom domain",
                        "example": "my-alias.vercel.app"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date when the alias was created",
                        "example": "2017-04-26T23:00:34.232Z"
                      },
                      "createdAt": {
                        "type": "number",
                        "description": "The date when the alias was created in milliseconds since the UNIX epoch",
                        "example": 1540095775941
                      },
                      "creator": {
                        "properties": {
                          "uid": {
                            "type": "string",
                            "description": "ID of the user who created the alias",
                            "example": "96SnxkFiMyVKsK3pnoHfx3Hz"
                          },
                          "email": {
                            "type": "string",
                            "description": "Email of the user who created the alias",
                            "example": "john-doe@gmail.com"
                          },
                          "username": {
                            "type": "string",
                            "description": "Username of the user who created the alias",
                            "example": "john-doe"
                          }
                        },
                        "required": [
                          "uid",
                          "email",
                          "username"
                        ],
                        "type": "object",
                        "description": "Information of the user who created the alias"
                      },
                      "deletedAt": {
                        "type": "number",
                        "description": "The date when the alias was deleted in milliseconds since the UNIX epoch",
                        "example": 1540095775941
                      },
                      "deployment": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The deployment unique identifier",
                            "example": "dpl_5m8CQaRBm3FnWRW1od3wKTpaECPx"
                          },
                          "url": {
                            "type": "string",
                            "description": "The deployment unique URL",
                            "example": "my-instant-deployment-3ij3cxz9qr.now.sh"
                          },
                          "meta": {
                            "type": "string",
                            "description": "The deployment metadata",
                            "example": {}
                          }
                        },
                        "required": [
                          "id",
                          "url"
                        ],
                        "type": "object",
                        "description": "A map with the deployment ID, URL and metadata"
                      },
                      "deploymentId": {
                        "nullable": true,
                        "type": "string",
                        "description": "The deployment ID",
                        "example": "dpl_5m8CQaRBm3FnWRW1od3wKTpaECPx"
                      },
                      "projectId": {
                        "nullable": true,
                        "type": "string",
                        "description": "The unique identifier of the project",
                        "example": "prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB"
                      },
                      "redirect": {
                        "nullable": true,
                        "type": "string",
                        "description": "Target destination domain for redirect when the alias is a redirect"
                      },
                      "redirectStatusCode": {
                        "nullable": true,
                        "type": "number",
                        "enum": [
                          301,
                          302,
                          307,
                          308
                        ],
                        "description": "Status code to be used on redirect"
                      },
                      "uid": {
                        "type": "string",
                        "description": "The unique identifier of the alias"
                      },
                      "updatedAt": {
                        "type": "number",
                        "description": "The date when the alias was updated in milliseconds since the UNIX epoch",
                        "example": 1540095775941
                      },
                      "protectionBypass": {
                        "additionalProperties": {
                          "oneOf": [
                            {
                              "properties": {
                                "createdAt": {
                                  "type": "number"
                                },
                                "createdBy": {
                                  "type": "string"
                                },
                                "scope": {
                                  "type": "string",
                                  "enum": [
                                    "shareable-link"
                                  ]
                                },
                                "expires": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "createdAt",
                                "createdBy",
                                "scope"
                              ],
                              "type": "object",
                              "description": "The protection bypass for the alias"
                            },
                            {
                              "properties": {
                                "createdAt": {
                                  "type": "number"
                                },
                                "lastUpdatedAt": {
                                  "type": "number"
                                },
                                "lastUpdatedBy": {
                                  "type": "string"
                                },
                                "access": {
                                  "type": "string",
                                  "enum": [
                                    "requested",
                                    "granted"
                                  ]
                                },
                                "scope": {
                                  "type": "string",
                                  "enum": [
                                    "user"
                                  ]
                                }
                              },
                              "required": [
                                "createdAt",
                                "lastUpdatedAt",
                                "lastUpdatedBy",
                                "access",
                                "scope"
                              ],
                              "type": "object",
                              "description": "The protection bypass for the alias"
                            },
                            {
                              "properties": {
                                "createdAt": {
                                  "type": "number"
                                },
                                "createdBy": {
                                  "type": "string"
                                },
                                "scope": {
                                  "type": "string",
                                  "enum": [
                                    "alias-protection-override"
                                  ]
                                }
                              },
                              "required": [
                                "createdAt",
                                "createdBy",
                                "scope"
                              ],
                              "type": "object",
                              "description": "The protection bypass for the alias"
                            },
                            {
                              "properties": {
                                "createdAt": {
                                  "type": "number"
                                },
                                "lastUpdatedAt": {
                                  "type": "number"
                                },
                                "lastUpdatedBy": {
                                  "type": "string"
                                },
                                "scope": {
                                  "type": "string",
                                  "enum": [
                                    "email_invite"
                                  ]
                                }
                              },
                              "required": [
                                "createdAt",
                                "lastUpdatedAt",
                                "lastUpdatedBy",
                                "scope"
                              ],
                              "type": "object",
                              "description": "The protection bypass for the alias"
                            }
                          ]
                        },
                        "type": "object",
                        "description": "The protection bypass for the alias"
                      },
                      "microfrontends": {
                        "properties": {
                          "defaultApp": {
                            "properties": {
                              "projectId": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "projectId"
                            ],
                            "type": "object"
                          },
                          "applications": {
                            "oneOf": [
                              {
                                "items": {
                                  "properties": {
                                    "fallbackHost": {
                                      "type": "string",
                                      "description": "This is always set. In production it is used as a pointer to each apps production deployment. For pre-production, it's used as the fallback if there is no deployment for the branch."
                                    },
                                    "projectId": {
                                      "type": "string",
                                      "description": "The project ID of the microfrontends application."
                                    }
                                  },
                                  "required": [
                                    "fallbackHost",
                                    "projectId"
                                  ],
                                  "type": "object",
                                  "description": "A list of the deployment routing information for each project."
                                },
                                "type": "array",
                                "description": "A list of the deployment routing information for each project."
                              },
                              {
                                "items": {
                                  "properties": {
                                    "fallbackHost": {
                                      "type": "string",
                                      "description": "This is always set. For branch aliases, it's used as the fallback if there is no deployment for the branch."
                                    },
                                    "branchAlias": {
                                      "type": "string",
                                      "description": "Could point to a branch without a deployment if the project was never deployed. The proxy will fallback to the fallbackHost if there is no deployment."
                                    },
                                    "projectId": {
                                      "type": "string",
                                      "description": "The project ID of the microfrontends application."
                                    }
                                  },
                                  "required": [
                                    "fallbackHost",
                                    "branchAlias",
                                    "projectId"
                                  ],
                                  "type": "object",
                                  "description": "A list of the deployment routing information for each project."
                                },
                                "type": "array",
                                "description": "A list of the deployment routing information for each project."
                              },
                              {
                                "items": {
                                  "properties": {
                                    "deploymentId": {
                                      "type": "string",
                                      "description": "This is the deployment for the same commit, it could be a cancelled deployment. The proxy will fallback to the branchDeploymentId and then the fallbackDeploymentId."
                                    },
                                    "branchDeploymentId": {
                                      "type": "string",
                                      "description": "This is the latest non-cancelled deployment of the branch alias at the time the commit alias was created. It is possible there is no deployment for the branch, or this was set before the deployment was canceled, in which case this will point to a cancelled deployment, in either case the proxy will fallback to the fallbackDeploymentId."
                                    },
                                    "fallbackDeploymentId": {
                                      "type": "string",
                                      "description": "This is the deployment of the fallback host at the time the commit alias was created. It is possible for this to be a deleted deployment, in which case the proxy will show that the deployment is deleted. It will not use the fallbackHost, as a future deployment on the fallback host could be invalid for this deployment, and it could lead to confusion / incorrect behavior for the commit alias."
                                    },
                                    "fallbackHost": {
                                      "type": "string",
                                      "description": "Temporary for backwards compatibility. Can remove when metadata change is released"
                                    },
                                    "branchAlias": {
                                      "type": "string"
                                    },
                                    "projectId": {
                                      "type": "string",
                                      "description": "The project ID of the microfrontends application."
                                    }
                                  },
                                  "required": [
                                    "projectId"
                                  ],
                                  "type": "object",
                                  "description": "A list of the deployment routing information for each project."
                                },
                                "type": "array",
                                "description": "A list of the deployment routing information for each project."
                              }
                            ]
                          }
                        },
                        "required": [
                          "defaultApp",
                          "applications"
                        ],
                        "type": "object",
                        "description": "The microfrontends for the alias including the routing configuration"
                      }
                    },
                    "required": [
                      "alias",
                      "created",
                      "deploymentId",
                      "projectId",
                      "uid"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The alias was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "from",
            "description": "Get the alias only if it was created after the provided timestamp",
            "in": "query",
            "required": false,
            "schema": {
              "deprecated": true,
              "description": "Get the alias only if it was created after the provided timestamp",
              "example": 1540095775951,
              "type": "number"
            }
          },
          {
            "name": "idOrAlias",
            "description": "The alias or alias ID to be retrieved",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The alias or alias ID to be retrieved",
              "example": "example.vercel.app",
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "description": "Get the alias only if it is assigned to the provided project ID",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Get the alias only if it is assigned to the provided project ID",
              "example": "prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB",
              "type": "string"
            }
          },
          {
            "name": "since",
            "description": "Get the alias only if it was created after this JavaScript timestamp",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Get the alias only if it was created after this JavaScript timestamp",
              "example": 1540095775941,
              "type": "number"
            }
          },
          {
            "name": "until",
            "description": "Get the alias only if it was created before this JavaScript timestamp",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Get the alias only if it was created before this JavaScript timestamp",
              "example": 1540095775951,
              "type": "number"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v2/aliases/{aliasId}": {
      "delete": {
        "description": "Delete an Alias with the specified ID.",
        "operationId": "deleteAlias",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete an Alias",
        "tags": [
          "aliases"
        ],
        "responses": {
          "200": {
            "description": "The alias was successfully removed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "SUCCESS"
                      ]
                    }
                  },
                  "required": [
                    "status"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The alias was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "aliasId",
            "description": "The ID or alias that will be removed",
            "in": "path",
            "required": true,
            "schema": {
              "example": "2WjyKQmM8ZnGcJsPWMrHRHrE",
              "description": "The ID or alias that will be removed",
              "oneOf": [
                {
                  "type": "string"
                }
              ]
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/aliases/{id}/protection-bypass": {
      "patch": {
        "description": "Update the protection bypass for the alias or deployment URL (used for user access \u0026 comment access for deployments). Used as shareable links and user scoped access for Vercel Authentication and also to allow external (logged in) people to comment on previews for Preview Comments (next-live-mode).",
        "operationId": "patchUrlProtectionBypass",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Update the protection bypass for a URL",
        "tags": [
          "aliases"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.\nOne of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": ""
          },
          "428": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The alias or deployment ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The alias or deployment ID"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "ttl": {
                        "description": "Optional time the shareable link is valid for in seconds. If not provided, the shareable link will never expire.",
                        "type": "number",
                        "maximum": 63072000
                      },
                      "revoke": {
                        "description": "Optional instructions for revoking and regenerating a shareable link",
                        "type": "object",
                        "properties": {
                          "secret": {
                            "description": "Sharebale link to revoked",
                            "type": "string"
                          },
                          "regenerate": {
                            "description": "Whether or not a new shareable link should be created after the provided secret is revoked",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "secret",
                          "regenerate"
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "scope": {
                        "description": "Instructions for creating a user scoped protection bypass",
                        "type": "object",
                        "properties": {
                          "userId": {
                            "type": "string",
                            "description": "Specified user id for the scoped bypass."
                          },
                          "email": {
                            "type": "string",
                            "format": "email",
                            "description": "Specified email for the scoped bypass."
                          },
                          "access": {
                            "enum": [
                              "denied",
                              "granted"
                            ],
                            "description": "Invitation status for the user scoped bypass."
                          }
                        },
                        "allOf": [
                          {
                            "anyOf": [
                              {
                                "required": [
                                  "userId"
                                ]
                              },
                              {
                                "required": [
                                  "email"
                                ]
                              }
                            ]
                          },
                          {
                            "required": [
                              "access"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "scope"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "override": {
                        "type": "object",
                        "properties": {
                          "scope": {
                            "enum": [
                              "alias-protection-override"
                            ]
                          },
                          "action": {
                            "enum": [
                              "create",
                              "revoke"
                            ]
                          }
                        },
                        "required": [
                          "scope",
                          "action"
                        ]
                      }
                    },
                    "required": [
                      "override"
                    ],
                    "additionalProperties": false
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/v8/certs/{id}": {
      "get": {
        "description": "Get cert by id",
        "operationId": "getCertById",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get cert by id",
        "tags": [
          "certs"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "expiresAt": {
                      "type": "number"
                    },
                    "autoRenew": {
                      "type": "boolean"
                    },
                    "cns": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "expiresAt",
                    "autoRenew",
                    "cns"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The cert id",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The cert id",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      },
      "delete": {
        "description": "Remove cert",
        "operationId": "removeCert",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Remove cert",
        "tags": [
          "certs"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The cert id to remove",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The cert id to remove",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v8/certs": {
      "post": {
        "description": "Issue a new cert",
        "operationId": "issueCert",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Issue a new cert",
        "tags": [
          "certs"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "expiresAt": {
                      "type": "number"
                    },
                    "autoRenew": {
                      "type": "boolean"
                    },
                    "cns": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "expiresAt",
                    "autoRenew",
                    "cns"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "The account was soft-blocked for an unhandled reason.\nThe account is missing a payment so payment method must be updated"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "449": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cns": {
                    "description": "The common names the cert should be issued for",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Upload a cert",
        "operationId": "uploadCert",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Upload a cert",
        "tags": [
          "certs"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "expiresAt": {
                      "type": "number"
                    },
                    "autoRenew": {
                      "type": "boolean"
                    },
                    "cns": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "expiresAt",
                    "autoRenew",
                    "cns"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "402": {
            "description": "This feature is only available for Enterprise customers."
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "parameters": [
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ca",
                  "key",
                  "cert"
                ],
                "additionalProperties": false,
                "properties": {
                  "ca": {
                    "type": "string",
                    "description": "The certificate authority"
                  },
                  "key": {
                    "type": "string",
                    "description": "The certificate key"
                  },
                  "cert": {
                    "type": "string",
                    "description": "The certificate"
                  },
                  "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of the certificate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v6/deployments/{id}/files": {
      "get": {
        "description": "Allows to retrieve the file structure of the source code of a deployment by supplying the deployment unique identifier. If the deployment was created with the Vercel CLI or the API directly with the `files` key, it will have a file tree that can be retrievable.",
        "operationId": "listDeploymentFiles",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List Deployment Files",
        "tags": [
          "deployments"
        ],
        "responses": {
          "200": {
            "description": "Retrieved the file tree successfully",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FileTree"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "File tree not found\nDeployment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique deployment identifier",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique deployment identifier",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v8/deployments/{id}/files/{fileId}": {
      "get": {
        "description": "Allows to retrieve the content of a file by supplying the file identifier and the deployment unique identifier. The response body will contain a JSON response containing the contents of the file encoded as base64.",
        "operationId": "getDeploymentFileContents",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Get Deployment File Contents",
        "tags": [
          "deployments"
        ],
        "responses": {
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "File not found\nDeployment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "410": {
            "description": "Invalid API version."
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique deployment identifier",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique deployment identifier",
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "description": "The unique file identifier",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The unique file identifier",
              "type": "string"
            }
          },
          {
            "name": "path",
            "description": "Path to the file to fetch (only for Git deployments)",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Path to the file to fetch (only for Git deployments)",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    },
    "/v6/deployments": {
      "get": {
        "description": "List deployments under the authenticated user or team. If a deployment hasn't finished uploading (is incomplete), the `url` property will have a value of `null`.",
        "operationId": "getDeployments",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "List deployments",
        "tags": [
          "deployments"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "deployments": {
                      "items": {
                        "properties": {
                          "uid": {
                            "type": "string",
                            "description": "The unique identifier of the deployment.",
                            "example": "dpl_2euZBFqxYdDMDG1jTrHFnNZ2eUVa"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the deployment.",
                            "example": "docs"
                          },
                          "projectId": {
                            "type": "string",
                            "description": "The project ID of the deployment"
                          },
                          "url": {
                            "type": "string",
                            "description": "The URL of the deployment.",
                            "example": "docs-9jaeg38me.vercel.app"
                          },
                          "created": {
                            "type": "number",
                            "description": "Timestamp of when the deployment got created.",
                            "example": 1609492210000
                          },
                          "defaultRoute": {
                            "type": "string",
                            "description": "The default route that should be used for screenshots and links if configured with microfrontends.",
                            "example": "/docs"
                          },
                          "deleted": {
                            "type": "number",
                            "description": "Timestamp of when the deployment got deleted.",
                            "example": 1609492210000
                          },
                          "undeleted": {
                            "type": "number",
                            "description": "Timestamp of when the deployment was undeleted.",
                            "example": 1609492210000
                          },
                          "softDeletedByRetention": {
                            "type": "boolean",
                            "description": "Optional flag to indicate if the deployment was soft deleted by retention policy.",
                            "example": true
                          },
                          "source": {
                            "type": "string",
                            "enum": [
                              "api-trigger-git-deploy",
                              "cli",
                              "clone/repo",
                              "git",
                              "import",
                              "import/repo",
                              "redeploy",
                              "v0-web"
                            ],
                            "description": "The source of the deployment.",
                            "example": "cli"
                          },
                          "state": {
                            "type": "string",
                            "enum": [
                              "BUILDING",
                              "ERROR",
                              "INITIALIZING",
                              "QUEUED",
                              "READY",
                              "CANCELED",
                              "DELETED"
                            ],
                            "description": "In which state is the deployment.",
                            "example": "READY"
                          },
                          "readyState": {
                            "type": "string",
                            "enum": [
                              "BUILDING",
                              "ERROR",
                              "INITIALIZING",
                              "QUEUED",
                              "READY",
                              "CANCELED",
                              "DELETED"
                            ],
                            "description": "In which state is the deployment.",
                            "example": "READY"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "LAMBDAS"
                            ],
                            "description": "The type of the deployment.",
                            "example": "LAMBDAS"
                          },
                          "creator": {
                            "properties": {
                              "uid": {
                                "type": "string",
                                "description": "The unique identifier of the user.",
                                "example": "eLrCnEgbKhsHyfbiNR7E8496"
                              },
                              "email": {
                                "type": "string",
                                "description": "The email address of the user.",
                                "example": "example@example.com"
                              },
                              "username": {
                                "type": "string",
                                "description": "The username of the user.",
                                "example": "johndoe"
                              },
                              "githubLogin": {
                                "type": "string",
                                "description": "The GitHub login of the user.",
                                "example": "johndoe"
                              },
                              "gitlabLogin": {
                                "type": "string",
                                "description": "The GitLab login of the user.",
                                "example": "johndoe"
                              }
                            },
                            "required": [
                              "uid"
                            ],
                            "type": "object",
                            "description": "Metadata information of the user who created the deployment."
                          },
                          "meta": {
                            "additionalProperties": {
                              "type": "string",
                              "description": "Metadata information from the Git provider."
                            },
                            "type": "object",
                            "description": "Metadata information from the Git provider."
                          },
                          "target": {
                            "nullable": true,
                            "type": "string",
                            "enum": [
                              "production",
                              "staging"
                            ],
                            "description": "On which environment has the deployment been deployed to.",
                            "example": "production"
                          },
                          "aliasError": {
                            "nullable": true,
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "code",
                              "message"
                            ],
                            "type": "object",
                            "description": "An error object in case aliasing of the deployment failed."
                          },
                          "aliasAssigned": {
                            "nullable": true,
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "boolean"
                              }
                            ]
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "Timestamp of when the deployment got created.",
                            "example": 1609492210000
                          },
                          "buildingAt": {
                            "type": "number",
                            "description": "Timestamp of when the deployment started building at.",
                            "example": 1609492210000
                          },
                          "ready": {
                            "type": "number",
                            "description": "Timestamp of when the deployment got ready.",
                            "example": 1609492210000
                          },
                          "readySubstate": {
                            "type": "string",
                            "enum": [
                              "STAGED",
                              "ROLLING",
                              "PROMOTED"
                            ],
                            "description": "Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of gradually transitioning production traffic - PROMOTED: has seen production traffic"
                          },
                          "checksState": {
                            "type": "string",
                            "enum": [
                              "registered",
                              "running",
                              "completed"
                            ],
                            "description": "State of all registered checks"
                          },
                          "checksConclusion": {
                            "type": "string",
                            "enum": [
                              "succeeded",
                              "failed",
                              "skipped",
                              "canceled"
                            ],
                            "description": "Conclusion for checks"
                          },
                          "checks": {
                            "properties": {
                              "deployment-alias": {
                                "properties": {
                                  "state": {
                                    "type": "string",
                                    "enum": [
                                      "succeeded",
                                      "failed",
                                      "pending"
                                    ]
                                  },
                                  "startedAt": {
                                    "type": "number"
                                  },
                                  "completedAt": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "state",
                                  "startedAt"
                                ],
                                "type": "object",
                                "description": "Detailed information about v2 deployment checks. Includes information about blocked workflows in the deployment lifecycle."
                              }
                            },
                            "required": [
                              "deployment-alias"
                            ],
                            "type": "object",
                            "description": "Detailed information about v2 deployment checks. Includes information about blocked workflows in the deployment lifecycle."
                          },
                          "inspectorUrl": {
                            "nullable": true,
                            "type": "string",
                            "description": "Vercel URL to inspect the deployment.",
                            "example": "https://vercel.com/acme/nextjs/J1hXN00qjUeoYfpEEf7dnDtpSiVq"
                          },
                          "errorCode": {
                            "type": "string",
                            "description": "Error code when the deployment is in an error state.",
                            "example": "BUILD_FAILED"
                          },
                          "errorMessage": {
                            "nullable": true,
                            "type": "string",
                            "description": "Error message when the deployment is in an canceled or error state.",
                            "example": "The Deployment has been canceled because this project was not affected"
                          },
                          "oomReport": {
                            "type": "string",
                            "enum": [
                              "out-of-memory"
                            ],
                            "description": "Indicates if the deployment encountered an out-of-memory error.",
                            "example": "out-of-memory"
                          },
                          "isRollbackCandidate": {
                            "nullable": true,
                            "type": "boolean",
                            "description": "Deployment can be used for instant rollback"
                          },
                          "projectSettings": {
                            "properties": {
                              "framework": {
                                "nullable": true,
                                "type": "string",
                                "enum": [
                                  "blitzjs",
                                  "nextjs",
                                  "gatsby",
                                  "remix",
                                  "react-router",
                                  "astro",
                                  "hexo",
                                  "eleventy",
                                  "docusaurus-2",
                                  "docusaurus",
                                  "preact",
                                  "solidstart-1",
                                  "solidstart",
                                  "dojo",
                                  "ember",
                                  "vue",
                                  "scully",
                                  "ionic-angular",
                                  "angular",
                                  "polymer",
                                  "svelte",
                                  "sveltekit",
                                  "sveltekit-1",
                                  "ionic-react",
                                  "create-react-app",
                                  "gridsome",
                                  "umijs",
                                  "sapper",
                                  "saber",
                                  "stencil",
                                  "nuxtjs",
                                  "redwoodjs",
                                  "hugo",
                                  "jekyll",
                                  "brunch",
                                  "middleman",
                                  "zola",
                                  "hydrogen",
                                  "vite",
                                  "vitepress",
                                  "vuepress",
                                  "parcel",
                                  "fastapi",
                                  "fasthtml",
                                  "sanity-v3",
                                  "sanity",
                                  "storybook",
                                  "nitro",
                                  "hono",
                                  "express",
                                  "xmcp"
                                ]
                              },
                              "gitForkProtection": {
                                "type": "boolean"
                              },
                              "customerSupportCodeVisibility": {
                                "type": "boolean"
                              },
                              "gitLFS": {
                                "type": "boolean"
                              },
                              "devCommand": {
                                "nullable": true,
                                "type": "string"
                              },
                              "installCommand": {
                                "nullable": true,
                                "type": "string"
                              },
                              "buildCommand": {
                                "nullable": true,
                                "type": "string"
                              },
                              "nodeVersion": {
                                "type": "string",
                                "enum": [
                                  "22.x",
                                  "20.x",
                                  "18.x",
                                  "16.x",
                                  "14.x",
                                  "12.x",
                                  "10.x",
                                  "8.10.x"
                                ]
                              },
                              "outputDirectory": {
                                "nullable": true,
                                "type": "string"
                              },
                              "publicSource": {
                                "nullable": true,
                                "type": "boolean"
                              },
                              "rootDirectory": {
                                "nullable": true,
                                "type": "string"
                              },
                              "sourceFilesOutsideRootDirectory": {
                                "type": "boolean"
                              },
                              "commandForIgnoringBuildStep": {
                                "nullable": true,
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "number"
                              },
                              "speedInsights": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "enabledAt": {
                                    "type": "number"
                                  },
                                  "disabledAt": {
                                    "type": "number"
                                  },
                                  "canceledAt": {
                                    "type": "number"
                                  },
                                  "hasData": {
                                    "type": "boolean"
                                  },
                                  "paidAt": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              "webAnalytics": {
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "disabledAt": {
                                    "type": "number"
                                  },
                                  "canceledAt": {
                                    "type": "number"
                                  },
                                  "enabledAt": {
                                    "type": "number"
                                  },
                                  "hasData": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              "skipGitConnectDuringLink": {
                                "type": "boolean"
                              },
                              "gitComments": {
                                "properties": {
                                  "onPullRequest": {
                                    "type": "boolean",
                                    "description": "Whether the Vercel bot should comment on PRs"
                                  },
                                  "onCommit": {
                                    "type": "boolean",
                                    "description": "Whether the Vercel bot should comment on commits"
                                  }
                                },
                                "required": [
                                  "onPullRequest",
                                  "onCommit"
                                ],
                                "type": "object",
                                "description": "Since June '23"
                              }
                            },
                            "type": "object",
                            "description": "The project settings which was used for this deployment"
                          },
                          "connectBuildsEnabled": {
                            "type": "boolean",
                            "description": "The flag saying if Secure Compute network is used for builds"
                          },
                          "connectConfigurationId": {
                            "type": "string",
                            "description": "The ID of Secure Compute network used for this deployment"
                          },
                          "passiveConnectConfigurationId": {
                            "type": "string",
                            "description": "The ID of Secure Compute network used for this deployment's passive functions"
                          },
                          "expiration": {
                            "type": "number",
                            "description": "The expiration configured by the project retention policy"
                          },
                          "proposedExpiration": {
                            "type": "number",
                            "description": "The expiration proposed to replace the existing expiration"
                          },
                          "customEnvironment": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "slug": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object",
                            "description": "The custom environment used for this deployment, if any"
                          }
                        },
                        "required": [
                          "uid",
                          "name",
                          "projectId",
                          "url",
                          "created",
                          "type",
                          "creator",
                          "inspectorUrl"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "pagination",
                    "deployments"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          },
          "422": {
            "description": ""
          }
        },
        "parameters": [
          {
            "name": "app",
            "description": "Name of the deployment.",
            "in": "query",
            "schema": {
              "description": "Name of the deployment.",
              "type": "string",
              "example": "docs"
            }
          },
          {
            "name": "from",
            "description": "Gets the deployment created after this Date timestamp. (default: current time)",
            "in": "query",
            "schema": {
              "description": "Gets the deployment created after this Date timestamp. (default: current time)",
              "type": "number",
              "example": 1612948664566,
              "deprecated": true
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of deployments to list from a request.",
            "in": "query",
            "schema": {
              "description": "Maximum number of deployments to list from a request.",
              "type": "number",
              "example": 10
            }
          },
          {
            "name": "projectId",
            "description": "Filter deployments from the given ID or name.",
            "in": "query",
            "schema": {
              "description": "Filter deployments from the given ID or name.",
              "type": "string",
              "example": "QmXGTs7mvAMMC7WW5ebrM33qKG32QK3h4vmQMjmY"
            }
          },
          {
            "name": "target",
            "description": "Filter deployments based on the environment.",
            "in": "query",
            "schema": {
              "description": "Filter deployments based on the environment.",
              "type": "string",
              "example": "production"
            }
          },
          {
            "name": "to",
            "description": "Gets the deployment created before this Date timestamp. (default: current time)",
            "in": "query",
            "schema": {
              "description": "Gets the deployment created before this Date timestamp. (default: current time)",
              "type": "number",
              "example": 1612948664566,
              "deprecated": true
            }
          },
          {
            "name": "users",
            "description": "Filter out deployments based on users who have created the deployment.",
            "in": "query",
            "schema": {
              "description": "Filter out deployments based on users who have created the deployment.",
              "type": "string",
              "example": "kr1PsOIzqEL5Xg6M4VZcZosf,K4amb7K9dAt5R2vBJWF32bmY"
            }
          },
          {
            "name": "since",
            "description": "Get Deployments created after this JavaScript timestamp.",
            "in": "query",
            "schema": {
              "description": "Get Deployments created after this JavaScript timestamp.",
              "type": "number",
              "example": 1540095775941
            }
          },
          {
            "name": "until",
            "description": "Get Deployments created before this JavaScript timestamp.",
            "in": "query",
            "schema": {
              "description": "Get Deployments created before this JavaScript timestamp.",
              "type": "number",
              "example": 1540095775951
            }
          },
          {
            "name": "state",
            "description": "Filter deployments based on their state (`BUILDING`, `ERROR`, `INITIALIZING`, `QUEUED`, `READY`, `CANCELED`)",
            "in": "query",
            "schema": {
              "description": "Filter deployments based on their state (`BUILDING`, `ERROR`, `INITIALIZING`, `QUEUED`, `READY`, `CANCELED`)",
              "type": "string",
              "example": "BUILDING,READY"
            }
          },
          {
            "name": "rollbackCandidate",
            "description": "Filter deployments based on their rollback candidacy",
            "in": "query",
            "schema": {
              "description": "Filter deployments based on their rollback candidacy",
              "type": "boolean"
            }
          },
          {
            "name": "branch",
            "description": "Filter deployments based on the branch name",
            "in": "query",
            "schema": {
              "description": "Filter deployments based on the branch name",
              "type": "string"
            }
          },
          {
            "name": "sha",
            "description": "Filter deployments based on the SHA",
            "in": "query",
            "schema": {
              "description": "Filter deployments based on the SHA",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ],
        "x-speakeasy-usage-example": {
          "title": "List deployments",
          "description": "List deployments under the authenticated user or team.",
          "position": 1
        }
      }
    },
    "/v13/deployments/{id}": {
      "delete": {
        "description": "This API allows you to delete a deployment, either by supplying its `id` in the URL or the `url` of the deployment as a query parameter. You can obtain the ID, for example, by listing all deployments.",
        "operationId": "deleteDeployment",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Delete a Deployment",
        "tags": [
          "deployments"
        ],
        "responses": {
          "200": {
            "description": "The deployment was successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "uid": {
                      "type": "string",
                      "description": "The removed deployment ID.",
                      "example": "dpl_5WJWYSyB7BpgTj3EuwF37WMRBXBtPQ2iTMJHJBJyRfd"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "DELETED"
                      ],
                      "description": "A constant with the final state of the deployment."
                    }
                  },
                  "required": [
                    "uid",
                    "state"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided values in the request query is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelForbiddenError"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "The deployment was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VercelNotFoundError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the deployment to be deleted",
            "in": "path",
            "required": true,
            "schema": {
              "description": "The ID of the deployment to be deleted",
              "example": "dpl_5WJWYSyB7BpgTj3EuwF37WMRBXBtPQ2iTMJHJBJyRfd",
              "type": "string"
            }
          },
          {
            "name": "url",
            "description": "A Deployment or Alias URL. In case it is passed, the ID will be ignored",
            "in": "query",
            "required": false,
            "schema": {
              "description": "A Deployment or Alias URL. In case it is passed, the ID will be ignored",
              "example": "https://files-orcin-xi.vercel.app/",
              "type": "string"
            }
          },
          {
            "description": "The Team identifier to perform the request on behalf of.",
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string",
              "example": "team_1a2b3c4d5e6f7g8h9i0j1k2l"
            }
          },
          {
            "description": "The Team slug to perform the request on behalf of.",
            "in": "query",
            "name": "slug",
            "schema": {
              "type": "string",
              "example": "my-team-url-slug"
            }
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ACLAction": {
        "type": "string",
        "enum": [
          "create",
          "delete",
          "read",
          "update",
          "list"
        ],
        "description": "Enum containing the actions that can be performed against a resource. Group operations are included."
      },
      "FlagJSONValue": {
        "nullable": true,
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "boolean"
          },
          {
            "items": {
              "$ref": "#/components/schemas/FlagJSONValue"
            },
            "type": "array",
            "description": "TODO: The following types will eventually be exported by a more relevant package."
          },
          {
            "additionalProperties": {
              "$ref": "#/components/schemas/FlagJSONValue"
            },
            "type": "object"
          }
        ]
      },
      "Pagination": {
        "properties": {
          "count": {
            "type": "number",
            "description": "Amount of items in the current page.",
            "example": 20
          },
          "next": {
            "nullable": true,
            "type": "number",
            "description": "Timestamp that must be used to request the next page.",
            "example": 1540095775951
          },
          "prev": {
            "nullable": true,
            "type": "number",
            "description": "Timestamp that must be used to request the previous page.",
            "example": 1540095775951
          }
        },
        "required": [
          "count",
          "next",
          "prev"
        ],
        "type": "object",
        "description": "This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data."
      },
      "EdgeConfigItemValue": {
        "nullable": true,
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "boolean"
          },
          {
            "additionalProperties": {
              "$ref": "#/components/schemas/EdgeConfigItemValue"
            },
            "type": "object"
          },
          {
            "items": {
              "$ref": "#/components/schemas/EdgeConfigItemValue"
            },
            "type": "array"
          }
        ]
      },
      "EdgeConfigItem": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/EdgeConfigItemValue"
          },
          "description": {
            "type": "string"
          },
          "edgeConfigId": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "key",
          "value",
          "edgeConfigId",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "description": "The EdgeConfig."
      },
      "EdgeConfigToken": {
        "properties": {
          "token": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "This is not the token itself, but rather an id to identify the token by"
          },
          "edgeConfigId": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          }
        },
        "required": [
          "token",
          "label",
          "id",
          "edgeConfigId",
          "createdAt"
        ],
        "type": "object",
        "description": "The EdgeConfig."
      },
      "UserEvent": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the Event.",
            "example": "uev_bfmMjiMnXfnPbT97dGdpJbCN"
          },
          "text": {
            "type": "string",
            "description": "The human-readable text of the Event.",
            "example": "You logged in via GitHub"
          },
          "entities": {
            "items": {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "author",
                    "bitbucket_login",
                    "bold",
                    "deployment_host",
                    "dns_record",
                    "git_link",
                    "github_login",
                    "gitlab_login",
                    "hook_name",
                    "integration",
                    "edge-config",
                    "flag",
                    "flags-segment",
                    "flags-settings",
                    "link",
                    "project_name",
                    "scaling_rules",
                    "env_var_name",
                    "target",
                    "store",
                    "system"
                  ],
                  "description": "The type of entity.",
                  "example": "author"
                },
                "start": {
                  "type": "number",
                  "description": "The index of where the entity begins within the `text` (inclusive).",
                  "example": 0
                },
                "end": {
                  "type": "number",
                  "description": "The index of where the entity ends within the `text` (non-inclusive).",
                  "example": 3
                }
              },
              "required": [
                "type",
                "start",
                "end"
              ],
              "type": "object",
              "description": "A list of \"entities\" within the event `text`. Useful for enhancing the displayed text with additional styling and links."
            },
            "type": "array",
            "description": "A list of \"entities\" within the event `text`. Useful for enhancing the displayed text with additional styling and links."
          },
          "createdAt": {
            "type": "number",
            "description": "Timestamp (in milliseconds) of when the event was generated.",
            "example": 1632859321020
          },
          "user": {
            "properties": {
              "username": {
                "type": "string"
              },
              "avatar": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              },
              "uid": {
                "type": "string"
              }
            },
            "required": [
              "username",
              "avatar",
              "email",
              "uid"
            ],
            "type": "object",
            "description": "Metadata for {@link userId}."
          },
          "principal": {
            "oneOf": [
              {
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "user"
                    ]
                  },
                  "avatar": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "slug": {
                    "type": "string"
                  },
                  "uid": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "required": [
                  "avatar",
                  "email",
                  "uid",
                  "username"
                ],
                "type": "object",
                "description": "Metadata for {@link principalId}."
              },
              {
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "app"
                    ]
                  },
                  "clientId": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "clientId",
                  "name"
                ],
                "type": "object",
                "description": "Metadata for {@link principalId}."
              }
            ]
          },
          "via": {
            "items": {
              "oneOf": [
                {
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "user"
                      ]
                    },
                    "avatar": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "uid": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "avatar",
                    "email",
                    "uid",
                    "username"
                  ],
                  "type": "object",
                  "description": "Metadata for {@link viaIds}."
                },
                {
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "app"
                      ]
                    },
                    "clientId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "type",
                    "clientId",
                    "name"
                  ],
                  "type": "object",
                  "description": "Metadata for {@link viaIds}."
                }
              ]
            },
            "type": "array",
            "description": "Metadata for {@link viaIds}."
          },
          "userId": {
            "type": "string",
            "description": "When the principal who generated the event is a user, this is their ID; otherwise, it is empty.",
            "example": "zTuNVUXEAvvnNN3IaqinkyMw"
          },
          "principalId": {
            "type": "string",
            "description": "The ID of the principal who generated the event. The principal is typically a user, but it could also be an app, an integration, etc. The principal may have delegated its authority to an acting party, and so {@link viaIds} should be checked as well."
          },
          "viaIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "If the principal delegated its authority (for example, a user delegating to an app), then this array contains the ID of the current actor. For example, if `principalId` is \"user123\" and `viaIds` is `[\"app456\"]`, we can say the event was triggered by - \"app456 on behalf of user123\", or - \"user123 via app4556\". Both are equivalent. Arbitrarily long chains of delegation can be represented. For example, if `principalId` is \"user123\" and `viaIds` is `[\"service1\", \"service2\"]`, we can say the event was triggered by \"user123 via service1 via service2\"."
          },
          "payload": {
            "oneOf": [
              {
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": [
                      "created",
                      "updated",
                      "deleted",
                      "archived",
                      "unarchived"
                    ]
                  },
                  "id": {
                    "type": "string"
                  },
                  "slug": {
                    "type": "string"
                  },
                  "projectId": {
                    "type": "string"
                  }
                },
                "required": [
                  "action",
                  "id",
                  "slug",
                  "projectId"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "accessGroup": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "accessGroup"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "author": {
                    "type": "string"
                  },
                  "accessGroup": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "author",
                  "accessGroup"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "accessGroup": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "user": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "directoryType": {
                    "type": "string"
                  }
                },
                "required": [
                  "accessGroup",
                  "user"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "accessGroup": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  },
                  "project": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "next_role": {
                    "nullable": true,
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "PROJECT_DEVELOPER",
                      "PROJECT_VIEWER"
                    ]
                  },
                  "previous_role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "PROJECT_DEVELOPER",
                      "PROJECT_VIEWER"
                    ]
                  }
                },
                "required": [
                  "accessGroup",
                  "project"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "alias": {
                    "type": "string"
                  },
                  "deployment": {
                    "nullable": true,
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "meta": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "url",
                      "meta"
                    ],
                    "type": "object"
                  },
                  "ruleCount": {
                    "type": "number"
                  },
                  "deploymentUrl": {
                    "type": "string"
                  },
                  "aliasId": {
                    "type": "string"
                  },
                  "deploymentId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "oldDeploymentId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "redirect": {
                    "type": "string"
                  },
                  "redirectStatusCode": {
                    "nullable": true,
                    "type": "number"
                  },
                  "target": {
                    "nullable": true,
                    "type": "string"
                  },
                  "system": {
                    "type": "boolean"
                  },
                  "aliasUpdatedAt": {
                    "type": "number"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "aliasId": {
                    "type": "string"
                  },
                  "alias": {
                    "type": "string"
                  },
                  "projectName": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "alias": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "alias": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "alias": {
                    "type": "string"
                  },
                  "aliasId": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "alias": {
                    "type": "string"
                  },
                  "action": {
                    "type": "string",
                    "enum": [
                      "created",
                      "removed"
                    ]
                  }
                },
                "required": [
                  "projectName",
                  "alias",
                  "action"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "alias": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "alias": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "alias": {
                    "type": "string"
                  },
                  "oldTeam": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "newTeam": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "alias"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "alias": {
                    "type": "string"
                  },
                  "aliasId": {
                    "type": "string"
                  },
                  "deploymentId": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "alias",
                  "aliasId",
                  "deploymentId"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "alias": {
                    "type": "string"
                  },
                  "deploymentUrl": {
                    "type": "string"
                  }
                },
                "required": [
                  "alias",
                  "deploymentUrl"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "autoExposeSystemEnvs": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "projectName",
                  "autoExposeSystemEnvs"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "avatar": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "cn": {
                    "type": "string"
                  },
                  "cns": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "custom": {
                    "type": "boolean"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "custom"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "cn": {
                    "type": "string"
                  },
                  "cns": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "oldTeam": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "newTeam": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "src": {
                    "type": "string"
                  },
                  "dst": {
                    "type": "string"
                  }
                },
                "required": [
                  "src",
                  "dst"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "cn": {
                    "type": "string"
                  },
                  "cns": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "cn": {
                    "type": "string"
                  },
                  "cns": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "reason": {
                    "type": "string"
                  },
                  "suffix": {
                    "type": "string"
                  }
                },
                "required": [
                  "suffix"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "suffix": {
                    "type": "string"
                  }
                },
                "required": [
                  "status",
                  "suffix"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "suffix": {
                    "type": "string"
                  }
                },
                "required": [
                  "suffix"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "team": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  },
                  "configuration": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "project": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "buildsEnabled": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "team",
                  "configuration",
                  "project"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "team": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  },
                  "configuration": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "project": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "buildsEnabled": {
                    "type": "boolean"
                  },
                  "passive": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "team",
                  "configuration",
                  "project"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "team": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  },
                  "configuration": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "project": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "team",
                  "configuration",
                  "project"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "team": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  },
                  "configuration": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "newName": {
                    "type": "string"
                  }
                },
                "required": [
                  "team",
                  "configuration",
                  "newName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "githubLogin": {
                    "type": "string"
                  }
                },
                "required": [
                  "githubLogin"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "gitlabLogin": {
                    "type": "string"
                  },
                  "gitlabEmail": {
                    "type": "string"
                  },
                  "gitlabName": {
                    "type": "string"
                  }
                },
                "required": [
                  "gitlabLogin",
                  "gitlabEmail"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "bitbucketEmail": {
                    "type": "string"
                  },
                  "bitbucketLogin": {
                    "type": "string"
                  },
                  "bitbucketName": {
                    "type": "string"
                  }
                },
                "required": [
                  "bitbucketEmail",
                  "bitbucketLogin"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "project": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "job": {
                    "properties": {
                      "deployHook": {
                        "properties": {
                          "createdAt": {
                            "type": "number"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "ref": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "createdAt",
                          "id",
                          "name",
                          "ref"
                        ],
                        "type": "object"
                      },
                      "state": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "deployHook",
                      "state"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "project",
                  "job"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "alias": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "target": {
                    "nullable": true,
                    "type": "string"
                  },
                  "deployment": {
                    "nullable": true,
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "meta": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "url",
                      "meta"
                    ],
                    "type": "object"
                  },
                  "url": {
                    "type": "string"
                  },
                  "forced": {
                    "type": "boolean"
                  },
                  "deploymentId": {
                    "type": "string"
                  },
                  "plan": {
                    "type": "string"
                  },
                  "project": {
                    "type": "string"
                  },
                  "projectId": {
                    "type": "string"
                  },
                  "regions": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "url"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "oldTeam": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "newTeam": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "url"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "deployment": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "meta": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "url",
                      "meta"
                    ],
                    "type": "object"
                  },
                  "deploymentId": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  }
                },
                "required": [
                  "deployment",
                  "deploymentId",
                  "url"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "mxPriority": {
                    "type": "number"
                  }
                },
                "required": [
                  "id",
                  "value",
                  "name",
                  "domain",
                  "type"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "value",
                  "name",
                  "domain",
                  "type"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number"
                  },
                  "currency": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "price"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "cdnEnabled": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "cdnEnabled"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  },
                  "teamId": {
                    "type": "string"
                  },
                  "ownerName": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "userId",
                  "teamId",
                  "ownerName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "oldTeam": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "newTeam": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "domainId": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "domainId",
                  "name"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "fromId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "fromName": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "fromId",
                  "fromName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "destinationId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "destinationName": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "destinationId",
                  "destinationName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "destinationId": {
                    "type": "string"
                  },
                  "destinationName": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "destinationId",
                  "destinationName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "renew": {
                    "type": "boolean"
                  },
                  "domain": {
                    "type": "string"
                  }
                },
                "required": [
                  "domain"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number"
                  },
                  "currency": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "sha": {
                    "type": "string"
                  },
                  "gitUserPlatform": {
                    "type": "string"
                  },
                  "projectName": {
                    "type": "string"
                  }
                },
                "required": [
                  "sha",
                  "gitUserPlatform",
                  "projectName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "name"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "projectId": {
                    "type": "string"
                  },
                  "projectName": {
                    "type": "string"
                  },
                  "target": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    ]
                  },
                  "id": {
                    "type": "string"
                  },
                  "gitBranch": {
                    "type": "string"
                  },
                  "edgeConfigId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "edgeConfigTokenId": {
                    "nullable": true,
                    "type": "string"
                  },
                  "source": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date when the Shared Env Var was created.",
                    "example": "2021-02-10T13:11:49.180Z"
                  },
                  "key": {
                    "type": "string",
                    "description": "The name of the Shared Env Var.",
                    "example": "my-api-key"
                  },
                  "ownerId": {
                    "nullable": true,
                    "type": "string",
                    "description": "The unique identifier of the owner (team) the Shared Env Var was created for.",
                    "example": "team_LLHUOMOoDlqOp8wPE4kFo9pE"
                  },
                  "id": {
                    "type": "string",
                    "description": "The unique identifier of the Shared Env Var.",
                    "example": "env_XCG7t7AIHuO2SBA8667zNUiM"
                  },
                  "createdBy": {
                    "nullable": true,
                    "type": "string",
                    "description": "The unique identifier of the user who created the Shared Env Var.",
                    "example": "2qDDuGFTWXBLDNnqZfWPDp1A"
                  },
                  "deletedBy": {
                    "nullable": true,
                    "type": "string",
                    "description": "The unique identifier of the user who deleted the Shared Env Var.",
                    "example": "2qDDuGFTWXBLDNnqZfWPDp1A"
                  },
                  "updatedBy": {
                    "nullable": true,
                    "type": "string",
                    "description": "The unique identifier of the user who last updated the Shared Env Var.",
                    "example": "2qDDuGFTWXBLDNnqZfWPDp1A"
                  },
                  "createdAt": {
                    "type": "number",
                    "description": "Timestamp for when the Shared Env Var was created.",
                    "example": 1609492210000
                  },
                  "deletedAt": {
                    "type": "number",
                    "description": "Timestamp for when the Shared Env Var was (soft) deleted.",
                    "example": 1609492210000
                  },
                  "updatedAt": {
                    "type": "number",
                    "description": "Timestamp for when the Shared Env Var was last updated.",
                    "example": 1609492210000
                  },
                  "value": {
                    "type": "string",
                    "description": "The value of the Shared Env Var."
                  },
                  "projectId": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "description": "The unique identifiers of the projects which the Shared Env Var is linked to.",
                    "example": [
                      "prj_2WjyKQmM8ZnGcJsPWMrHRHrE",
                      "prj_2WjyKQmM8ZnGcJsPWMrasEFg"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "system",
                      "encrypted",
                      "plain",
                      "sensitive"
                    ],
                    "description": "The type of this cosmos doc instance, if blank, assume secret.",
                    "example": "encrypted"
                  },
                  "target": {
                    "items": {
                      "type": "string",
                      "enum": [
                        "production",
                        "preview",
                        "development"
                      ],
                      "description": "environments this env variable targets",
                      "example": "production"
                    },
                    "type": "array",
                    "description": "environments this env variable targets",
                    "example": "production"
                  },
                  "applyToAllCustomEnvironments": {
                    "type": "boolean",
                    "description": "whether or not this env varible applies to custom environments"
                  },
                  "decrypted": {
                    "type": "boolean",
                    "description": "whether or not this env variable is decrypted"
                  },
                  "comment": {
                    "type": "string",
                    "description": "A user provided comment that describes what this Shared Env Var is for."
                  },
                  "lastEditedByDisplayName": {
                    "type": "string",
                    "description": "The last editor full name or username."
                  },
                  "projectNames": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "oldEnvVar": {
                    "properties": {
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date when the Shared Env Var was created.",
                        "example": "2021-02-10T13:11:49.180Z"
                      },
                      "key": {
                        "type": "string",
                        "description": "The name of the Shared Env Var.",
                        "example": "my-api-key"
                      },
                      "ownerId": {
                        "nullable": true,
                        "type": "string",
                        "description": "The unique identifier of the owner (team) the Shared Env Var was created for.",
                        "example": "team_LLHUOMOoDlqOp8wPE4kFo9pE"
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier of the Shared Env Var.",
                        "example": "env_XCG7t7AIHuO2SBA8667zNUiM"
                      },
                      "createdBy": {
                        "nullable": true,
                        "type": "string",
                        "description": "The unique identifier of the user who created the Shared Env Var.",
                        "example": "2qDDuGFTWXBLDNnqZfWPDp1A"
                      },
                      "deletedBy": {
                        "nullable": true,
                        "type": "string",
                        "description": "The unique identifier of the user who deleted the Shared Env Var.",
                        "example": "2qDDuGFTWXBLDNnqZfWPDp1A"
                      },
                      "updatedBy": {
                        "nullable": true,
                        "type": "string",
                        "description": "The unique identifier of the user who last updated the Shared Env Var.",
                        "example": "2qDDuGFTWXBLDNnqZfWPDp1A"
                      },
                      "createdAt": {
                        "type": "number",
                        "description": "Timestamp for when the Shared Env Var was created.",
                        "example": 1609492210000
                      },
                      "deletedAt": {
                        "type": "number",
                        "description": "Timestamp for when the Shared Env Var was (soft) deleted.",
                        "example": 1609492210000
                      },
                      "updatedAt": {
                        "type": "number",
                        "description": "Timestamp for when the Shared Env Var was last updated.",
                        "example": 1609492210000
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the Shared Env Var."
                      },
                      "projectId": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "description": "The unique identifiers of the projects which the Shared Env Var is linked to.",
                        "example": [
                          "prj_2WjyKQmM8ZnGcJsPWMrHRHrE",
                          "prj_2WjyKQmM8ZnGcJsPWMrasEFg"
                        ]
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "system",
                          "encrypted",
                          "plain",
                          "sensitive"
                        ],
                        "description": "The type of this cosmos doc instance, if blank, assume secret.",
                        "example": "encrypted"
                      },
                      "target": {
                        "items": {
                          "type": "string",
                          "enum": [
                            "production",
                            "preview",
                            "development"
                          ],
                          "description": "environments this env variable targets",
                          "example": "production"
                        },
                        "type": "array",
                        "description": "environments this env variable targets",
                        "example": "production"
                      },
                      "applyToAllCustomEnvironments": {
                        "type": "boolean",
                        "description": "whether or not this env varible applies to custom environments"
                      },
                      "decrypted": {
                        "type": "boolean",
                        "description": "whether or not this env variable is decrypted"
                      },
                      "comment": {
                        "type": "string",
                        "description": "A user provided comment that describes what this Shared Env Var is for."
                      },
                      "lastEditedByDisplayName": {
                        "type": "string",
                        "description": "The last editor full name or username."
                      }
                    },
                    "type": "object"
                  },
                  "newEnvVar": {
                    "properties": {
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date when the Shared Env Var was created.",
                        "example": "2021-02-10T13:11:49.180Z"
                      },
                      "key": {
                        "type": "string",
                        "description": "The name of the Shared Env Var.",
                        "example": "my-api-key"
                      },
                      "ownerId": {
                        "nullable": true,
                        "type": "string",
                        "description": "The unique identifier of the owner (team) the Shared Env Var was created for.",
                        "example": "team_LLHUOMOoDlqOp8wPE4kFo9pE"
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier of the Shared Env Var.",
                        "example": "env_XCG7t7AIHuO2SBA8667zNUiM"
                      },
                      "createdBy": {
                        "nullable": true,
                        "type": "string",
                        "description": "The unique identifier of the user who created the Shared Env Var.",
                        "example": "2qDDuGFTWXBLDNnqZfWPDp1A"
                      },
                      "deletedBy": {
                        "nullable": true,
                        "type": "string",
                        "description": "The unique identifier of the user who deleted the Shared Env Var.",
                        "example": "2qDDuGFTWXBLDNnqZfWPDp1A"
                      },
                      "updatedBy": {
                        "nullable": true,
                        "type": "string",
                        "description": "The unique identifier of the user who last updated the Shared Env Var.",
                        "example": "2qDDuGFTWXBLDNnqZfWPDp1A"
                      },
                      "createdAt": {
                        "type": "number",
                        "description": "Timestamp for when the Shared Env Var was created.",
                        "example": 1609492210000
                      },
                      "deletedAt": {
                        "type": "number",
                        "description": "Timestamp for when the Shared Env Var was (soft) deleted.",
                        "example": 1609492210000
                      },
                      "updatedAt": {
                        "type": "number",
                        "description": "Timestamp for when the Shared Env Var was last updated.",
                        "example": 1609492210000
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the Shared Env Var."
                      },
                      "projectId": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "description": "The unique identifiers of the projects which the Shared Env Var is linked to.",
                        "example": [
                          "prj_2WjyKQmM8ZnGcJsPWMrHRHrE",
                          "prj_2WjyKQmM8ZnGcJsPWMrasEFg"
                        ]
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "system",
                          "encrypted",
                          "plain",
                          "sensitive"
                        ],
                        "description": "The type of this cosmos doc instance, if blank, assume secret.",
                        "example": "encrypted"
                      },
                      "target": {
                        "items": {
                          "type": "string",
                          "enum": [
                            "production",
                            "preview",
                            "development"
                          ],
                          "description": "environments this env variable targets",
                          "example": "production"
                        },
                        "type": "array",
                        "description": "environments this env variable targets",
                        "example": "production"
                      },
                      "applyToAllCustomEnvironments": {
                        "type": "boolean",
                        "description": "whether or not this env varible applies to custom environments"
                      },
                      "decrypted": {
                        "type": "boolean",
                        "description": "whether or not this env variable is decrypted"
                      },
                      "comment": {
                        "type": "string",
                        "description": "A user provided comment that describes what this Shared Env Var is for."
                      },
                      "lastEditedByDisplayName": {
                        "type": "string",
                        "description": "The last editor full name or username."
                      }
                    },
                    "type": "object"
                  },
                  "updateDiff": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      },
                      "newKey": {
                        "type": "string"
                      },
                      "oldTarget": {
                        "items": {
                          "type": "string",
                          "enum": [
                            "production",
                            "preview",
                            "development"
                          ]
                        },
                        "type": "array"
                      },
                      "newTarget": {
                        "items": {
                          "type": "string",
                          "enum": [
                            "production",
                            "preview",
                            "development"
                          ]
                        },
                        "type": "array"
                      },
                      "oldType": {
                        "type": "string"
                      },
                      "newType": {
                        "type": "string"
                      },
                      "oldProjects": {
                        "items": {
                          "properties": {
                            "projectName": {
                              "type": "string"
                            },
                            "projectId": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "projectId"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "newProjects": {
                        "items": {
                          "properties": {
                            "projectName": {
                              "type": "string"
                            },
                            "projectId": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "projectId"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "changedValue": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "id",
                      "changedValue"
                    ],
                    "type": "object"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "restore": {
                    "type": "boolean"
                  },
                  "configVersion": {
                    "type": "number"
                  },
                  "configChangeCount": {
                    "type": "number"
                  },
                  "configChanges": {
                    "items": {
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "projectId",
                  "restore",
                  "configVersion",
                  "configChangeCount",
                  "configChanges"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "scope": {
                    "type": "string"
                  },
                  "source": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectId",
                  "scope",
                  "source"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "rulesetName": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "action": {
                    "type": "string",
                    "enum": [
                      "log",
                      "challenge",
                      "deny"
                    ]
                  }
                },
                "required": [
                  "projectId",
                  "rulesetName",
                  "active"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "rulesetName": {
                    "type": "string"
                  },
                  "ruleGroups": {
                    "additionalProperties": {
                      "properties": {
                        "active": {
                          "type": "boolean"
                        },
                        "action": {
                          "type": "string",
                          "enum": [
                            "log",
                            "challenge",
                            "deny"
                          ]
                        }
                      },
                      "required": [
                        "active"
                      ],
                      "type": "object"
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "projectId",
                  "rulesetName",
                  "ruleGroups"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "prevAttackModeEnabled": {
                    "type": "boolean"
                  },
                  "prevAttackModeActiveUntil": {
                    "nullable": true,
                    "type": "number"
                  },
                  "attackModeEnabled": {
                    "type": "boolean"
                  },
                  "attackModeActiveUntil": {
                    "nullable": true,
                    "type": "number"
                  }
                },
                "required": [
                  "projectId",
                  "attackModeEnabled"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "integrationId": {
                    "type": "string"
                  },
                  "integrationSlug": {
                    "type": "string"
                  },
                  "integrationName": {
                    "type": "string"
                  }
                },
                "required": [
                  "integrationId",
                  "integrationSlug",
                  "integrationName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "integrationId": {
                    "type": "string"
                  },
                  "configurationId": {
                    "type": "string"
                  },
                  "integrationSlug": {
                    "type": "string"
                  },
                  "integrationName": {
                    "type": "string"
                  },
                  "newOwner": {
                    "nullable": true,
                    "properties": {
                      "abuse": {
                        "properties": {
                          "blockHistory": {
                            "items": {
                              "properties": {
                                "action": {
                                  "type": "string",
                                  "enum": [
                                    "hard-blocked",
                                    "soft-blocked",
                                    "unblocked"
                                  ]
                                },
                                "createdAt": {
                                  "type": "number"
                                },
                                "caseId": {
                                  "type": "string"
                                },
                                "reason": {
                                  "type": "string"
                                },
                                "actor": {
                                  "type": "string"
                                },
                                "statusCode": {
                                  "type": "number"
                                },
                                "comment": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "action",
                                "createdAt",
                                "reason"
                              ],
                              "type": "object",
                              "description": "Since June 2023"
                            },
                            "type": "array",
                            "description": "Since June 2023"
                          },
                          "gitAuthHistory": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "description": "Since March 2022. Helps abuse checks by tracking git auths. Format: `\u003cplatform\u003e:\u003cdetail\u003e:\u003cvalue\u003e`"
                          },
                          "history": {
                            "items": {
                              "properties": {
                                "scanner": {
                                  "type": "string"
                                },
                                "reason": {
                                  "type": "string"
                                },
                                "by": {
                                  "type": "string"
                                },
                                "byId": {
                                  "type": "string"
                                },
                                "at": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "scanner",
                                "reason",
                                "by",
                                "byId",
                                "at"
                              ],
                              "type": "object",
                              "description": "(scanner history). Since November 2021. First element is newest."
                            },
                            "type": "array",
                            "description": "(scanner history). Since November 2021. First element is newest."
                          },
                          "gitLineageBlocks": {
                            "type": "number",
                            "description": "Since September 2023. How often did this owner trigger an actual git lineage deploy block?"
                          },
                          "gitLineageBlocksDry": {
                            "type": "number",
                            "description": "Since September 2023. How often did this owner trigger a git lineage deploy block dry run?"
                          },
                          "scanner": {
                            "type": "string",
                            "description": "Since November 2021. Guides the abuse scanner in build container."
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "Since November 2021"
                          },
                          "creationUserAgent": {
                            "type": "string"
                          },
                          "creationIp": {
                            "type": "string"
                          },
                          "removedPhoneNumbers": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "updatedAt"
                        ],
                        "type": "object"
                      },
                      "acceptanceState": {
                        "type": "string"
                      },
                      "acceptedAt": {
                        "type": "number"
                      },
                      "avatar": {
                        "type": "string"
                      },
                      "billing": {
                        "type": "object",
                        "properties": {
                          "plan": {
                            "type": "string",
                            "enum": [
                              "pro",
                              "enterprise",
                              "hobby"
                            ]
                          }
                        },
                        "required": [
                          "plan"
                        ]
                      },
                      "blocked": {
                        "nullable": true,
                        "type": "number"
                      },
                      "blockReason": {
                        "type": "string"
                      },
                      "created": {
                        "type": "number"
                      },
                      "createdAt": {
                        "type": "number"
                      },
                      "credentials": {
                        "items": {
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "gitlab",
                                    "bitbucket",
                                    "google",
                                    "github-oauth",
                                    "github-oauth-limited"
                                  ]
                                },
                                "id": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "id"
                              ],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "github-oauth-custom-host"
                                  ]
                                },
                                "host": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type",
                                "host",
                                "id"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array"
                      },
                      "customerId": {
                        "nullable": true,
                        "type": "string"
                      },
                      "orbCustomerId": {
                        "nullable": true,
                        "type": "string"
                      },
                      "dataCache": {
                        "properties": {
                          "excessBillingEnabled": {
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "deletedAt": {
                        "nullable": true,
                        "type": "number"
                      },
                      "deploymentSecret": {
                        "type": "string"
                      },
                      "dismissedTeams": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "dismissedToasts": {
                        "items": {
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "dismissals": {
                              "items": {
                                "properties": {
                                  "scopeId": {
                                    "type": "string"
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "scopeId",
                                  "createdAt"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "name",
                            "dismissals"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "favoriteProjectsAndSpaces": {
                        "items": {
                          "properties": {
                            "teamId": {
                              "type": "string"
                            },
                            "projectId": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "teamId",
                            "projectId"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "email": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "importFlowGitNamespace": {
                        "nullable": true,
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "importFlowGitNamespaceId": {
                        "nullable": true,
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "importFlowGitProvider": {
                        "nullable": true,
                        "type": "string",
                        "enum": [
                          "github",
                          "gitlab",
                          "bitbucket",
                          "github-limited",
                          "github-custom-host"
                        ]
                      },
                      "preferredScopesAndGitNamespaces": {
                        "items": {
                          "properties": {
                            "scopeId": {
                              "type": "string"
                            },
                            "gitNamespaceId": {
                              "nullable": true,
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                }
                              ]
                            }
                          },
                          "required": [
                            "scopeId",
                            "gitNamespaceId"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "isDomainReseller": {
                        "type": "boolean"
                      },
                      "isZeitPub": {
                        "type": "boolean"
                      },
                      "maxActiveSlots": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "phoneNumber": {
                        "type": "string"
                      },
                      "platformVersion": {
                        "nullable": true,
                        "type": "number"
                      },
                      "preventAutoBlocking": {
                        "oneOf": [
                          {
                            "type": "number"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      },
                      "projectDomainsLimit": {
                        "type": "number",
                        "description": "Overrides our DEFAULT project domains limit per account or per project."
                      },
                      "remoteCaching": {
                        "properties": {
                          "enabled": {
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "description": "Represents configuration for remote caching"
                      },
                      "removedAliasesAt": {
                        "type": "number"
                      },
                      "removedBillingSubscriptionAt": {
                        "type": "number"
                      },
                      "removedConfigurationsAt": {
                        "type": "number"
                      },
                      "removedDeploymentsAt": {
                        "type": "number"
                      },
                      "removedDomiansAt": {
                        "type": "number"
                      },
                      "removedEventsAt": {
                        "type": "number"
                      },
                      "removedProjectsAt": {
                        "type": "number"
                      },
                      "removedSecretsAt": {
                        "type": "number"
                      },
                      "removedSharedEnvVarsAt": {
                        "type": "number"
                      },
                      "removedEdgeConfigsAt": {
                        "type": "number"
                      },
                      "resourceConfig": {
                        "properties": {
                          "nodeType": {
                            "type": "string"
                          },
                          "concurrentBuilds": {
                            "type": "number"
                          },
                          "elasticConcurrencyEnabled": {
                            "type": "boolean"
                          },
                          "buildEntitlements": {
                            "properties": {
                              "enhancedBuilds": {
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "awsAccountType": {
                            "type": "string"
                          },
                          "awsAccountIds": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "cfZoneName": {
                            "type": "string"
                          },
                          "imageOptimizationType": {
                            "type": "string"
                          },
                          "edgeConfigs": {
                            "type": "number"
                          },
                          "edgeConfigSize": {
                            "type": "number"
                          },
                          "edgeFunctionMaxSizeBytes": {
                            "type": "number"
                          },
                          "edgeFunctionExecutionTimeoutMs": {
                            "type": "number"
                          },
                          "serverlessFunctionMaxMemorySize": {
                            "type": "number"
                          },
                          "kvDatabases": {
                            "type": "number"
                          },
                          "postgresDatabases": {
                            "type": "number"
                          },
                          "blobStores": {
                            "type": "number"
                          },
                          "integrationStores": {
                            "type": "number"
                          },
                          "cronJobs": {
                            "type": "number"
                          },
                          "cronJobsPerProject": {
                            "type": "number"
                          },
                          "microfrontendGroupsPerTeam": {
                            "type": "number"
                          },
                          "microfrontendProjectsPerGroup": {
                            "type": "number"
                          },
                          "flagsExplorerOverridesThreshold": {
                            "type": "number"
                          },
                          "flagsExplorerUnlimitedOverrides": {
                            "type": "boolean"
                          },
                          "customEnvironmentsPerProject": {
                            "type": "number"
                          },
                          "buildMachine": {
                            "properties": {
                              "purchaseType": {
                                "type": "string",
                                "enum": [
                                  "enhanced",
                                  "turbo"
                                ]
                              },
                              "isDefaultBuildMachine": {
                                "type": "boolean"
                              },
                              "cores": {
                                "type": "number"
                              },
                              "memory": {
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "security": {
                            "properties": {
                              "customRules": {
                                "type": "number"
                              },
                              "ipBlocks": {
                                "type": "number"
                              },
                              "ipBypass": {
                                "type": "number"
                              },
                              "rateLimit": {
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "resourceLimits": {
                        "additionalProperties": {
                          "properties": {
                            "max": {
                              "type": "number"
                            },
                            "duration": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "max",
                            "duration"
                          ],
                          "type": "object"
                        },
                        "type": "object",
                        "description": "User | Team resource limits"
                      },
                      "activeDashboardViews": {
                        "items": {
                          "properties": {
                            "scopeId": {
                              "type": "string"
                            },
                            "viewPreference": {
                              "nullable": true,
                              "type": "string",
                              "enum": [
                                "cards",
                                "list"
                              ]
                            },
                            "favoritesViewPreference": {
                              "nullable": true,
                              "type": "string",
                              "enum": [
                                "open",
                                "closed"
                              ]
                            },
                            "recentsViewPreference": {
                              "nullable": true,
                              "type": "string",
                              "enum": [
                                "open",
                                "closed"
                              ]
                            }
                          },
                          "required": [
                            "scopeId"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "secondaryEmails": {
                        "items": {
                          "properties": {
                            "email": {
                              "type": "string"
                            },
                            "verified": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "email",
                            "verified"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "emailNotifications": {
                        "properties": {
                          "rules": {
                            "additionalProperties": {
                              "properties": {
                                "email": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "email"
                              ],
                              "type": "object"
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "siftScore": {
                        "type": "number"
                      },
                      "siftScores": {
                        "additionalProperties": {
                          "properties": {
                            "score": {
                              "type": "number"
                            },
                            "reasons": {
                              "items": {
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "name",
                                  "value"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "score",
                            "reasons"
                          ],
                          "type": "object"
                        },
                        "type": "object"
                      },
                      "siftRoute": {
                        "properties": {
                          "name": {
                            "type": "string",
                            "enum": [
                              "string"
                            ]
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "sfdcId": {
                        "type": "string"
                      },
                      "softBlock": {
                        "nullable": true,
                        "properties": {
                          "blockedAt": {
                            "type": "number"
                          },
                          "reason": {
                            "type": "string",
                            "enum": [
                              "SUBSCRIPTION_CANCELED",
                              "SUBSCRIPTION_EXPIRED",
                              "UNPAID_INVOICE",
                              "ENTERPRISE_TRIAL_ENDED",
                              "FAIR_USE_LIMITS_EXCEEDED",
                              "BLOCKED_FOR_PLATFORM_ABUSE"
                            ]
                          },
                          "blockedDueToOverageType": {
                            "type": "string",
                            "enum": [
                              "analyticsUsage",
                              "artifacts",
                              "bandwidth",
                              "blobTotalAdvancedRequests",
                              "blobTotalAvgSizeInBytes",
                              "blobTotalGetResponseObjectSizeInBytes",
                              "blobTotalSimpleRequests",
                              "connectDataTransfer",
                              "dataCacheRead",
                              "dataCacheWrite",
                              "edgeConfigRead",
                              "edgeConfigWrite",
                              "edgeFunctionExecutionUnits",
                              "edgeMiddlewareInvocations",
                              "edgeRequestAdditionalCpuDuration",
                              "edgeRequest",
                              "elasticConcurrencyBuildSlots",
                              "fastDataTransfer",
                              "fastOriginTransfer",
                              "fluidCpuDuration",
                              "fluidDuration",
                              "functionDuration",
                              "functionInvocation",
                              "imageOptimizationCacheRead",
                              "imageOptimizationCacheWrite",
                              "imageOptimizationTransformation",
                              "logDrainsVolume",
                              "monitoringMetric",
                              "blobDataTransfer",
                              "observabilityEvent",
                              "onDemandConcurrencyMinutes",
                              "runtimeCacheRead",
                              "runtimeCacheWrite",
                              "serverlessFunctionExecution",
                              "sourceImages",
                              "wafOwaspExcessBytes",
                              "wafOwaspRequests",
                              "wafRateLimitRequest",
                              "webAnalyticsEvent"
                            ]
                          }
                        },
                        "required": [
                          "blockedAt",
                          "reason"
                        ],
                        "type": "object"
                      },
                      "stagingPrefix": {
                        "type": "string"
                      },
                      "sysToken": {
                        "type": "string"
                      },
                      "teams": {
                        "items": {
                          "properties": {
                            "created": {
                              "type": "number"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "teamId": {
                              "type": "string"
                            },
                            "role": {
                              "type": "string",
                              "enum": [
                                "OWNER",
                                "MEMBER",
                                "DEVELOPER",
                                "SECURITY",
                                "BILLING",
                                "VIEWER",
                                "VIEWER_FOR_PLUS",
                                "CONTRIBUTOR"
                              ]
                            },
                            "confirmed": {
                              "type": "boolean"
                            },
                            "confirmedAt": {
                              "type": "number"
                            },
                            "accessRequestedAt": {
                              "type": "number"
                            },
                            "teamRoles": {
                              "items": {
                                "type": "string",
                                "enum": [
                                  "OWNER",
                                  "MEMBER",
                                  "DEVELOPER",
                                  "SECURITY",
                                  "BILLING",
                                  "VIEWER",
                                  "VIEWER_FOR_PLUS",
                                  "CONTRIBUTOR"
                                ]
                              },
                              "type": "array"
                            },
                            "teamPermissions": {
                              "items": {
                                "type": "string",
                                "enum": [
                                  "IntegrationManager",
                                  "CreateProject",
                                  "FullProductionDeployment",
                                  "UsageViewer",
                                  "EnvVariableManager",
                                  "EnvironmentManager",
                                  "V0Builder",
                                  "V0Chatter",
                                  "V0Viewer"
                                ]
                              },
                              "type": "array"
                            },
                            "joinedFrom": {
                              "properties": {
                                "origin": {
                                  "type": "string",
                                  "enum": [
                                    "teams",
                                    "saml",
                                    "link",
                                    "github",
                                    "gitlab",
                                    "bitbucket",
                                    "mail",
                                    "import",
                                    "dsync",
                                    "feedback",
                                    "organization-teams"
                                  ]
                                },
                                "commitId": {
                                  "type": "string"
                                },
                                "repoId": {
                                  "type": "string"
                                },
                                "repoPath": {
                                  "type": "string"
                                },
                                "gitUserId": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "number"
                                    }
                                  ]
                                },
                                "gitUserLogin": {
                                  "type": "string"
                                },
                                "ssoUserId": {
                                  "type": "string"
                                },
                                "ssoConnectedAt": {
                                  "type": "number"
                                },
                                "idpUserId": {
                                  "type": "string"
                                },
                                "dsyncUserId": {
                                  "type": "string"
                                },
                                "dsyncConnectedAt": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "origin"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "created",
                            "createdAt",
                            "role",
                            "confirmed",
                            "confirmedAt",
                            "teamId"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "description": "A helper that allows to describe a relationship attribute. It receives the shape of a relationship plus the foreignKey name to make it mandatory in the resulting type."
                      },
                      "trialTeamIds": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "description": "Introduced 2022-04-12 An array of teamIds (for trial teams created after 2022-04-01), created by the user in question. Used in determining whether the team has a trial available in utils/api-teams/user-has-trial-available.ts."
                      },
                      "maxTrials": {
                        "type": "number",
                        "description": "Introduced 2022-04-19 Number of maximum trials to allocate to a user. When undefined, defaults to MAX_TRIALS in utils/api-teams/user-has-trial-available.ts. This is set to trialTeamIds + 1 by services/api-backoffice/src/handlers/add-additional-trial.ts."
                      },
                      "trialTeamId": {
                        "type": "string",
                        "description": "Deprecated on 2022-04-12 in favor of trialTeamIds and using utils/api-teams/user-has-trial-available.ts."
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "user"
                        ]
                      },
                      "usageAlerts": {
                        "nullable": true,
                        "properties": {
                          "warningAt": {
                            "nullable": true,
                            "type": "number"
                          },
                          "blockingAt": {
                            "nullable": true,
                            "type": "number"
                          }
                        },
                        "type": "object",
                        "description": "Contains the timestamps when a user was notified about their usage"
                      },
                      "overageUsageAlerts": {
                        "properties": {
                          "analyticsUsage": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "artifacts": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "bandwidth": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "blobTotalAdvancedRequests": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "blobTotalAvgSizeInBytes": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "blobTotalGetResponseObjectSizeInBytes": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "blobTotalSimpleRequests": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "connectDataTransfer": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "dataCacheRead": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "dataCacheWrite": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "edgeConfigRead": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "edgeConfigWrite": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "edgeFunctionExecutionUnits": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "edgeMiddlewareInvocations": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "edgeRequestAdditionalCpuDuration": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "edgeRequest": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "elasticConcurrencyBuildSlots": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "fastDataTransfer": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "fastOriginTransfer": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "fluidCpuDuration": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "fluidDuration": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "functionDuration": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "functionInvocation": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "imageOptimizationCacheRead": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "imageOptimizationCacheWrite": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "imageOptimizationTransformation": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "logDrainsVolume": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "monitoringMetric": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "blobDataTransfer": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "observabilityEvent": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "onDemandConcurrencyMinutes": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "runtimeCacheRead": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "runtimeCacheWrite": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "serverlessFunctionExecution": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "sourceImages": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "wafOwaspExcessBytes": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "wafOwaspRequests": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "wafRateLimitRequest": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          },
                          "webAnalyticsEvent": {
                            "properties": {
                              "currentThreshold": {
                                "type": "number"
                              },
                              "warningAt": {
                                "nullable": true,
                                "type": "number"
                              },
                              "blockedAt": {
                                "nullable": true,
                                "type": "number"
                              }
                            },
                            "required": [
                              "currentThreshold"
                            ],
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "overageMetadata": {
                        "properties": {
                          "firstTimeOnDemandNotificationSentAt": {
                            "type": "number",
                            "description": "Tracks if the first time on-demand overage email has been sent."
                          },
                          "dailyOverageSummaryEmailSentAt": {
                            "type": "number",
                            "description": "Tracks the last time we sent a daily summary email."
                          },
                          "weeklyOverageSummaryEmailSentAt": {
                            "type": "number",
                            "description": "Tracks the last time we sent a weekly summary email."
                          },
                          "overageSummaryExpiresAt": {
                            "type": "number",
                            "description": "Tracks when the overage summary email will stop auto-sending. We currently lock the user into email for a month after the last on-demand usage."
                          },
                          "increasedOnDemandEmailSentAt": {
                            "type": "number",
                            "description": "Tracks the last time we sent a increased on-demand email."
                          },
                          "increasedOnDemandEmailAttemptedAt": {
                            "type": "number",
                            "description": "Tracks the last time we attempted to send an increased on-demand email. This check is to limit the number of attempts per day."
                          }
                        },
                        "type": "object",
                        "description": "Contains the timestamps for usage summary emails."
                      },
                      "username": {
                        "type": "string"
                      },
                      "updatedAt": {
                        "type": "number"
                      },
                      "enablePreviewFeedback": {
                        "type": "string",
                        "enum": [
                          "default",
                          "on",
                          "off",
                          "on-force",
                          "off-force",
                          "default-force"
                        ],
                        "description": "Whether the Vercel Toolbar is enabled for preview deployments."
                      },
                      "featureBlocks": {
                        "properties": {
                          "webAnalytics": {
                            "properties": {
                              "updatedAt": {
                                "type": "number"
                              },
                              "blockedFrom": {
                                "type": "number"
                              },
                              "blockedUntil": {
                                "type": "number"
                              },
                              "blockReason": {
                                "type": "string",
                                "enum": [
                                  "admin_override",
                                  "limits_exceeded"
                                ]
                              },
                              "graceEmailSentAt": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "updatedAt",
                              "blockReason"
                            ],
                            "type": "object"
                          },
                          "monitoring": {
                            "properties": {
                              "updatedAt": {
                                "type": "number"
                              },
                              "blockedFrom": {
                                "type": "number"
                              },
                              "blockedUntil": {
                                "type": "number"
                              },
                              "blockReason": {
                                "type": "string",
                                "enum": [
                                  "admin_override",
                                  "limits_exceeded"
                                ]
                              },
                              "blockType": {
                                "type": "string",
                                "enum": [
                                  "soft",
                                  "hard"
                                ]
                              }
                            },
                            "required": [
                              "updatedAt",
                              "blockReason",
                              "blockType"
                            ],
                            "type": "object",
                            "description": "A soft block indicates a temporary pause in data collection (ex limit exceeded for the current cycle) A hard block indicates a stoppage in data collection that requires manual intervention (ex upgrading a pro trial)"
                          },
                          "observabilityPlus": {
                            "properties": {
                              "updatedAt": {
                                "type": "number"
                              },
                              "blockedFrom": {
                                "type": "number"
                              },
                              "blockedUntil": {
                                "type": "number"
                              },
                              "blockReason": {
                                "type": "string",
                                "enum": [
                                  "admin_override",
                                  "limits_exceeded"
                                ]
                              },
                              "blockType": {
                                "type": "string",
                                "enum": [
                                  "soft",
                                  "hard"
                                ]
                              }
                            },
                            "required": [
                              "updatedAt",
                              "blockReason",
                              "blockType"
                            ],
                            "type": "object"
                          },
                          "dataCache": {
                            "properties": {
                              "updatedAt": {
                                "type": "number"
                              },
                              "blockedFrom": {
                                "type": "number"
                              },
                              "blockedUntil": {
                                "type": "number"
                              },
                              "blockReason": {
                                "type": "string",
                                "enum": [
                                  "admin_override",
                                  "limits_exceeded"
                                ]
                              }
                            },
                            "required": [
                              "updatedAt",
                              "blockReason"
                            ],
                            "type": "object"
                          },
                          "imageOptimizationTransformation": {
                            "properties": {
                              "updatedAt": {
                                "type": "number"
                              },
                              "blockedFrom": {
                                "type": "number"
                              },
                              "blockedUntil": {
                                "type": "number"
                              },
                              "blockReason": {
                                "type": "string",
                                "enum": [
                                  "admin_override",
                                  "limits_exceeded"
                                ]
                              }
                            },
                            "required": [
                              "updatedAt",
                              "blockReason"
                            ],
                            "type": "object"
                          },
                          "sourceImages": {
                            "properties": {
                              "updatedAt": {
                                "type": "number"
                              },
                              "blockedFrom": {
                                "type": "number"
                              },
                              "blockedUntil": {
                                "type": "number"
                              },
                              "blockReason": {
                                "type": "string",
                                "enum": [
                                  "admin_override",
                                  "limits_exceeded"
                                ]
                              }
                            },
                            "required": [
                              "updatedAt",
                              "blockReason"
                            ],
                            "type": "object"
                          },
                          "blob": {
                            "properties": {
                              "updatedAt": {
                                "type": "number"
                              },
                              "blockedFrom": {
                                "type": "number"
                              },
                              "blockedUntil": {
                                "type": "number"
                              },
                              "blockReason": {
                                "type": "string",
                                "enum": [
                                  "admin_override",
                                  "limits_exceeded"
                                ]
                              },
                              "overageReason": {
                                "type": "string",
                                "enum": [
                                  "analyticsUsage",
                                  "artifacts",
                                  "bandwidth",
                                  "blobTotalAdvancedRequests",
                                  "blobTotalAvgSizeInBytes",
                                  "blobTotalGetResponseObjectSizeInBytes",
                                  "blobTotalSimpleRequests",
                                  "connectDataTransfer",
                                  "dataCacheRead",
                                  "dataCacheWrite",
                                  "edgeConfigRead",
                                  "edgeConfigWrite",
                                  "edgeFunctionExecutionUnits",
                                  "edgeMiddlewareInvocations",
                                  "edgeRequestAdditionalCpuDuration",
                                  "edgeRequest",
                                  "elasticConcurrencyBuildSlots",
                                  "fastDataTransfer",
                                  "fastOriginTransfer",
                                  "fluidCpuDuration",
                                  "fluidDuration",
                                  "functionDuration",
                                  "functionInvocation",
                                  "imageOptimizationCacheRead",
                                  "imageOptimizationCacheWrite",
                                  "imageOptimizationTransformation",
                                  "logDrainsVolume",
                                  "monitoringMetric",
                                  "blobDataTransfer",
                                  "observabilityEvent",
                                  "onDemandConcurrencyMinutes",
                                  "runtimeCacheRead",
                                  "runtimeCacheWrite",
                                  "serverlessFunctionExecution",
                                  "sourceImages",
                                  "wafOwaspExcessBytes",
                                  "wafOwaspRequests",
                                  "wafRateLimitRequest",
                                  "webAnalyticsEvent"
                                ]
                              }
                            },
                            "required": [
                              "updatedAt",
                              "blockReason",
                              "overageReason"
                            ],
                            "type": "object"
                          },
                          "postgres": {
                            "properties": {
                              "updatedAt": {
                                "type": "number"
                              },
                              "blockedFrom": {
                                "type": "number"
                              },
                              "blockedUntil": {
                                "type": "number"
                              },
                              "blockReason": {
                                "type": "string",
                                "enum": [
                                  "admin_override",
                                  "limits_exceeded"
                                ]
                              },
                              "overageReason": {
                                "type": "string",
                                "enum": [
                                  "analyticsUsage",
                                  "artifacts",
                                  "bandwidth",
                                  "blobTotalAdvancedRequests",
                                  "blobTotalAvgSizeInBytes",
                                  "blobTotalGetResponseObjectSizeInBytes",
                                  "blobTotalSimpleRequests",
                                  "connectDataTransfer",
                                  "dataCacheRead",
                                  "dataCacheWrite",
                                  "edgeConfigRead",
                                  "edgeConfigWrite",
                                  "edgeFunctionExecutionUnits",
                                  "edgeMiddlewareInvocations",
                                  "edgeRequestAdditionalCpuDuration",
                                  "edgeRequest",
                                  "elasticConcurrencyBuildSlots",
                                  "fastDataTransfer",
                                  "fastOriginTransfer",
                                  "fluidCpuDuration",
                                  "fluidDuration",
                                  "functionDuration",
                                  "functionInvocation",
                                  "imageOptimizationCacheRead",
                                  "imageOptimizationCacheWrite",
                                  "imageOptimizationTransformation",
                                  "logDrainsVolume",
                                  "monitoringMetric",
                                  "blobDataTransfer",
                                  "observabilityEvent",
                                  "onDemandConcurrencyMinutes",
                                  "runtimeCacheRead",
                                  "runtimeCacheWrite",
                                  "serverlessFunctionExecution",
                                  "sourceImages",
                                  "wafOwaspExcessBytes",
                                  "wafOwaspRequests",
                                  "wafRateLimitRequest",
                                  "webAnalyticsEvent"
                                ]
                              }
                            },
                            "required": [
                              "updatedAt",
                              "blockReason",
                              "overageReason"
                            ],
                            "type": "object"
                          },
                          "redis": {
                            "properties": {
                              "updatedAt": {
                                "type": "number"
                              },
                              "blockedFrom": {
                                "type": "number"
                              },
                              "blockedUntil": {
                                "type": "number"
                              },
                              "blockReason": {
                                "type": "string",
                                "enum": [
                                  "admin_override",
                                  "limits_exceeded"
                                ]
                              },
                              "overageReason": {
                                "type": "string",
                                "enum": [
                                  "analyticsUsage",
                                  "artifacts",
                                  "bandwidth",
                                  "blobTotalAdvancedRequests",
                                  "blobTotalAvgSizeInBytes",
                                  "blobTotalGetResponseObjectSizeInBytes",
                                  "blobTotalSimpleRequests",
                                  "connectDataTransfer",
                                  "dataCacheRead",
                                  "dataCacheWrite",
                                  "edgeConfigRead",
                                  "edgeConfigWrite",
                                  "edgeFunctionExecutionUnits",
                                  "edgeMiddlewareInvocations",
                                  "edgeRequestAdditionalCpuDuration",
                                  "edgeRequest",
                                  "elasticConcurrencyBuildSlots",
                                  "fastDataTransfer",
                                  "fastOriginTransfer",
                                  "fluidCpuDuration",
                                  "fluidDuration",
                                  "functionDuration",
                                  "functionInvocation",
                                  "imageOptimizationCacheRead",
                                  "imageOptimizationCacheWrite",
                                  "imageOptimizationTransformation",
                                  "logDrainsVolume",
                                  "monitoringMetric",
                                  "blobDataTransfer",
                                  "observabilityEvent",
                                  "onDemandConcurrencyMinutes",
                                  "runtimeCacheRead",
                                  "runtimeCacheWrite",
                                  "serverlessFunctionExecution",
                                  "sourceImages",
                                  "wafOwaspExcessBytes",
                                  "wafOwaspRequests",
                                  "wafRateLimitRequest",
                                  "webAnalyticsEvent"
                                ]
                              }
                            },
                            "required": [
                              "updatedAt",
                              "blockReason",
                              "overageReason"
                            ],
                            "type": "object"
                          }
                        },
                        "type": "object",
                        "description": "Information about which features are blocked for a user. Blocks can be either soft (the user can still access the feature, but with a warning, e.g. prompting an upgrade) or hard (the user cannot access the feature at all)."
                      },
                      "defaultTeamId": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string",
                        "enum": [
                          "northstar"
                        ]
                      },
                      "northstarMigration": {
                        "properties": {
                          "teamId": {
                            "type": "string",
                            "description": "The ID of the team we created for this user."
                          },
                          "projects": {
                            "type": "number",
                            "description": "The number of projects migrated for this user."
                          },
                          "stores": {
                            "type": "number",
                            "description": "The number of stores migrated for this user."
                          },
                          "integrationConfigurations": {
                            "type": "number",
                            "description": "The number of integration configurations migrated for this user."
                          },
                          "integrationClients": {
                            "type": "number",
                            "description": "The number of integration clients migrated for this user."
                          },
                          "startTime": {
                            "type": "number",
                            "description": "The migration start time timestamp for this user."
                          },
                          "endTime": {
                            "type": "number",
                            "description": "The migration end time timestamp for this user."
                          }
                        },
                        "required": [
                          "teamId",
                          "projects",
                          "stores",
                          "integrationConfigurations",
                          "integrationClients",
                          "startTime",
                          "endTime"
                        ],
                        "type": "object",
                        "description": "An archive of information about the Northstar migration, derived from the old (deprecated) property, `northstarMigrationEvents`."
                      },
                      "opportunityId": {
                        "type": "string",
                        "description": "The salesforce opportunity ID that this user is linked to. This is used to automatically associate a team of the user's choosing with the opportunity."
                      },
                      "mfaConfiguration": {
                        "properties": {
                          "enabled": {
                            "type": "boolean"
                          },
                          "enabledAt": {
                            "type": "number"
                          },
                          "recoveryCodes": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "totp": {
                            "properties": {
                              "secret": {
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "secret",
                              "createdAt"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "enabled",
                          "recoveryCodes"
                        ],
                        "type": "object",
                        "description": "MFA configuration. When enabled, the user will be required to provide a second factor of authentication when logging in."
                      }
                    },
                    "required": [
                      "billing",
                      "blocked",
                      "createdAt",
                      "deploymentSecret",
                      "email",
                      "id",
                      "platformVersion",
                      "stagingPrefix",
                      "sysToken",
                      "type",
                      "username",
                      "updatedAt",
                      "version"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "userId",
                  "integrationId",
                  "configurationId",
                  "integrationSlug",
                  "newOwner"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "configurations": {
                    "items": {
                      "properties": {
                        "integrationId": {
                          "type": "string"
                        },
                        "configurationId": {
                          "type": "string"
                        },
                        "integrationSlug": {
                          "type": "string"
                        },
                        "integrationName": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "integrationId",
                        "configurationId",
                        "integrationSlug"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "ownerId": {
                    "type": "string"
                  }
                },
                "required": [
                  "configurations",
                  "ownerId"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "integrationId": {
                    "type": "string"
                  },
                  "configurationId": {
                    "type": "string"
                  },
                  "integrationSlug": {
                    "type": "string"
                  },
                  "integrationName": {
                    "type": "string"
                  },
                  "ownerId": {
                    "type": "string"
                  },
                  "billingPlanId": {
                    "type": "string"
                  },
                  "billingPlanName": {
                    "type": "string"
                  }
                },
                "required": [
                  "integrationId",
                  "configurationId",
                  "integrationSlug",
                  "integrationName",
                  "ownerId",
                  "billingPlanId"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "integrationId": {
                    "type": "string"
                  },
                  "configurationId": {
                    "type": "string"
                  },
                  "integrationSlug": {
                    "type": "string"
                  },
                  "integrationName": {
                    "type": "string"
                  },
                  "ownerId": {
                    "type": "string"
                  },
                  "projectIds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "integrationId",
                  "configurationId",
                  "integrationSlug",
                  "integrationName",
                  "ownerId"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "fromDeploymentId": {
                    "type": "string"
                  },
                  "toDeploymentId": {
                    "type": "string"
                  },
                  "projectName": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectId",
                  "fromDeploymentId",
                  "toDeploymentId",
                  "projectName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "integrationId": {
                    "type": "string"
                  },
                  "configurationId": {
                    "type": "string"
                  },
                  "integrationSlug": {
                    "type": "string"
                  },
                  "integrationName": {
                    "type": "string"
                  },
                  "ownerId": {
                    "type": "string"
                  },
                  "projectIds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "confirmedScopes": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "integrationId",
                  "configurationId",
                  "integrationSlug",
                  "integrationName",
                  "ownerId",
                  "confirmedScopes"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "userAgent": {
                    "properties": {
                      "browser": {
                        "properties": {
                          "name": {
                            "type": "string",
                            "enum": [
                              "iphone",
                              "ipad",
                              "ipod",
                              "chrome",
                              "firefox",
                              "mozilla",
                              "unknown"
                            ]
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "ua": {
                        "type": "string"
                      },
                      "program": {
                        "type": "string"
                      },
                      "os": {
                        "properties": {
                          "name": {
                            "type": "string",
                            "enum": [
                              "unknown",
                              "darwin",
                              "win32",
                              "win",
                              "windows",
                              "linux",
                              "freebsd",
                              "sunos",
                              "mac",
                              "ios",
                              "android",
                              "Mac OS",
                              "OS X"
                            ]
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "browser",
                      "ua",
                      "program",
                      "os"
                    ],
                    "type": "object"
                  },
                  "geolocation": {
                    "nullable": true,
                    "properties": {
                      "city": {
                        "properties": {
                          "names": {
                            "properties": {
                              "en": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "en"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "names"
                        ],
                        "type": "object"
                      },
                      "country": {
                        "properties": {
                          "names": {
                            "properties": {
                              "en": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "en"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "names"
                        ],
                        "type": "object"
                      },
                      "most_specific_subdivision": {
                        "properties": {
                          "names": {
                            "properties": {
                              "en": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "en"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "names"
                        ],
                        "type": "object"
                      },
                      "regionName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "country"
                    ],
                    "type": "object"
                  },
                  "viaGithub": {
                    "type": "boolean"
                  },
                  "viaGitlab": {
                    "type": "boolean"
                  },
                  "viaBitbucket": {
                    "type": "boolean"
                  },
                  "viaGoogle": {
                    "type": "boolean"
                  },
                  "viaSamlSso": {
                    "type": "boolean"
                  },
                  "viaPasskey": {
                    "type": "boolean"
                  },
                  "ssoType": {
                    "type": "string"
                  },
                  "env": {
                    "type": "string"
                  },
                  "os": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "required": [
                  "viaGithub",
                  "viaGitlab",
                  "viaBitbucket",
                  "viaGoogle",
                  "viaSamlSso",
                  "viaPasskey"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "logDrainUrl": {
                    "nullable": true,
                    "type": "string"
                  },
                  "integrationName": {
                    "type": "string"
                  }
                },
                "required": [
                  "logDrainUrl"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "logDrainUrl": {
                    "type": "string"
                  },
                  "integrationName": {
                    "type": "string"
                  }
                },
                "required": [
                  "logDrainUrl"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "drainUrl": {
                    "nullable": true,
                    "type": "string"
                  },
                  "integrationName": {
                    "type": "string"
                  }
                },
                "required": [
                  "drainUrl"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "toDeploymentId": {
                    "type": "string"
                  },
                  "projectName": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectId",
                  "toDeploymentId",
                  "projectName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "plan": {
                    "type": "string"
                  },
                  "removedUsers": {
                    "additionalProperties": {
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": [
                            "OWNER",
                            "MEMBER",
                            "DEVELOPER",
                            "SECURITY",
                            "BILLING",
                            "VIEWER",
                            "VIEWER_FOR_PLUS",
                            "CONTRIBUTOR"
                          ]
                        },
                        "confirmed": {
                          "type": "boolean"
                        },
                        "confirmedAt": {
                          "type": "number"
                        },
                        "joinedFrom": {
                          "properties": {
                            "origin": {
                              "type": "string",
                              "enum": [
                                "teams",
                                "saml",
                                "link",
                                "github",
                                "gitlab",
                                "bitbucket",
                                "mail",
                                "import",
                                "dsync",
                                "feedback",
                                "organization-teams"
                              ]
                            },
                            "commitId": {
                              "type": "string"
                            },
                            "repoId": {
                              "type": "string"
                            },
                            "repoPath": {
                              "type": "string"
                            },
                            "gitUserId": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                }
                              ]
                            },
                            "gitUserLogin": {
                              "type": "string"
                            },
                            "ssoUserId": {
                              "type": "string"
                            },
                            "ssoConnectedAt": {
                              "type": "number"
                            },
                            "idpUserId": {
                              "type": "string"
                            },
                            "dsyncUserId": {
                              "type": "string"
                            },
                            "dsyncConnectedAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "origin"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "role",
                        "confirmed"
                      ],
                      "type": "object"
                    },
                    "type": "object"
                  },
                  "priorPlan": {
                    "type": "string"
                  },
                  "isDowngrade": {
                    "type": "boolean"
                  },
                  "userAgent": {
                    "type": "string"
                  },
                  "isReactivate": {
                    "type": "boolean"
                  },
                  "isTrialUpgrade": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "plan"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "branch": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectName",
                  "branch"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "projectId": {
                    "type": "string"
                  },
                  "projectAnalytics": {
                    "nullable": true,
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "canceledAt": {
                        "nullable": true,
                        "type": "number"
                      },
                      "disabledAt": {
                        "type": "number"
                      },
                      "enabledAt": {
                        "type": "number"
                      },
                      "paidAt": {
                        "type": "number"
                      },
                      "sampleRatePercent": {
                        "nullable": true,
                        "type": "number"
                      },
                      "spendLimitInDollars": {
                        "nullable": true,
                        "type": "number"
                      }
                    },
                    "required": [
                      "id",
                      "disabledAt",
                      "enabledAt"
                    ],
                    "type": "object"
                  },
                  "prevProjectAnalytics": {
                    "nullable": true,
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "canceledAt": {
                        "nullable": true,
                        "type": "number"
                      },
                      "disabledAt": {
                        "type": "number"
                      },
                      "enabledAt": {
                        "type": "number"
                      },
                      "paidAt": {
                        "type": "number"
                      },
                      "sampleRatePercent": {
                        "nullable": true,
                        "type": "number"
                      },
                      "spendLimitInDollars": {
                        "nullable": true,
                        "type": "number"
                      }
                    },
                    "required": [
                      "id",
                      "disabledAt",
                      "enabledAt"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "projectId",
                  "projectAnalytics",
                  "prevProjectAnalytics"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "projectId": {
                    "type": "string"
                  },
                  "projectAnalytics": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "prevProjectAnalytics": {
                    "nullable": true,
                    "additionalProperties": true,
                    "type": "object"
                  }
                },
                "required": [
                  "projectId"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "projectId": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectId"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "ssoProtection": {
                    "nullable": true,
                    "oneOf": [
                      {
                        "properties": {
                          "deploymentType": {
                            "type": "string",
                            "enum": [
                              "all",
                              "preview",
                              "prod_deployment_urls_and_all_previews",
                              "all_except_custom_domains"
                            ]
                          }
                        },
                        "required": [
                          "deploymentType"
                        ],
                        "type": "object"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "all",
                          "preview",
                          "prod_deployment_urls_and_all_previews",
                          "all_except_custom_domains"
                        ]
                      }
                    ]
                  },
                  "oldSsoProtection": {
                    "nullable": true,
                    "oneOf": [
                      {
                        "properties": {
                          "deploymentType": {
                            "type": "string",
                            "enum": [
                              "all",
                              "preview",
                              "prod_deployment_urls_and_all_previews",
                              "all_except_custom_domains"
                            ]
                          }
                        },
                        "required": [
                          "deploymentType"
                        ],
                        "type": "object"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "all",
                          "preview",
                          "prod_deployment_urls_and_all_previews",
                          "all_except_custom_domains"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "projectName",
                  "ssoProtection",
                  "oldSsoProtection"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "passwordProtection": {
                    "nullable": true,
                    "oneOf": [
                      {
                        "properties": {
                          "deploymentType": {
                            "type": "string",
                            "enum": [
                              "all",
                              "preview",
                              "prod_deployment_urls_and_all_previews",
                              "all_except_custom_domains"
                            ]
                          }
                        },
                        "required": [
                          "deploymentType"
                        ],
                        "type": "object"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "all",
                          "preview",
                          "prod_deployment_urls_and_all_previews",
                          "all_except_custom_domains"
                        ]
                      }
                    ]
                  },
                  "oldPasswordProtection": {
                    "nullable": true,
                    "oneOf": [
                      {
                        "properties": {
                          "deploymentType": {
                            "type": "string",
                            "enum": [
                              "all",
                              "preview",
                              "prod_deployment_urls_and_all_previews",
                              "all_except_custom_domains"
                            ]
                          }
                        },
                        "required": [
                          "deploymentType"
                        ],
                        "type": "object"
                      },
                      {
                        "type": "string",
                        "enum": [
                          "all",
                          "preview",
                          "prod_deployment_urls_and_all_previews",
                          "all_except_custom_domains"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "projectName",
                  "passwordProtection",
                  "oldPasswordProtection"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "trustedIps": {
                    "nullable": true,
                    "type": "string",
                    "enum": [
                      "all",
                      "preview",
                      "prod_deployment_urls_and_all_previews",
                      "all_except_custom_domains",
                      "production"
                    ]
                  },
                  "oldTrustedIps": {
                    "nullable": true,
                    "type": "string",
                    "enum": [
                      "all",
                      "preview",
                      "prod_deployment_urls_and_all_previews",
                      "all_except_custom_domains",
                      "production"
                    ]
                  },
                  "addedAddresses": {
                    "nullable": true,
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "removedAddresses": {
                    "nullable": true,
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "projectName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "optionsAllowlist": {
                    "nullable": true,
                    "properties": {
                      "paths": {
                        "items": {
                          "properties": {
                            "value": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "value"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "paths"
                    ],
                    "type": "object"
                  },
                  "oldOptionsAllowlist": {
                    "nullable": true,
                    "properties": {
                      "paths": {
                        "items": {
                          "properties": {
                            "value": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "value"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "paths"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "projectName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "action": {
                    "type": "string",
                    "enum": [
                      "enabled",
                      "disabled",
                      "regenerated"
                    ]
                  }
                },
                "required": [
                  "projectName",
                  "action"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "ownerId": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "ownerId"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "team": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  },
                  "project": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "oldConnectConfigurations": {
                        "nullable": true,
                        "items": {
                          "properties": {
                            "envId": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "enum": [
                                    "preview",
                                    "production"
                                  ]
                                }
                              ]
                            },
                            "connectConfigurationId": {
                              "type": "string"
                            },
                            "dc": {
                              "type": "string"
                            },
                            "passive": {
                              "type": "boolean"
                            },
                            "buildsEnabled": {
                              "type": "boolean"
                            },
                            "aws": {
                              "properties": {
                                "subnetIds": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "securityGroupId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "subnetIds",
                                "securityGroupId"
                              ],
                              "type": "object"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "updatedAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "envId",
                            "connectConfigurationId",
                            "passive",
                            "buildsEnabled",
                            "createdAt",
                            "updatedAt"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "newConnectConfigurations": {
                        "nullable": true,
                        "items": {
                          "properties": {
                            "envId": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "string",
                                  "enum": [
                                    "preview",
                                    "production"
                                  ]
                                }
                              ]
                            },
                            "connectConfigurationId": {
                              "type": "string"
                            },
                            "dc": {
                              "type": "string"
                            },
                            "passive": {
                              "type": "boolean"
                            },
                            "buildsEnabled": {
                              "type": "boolean"
                            },
                            "aws": {
                              "properties": {
                                "subnetIds": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "securityGroupId": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "subnetIds",
                                "securityGroupId"
                              ],
                              "type": "object"
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "updatedAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "envId",
                            "connectConfigurationId",
                            "passive",
                            "buildsEnabled",
                            "createdAt",
                            "updatedAt"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "id",
                      "oldConnectConfigurations",
                      "newConnectConfigurations"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "team",
                  "project"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectId": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectId"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "source": {
                    "type": "string"
                  },
                  "projectId": {
                    "type": "string"
                  }
                },
                "required": [
                  "source",
                  "projectId"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "projectName": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectId",
                  "projectName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "projectName": {
                    "type": "string"
                  },
                  "newTargetPercentage": {
                    "type": "number"
                  }
                },
                "required": [
                  "projectId",
                  "projectName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "gitProvider": {
                    "type": "string"
                  },
                  "gitProviderGroupDescriptor": {
                    "type": "string"
                  },
                  "gitScope": {
                    "type": "string"
                  }
                },
                "required": [
                  "gitProvider",
                  "gitProviderGroupDescriptor",
                  "gitScope"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "instances": {
                    "type": "number"
                  },
                  "url": {
                    "type": "string"
                  }
                },
                "required": [
                  "instances",
                  "url"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "verified": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "email",
                  "verified"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "email": {
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "team": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "previousRule": {
                    "properties": {
                      "email": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "email"
                    ],
                    "type": "object"
                  },
                  "nextRule": {
                    "properties": {
                      "email": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "email"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "team"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "team": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "previousRule": {
                    "properties": {
                      "email": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "email"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "team",
                  "previousRule"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "uid": {
                    "type": "string"
                  },
                  "name": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      }
                    ]
                  }
                },
                "required": [
                  "uid",
                  "name"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "oldName": {
                    "type": "string"
                  },
                  "newName": {
                    "type": "string"
                  },
                  "uid": {
                    "type": "string"
                  }
                },
                "required": [
                  "oldName",
                  "newName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "bio": {
                    "type": "string"
                  }
                },
                "required": [
                  "bio"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "scalingRules": {
                    "additionalProperties": {
                      "properties": {
                        "min": {
                          "type": "number"
                        },
                        "max": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "min",
                        "max"
                      ],
                      "type": "object"
                    },
                    "type": "object"
                  },
                  "min": {
                    "type": "number"
                  },
                  "max": {
                    "type": "number"
                  },
                  "url": {
                    "type": "string"
                  }
                },
                "required": [
                  "scalingRules",
                  "min",
                  "max",
                  "url"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "webhookUrl": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "budget": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "fixed"
                        ],
                        "description": "The budget type"
                      },
                      "fixedBudget": {
                        "type": "number",
                        "description": "Budget amount (USD / dollars)"
                      },
                      "previousSpend": {
                        "items": {
                          "type": "number"
                        },
                        "type": "array",
                        "description": "Array of the last 3 months of spend data"
                      },
                      "notifiedAt": {
                        "items": {
                          "type": "number"
                        },
                        "type": "array",
                        "description": "Array of 50, 75, 100 to keep track of notifications sent out"
                      },
                      "webhookId": {
                        "type": "string",
                        "description": "Webhook id that corresponds to a webhook in Cosmos webhook collection"
                      },
                      "webhookNotified": {
                        "type": "boolean",
                        "description": "Keep track if the webhook has been called for the month"
                      },
                      "createdAt": {
                        "type": "number",
                        "description": "Date time when budget is created"
                      },
                      "updatedAt": {
                        "type": "number",
                        "description": "Date time when budget is updated last"
                      },
                      "isActive": {
                        "type": "boolean",
                        "description": "Is the budget currently active for a customer"
                      },
                      "pauseProjects": {
                        "type": "boolean",
                        "description": "Should all projects be paused if budget is exceeded"
                      },
                      "pricingPlan": {
                        "type": "string",
                        "enum": [
                          "plus",
                          "legacy",
                          "unbundled"
                        ],
                        "description": "The acive pricing plan the team is billed with"
                      },
                      "teamId": {
                        "type": "string",
                        "description": "Partition key"
                      },
                      "id": {
                        "type": "string",
                        "description": "Sort key that needs to be unique per teamId"
                      }
                    },
                    "required": [
                      "type",
                      "fixedBudget",
                      "previousSpend",
                      "notifiedAt",
                      "createdAt",
                      "isActive",
                      "teamId",
                      "id"
                    ],
                    "type": "object",
                    "description": "Represents a budget for tracking and notifying teams on their spending."
                  }
                },
                "required": [
                  "budget"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "budget": {
                    "properties": {
                      "budgetItem": {
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "fixed"
                            ],
                            "description": "The budget type"
                          },
                          "fixedBudget": {
                            "type": "number",
                            "description": "Budget amount (USD / dollars)"
                          },
                          "previousSpend": {
                            "items": {
                              "type": "number"
                            },
                            "type": "array",
                            "description": "Array of the last 3 months of spend data"
                          },
                          "notifiedAt": {
                            "items": {
                              "type": "number"
                            },
                            "type": "array",
                            "description": "Array of 50, 75, 100 to keep track of notifications sent out"
                          },
                          "webhookId": {
                            "type": "string",
                            "description": "Webhook id that corresponds to a webhook in Cosmos webhook collection"
                          },
                          "webhookNotified": {
                            "type": "boolean",
                            "description": "Keep track if the webhook has been called for the month"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "Date time when budget is created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "Date time when budget is updated last"
                          },
                          "isActive": {
                            "type": "boolean",
                            "description": "Is the budget currently active for a customer"
                          },
                          "pauseProjects": {
                            "type": "boolean",
                            "description": "Should all projects be paused if budget is exceeded"
                          },
                          "pricingPlan": {
                            "type": "string",
                            "enum": [
                              "plus",
                              "legacy",
                              "unbundled"
                            ],
                            "description": "The acive pricing plan the team is billed with"
                          },
                          "teamId": {
                            "type": "string",
                            "description": "Partition key"
                          },
                          "id": {
                            "type": "string",
                            "description": "Sort key that needs to be unique per teamId"
                          }
                        },
                        "required": [
                          "type",
                          "fixedBudget",
                          "previousSpend",
                          "notifiedAt",
                          "createdAt",
                          "isActive",
                          "teamId",
                          "id"
                        ],
                        "type": "object",
                        "description": "Represents a budget for tracking and notifying teams on their spending."
                      }
                    },
                    "required": [
                      "budgetItem"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "budget"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "computeUnitsMax": {
                    "type": "number"
                  },
                  "computeUnitsMin": {
                    "type": "number"
                  },
                  "suspendTimeoutSeconds": {
                    "type": "number"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "redis",
                      "postgres",
                      "edge-config",
                      "blob",
                      "integration"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "storeType": {
                    "type": "string",
                    "enum": [
                      "redis",
                      "postgres"
                    ]
                  }
                },
                "required": [
                  "storeType"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "store": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "id"
                    ],
                    "type": "object"
                  },
                  "ownerId": {
                    "type": "string"
                  }
                },
                "required": [
                  "store"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "slug": {
                    "type": "string"
                  }
                },
                "required": [
                  "slug"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "slug": {
                    "type": "string"
                  },
                  "teamId": {
                    "type": "string"
                  },
                  "by": {
                    "type": "string"
                  },
                  "reasons": {
                    "items": {
                      "properties": {
                        "slug": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "slug",
                        "description"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "slug",
                  "teamId",
                  "by"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "directoryType": {
                    "type": "string"
                  },
                  "ssoType": {
                    "type": "string"
                  },
                  "invitedUser": {
                    "properties": {
                      "username": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "username",
                      "email"
                    ],
                    "type": "object"
                  },
                  "invitedEmail": {
                    "type": "string"
                  },
                  "invitationRole": {
                    "type": "string"
                  },
                  "entitlements": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "invitedUid": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "deletedUser": {
                    "properties": {
                      "username": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "username",
                      "email"
                    ],
                    "type": "object"
                  },
                  "deletedUid": {
                    "type": "string"
                  },
                  "githubUsername": {
                    "nullable": true,
                    "type": "string"
                  },
                  "gitlabUsername": {
                    "nullable": true,
                    "type": "string"
                  },
                  "bitbucketUsername": {
                    "nullable": true,
                    "type": "string"
                  },
                  "directoryType": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "role": {
                    "type": "string"
                  },
                  "uid": {
                    "type": "string"
                  },
                  "origin": {
                    "type": "string"
                  },
                  "teamRoles": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "teamPermissions": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "entitlements": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "uid"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "directoryType": {
                    "type": "string"
                  },
                  "updatedUser": {
                    "properties": {
                      "username": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "username",
                      "email"
                    ],
                    "type": "object"
                  },
                  "role": {
                    "type": "string"
                  },
                  "previousRole": {
                    "type": "string"
                  },
                  "updatedUid": {
                    "type": "string"
                  }
                },
                "required": [
                  "previousRole"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "entitlement": {
                    "type": "string"
                  },
                  "user": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "username"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "entitlement",
                  "user"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "entitlement": {
                    "type": "string"
                  },
                  "user": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "username"
                    ],
                    "type": "object"
                  },
                  "previousCanceledAt": {
                    "type": "string"
                  }
                },
                "required": [
                  "entitlement",
                  "user"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "enforced": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "enforced"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "slug": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "remoteCaching": {
                    "properties": {
                      "enabled": {
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "description": "Represents configuration for remote caching"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "previous": {
                    "properties": {
                      "enabled": {
                        "type": "boolean"
                      },
                      "totpVerified": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "enabled",
                      "totpVerified"
                    ],
                    "type": "object"
                  },
                  "next": {
                    "properties": {
                      "enabled": {
                        "type": "boolean"
                      },
                      "totpVerified": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "enabled",
                      "totpVerified"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "previous",
                  "next"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "totpVerified": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "enabled",
                  "totpVerified"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "mfaEnabled": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "mfaEnabled"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "prevEmail": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "prevEmail"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "username": {
                    "type": "string"
                  }
                },
                "required": [
                  "username"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "price": {
                    "type": "number"
                  },
                  "currency": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "previewDeploymentSuffix": {
                    "nullable": true,
                    "type": "string"
                  },
                  "previousPreviewDeploymentSuffix": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "price": {
                    "type": "number"
                  },
                  "currency": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "teamName": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  },
                  "gitUsername": {
                    "type": "string"
                  },
                  "githubUsername": {
                    "nullable": true,
                    "type": "string"
                  },
                  "gitlabUsername": {
                    "nullable": true,
                    "type": "string"
                  },
                  "bitbucketUsername": {
                    "nullable": true,
                    "type": "string"
                  },
                  "updatedUid": {
                    "type": "string"
                  },
                  "teamId": {
                    "type": "string"
                  }
                },
                "required": [
                  "teamName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "teamName": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  },
                  "gitUsername": {
                    "nullable": true,
                    "type": "string"
                  },
                  "githubUsername": {
                    "nullable": true,
                    "type": "string"
                  },
                  "gitlabUsername": {
                    "nullable": true,
                    "type": "string"
                  },
                  "bitbucketUsername": {
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "teamName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "requestedTeamName": {
                    "type": "string"
                  },
                  "requestedUserName": {
                    "type": "string"
                  },
                  "gitUsername": {
                    "type": "string"
                  },
                  "githubUsername": {
                    "type": "string"
                  },
                  "gitlabUsername": {
                    "type": "string"
                  },
                  "bitbucketUsername": {
                    "type": "string"
                  }
                },
                "required": [
                  "requestedTeamName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "projectName": {
                    "type": "string"
                  },
                  "originAccountName": {
                    "type": "string"
                  },
                  "destinationAccountName": {
                    "type": "string"
                  },
                  "destinationAccountId": {
                    "type": "string"
                  },
                  "transferId": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectId",
                  "projectName",
                  "originAccountName",
                  "destinationAccountName",
                  "destinationAccountId"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "destinationAccountName": {
                    "nullable": true,
                    "type": "string"
                  },
                  "transferId": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectName",
                  "destinationAccountName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "previousProjectName": {
                    "type": "string"
                  },
                  "newProjectName": {
                    "type": "string"
                  },
                  "destinationAccountName": {
                    "type": "string"
                  },
                  "transferId": {
                    "type": "string"
                  }
                },
                "required": [
                  "previousProjectName",
                  "newProjectName",
                  "destinationAccountName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "previousProjectName": {
                    "type": "string"
                  },
                  "newProjectName": {
                    "type": "string"
                  },
                  "originAccountName": {
                    "type": "string"
                  },
                  "transferId": {
                    "type": "string"
                  }
                },
                "required": [
                  "previousProjectName",
                  "newProjectName",
                  "originAccountName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "project": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "projectMembership": {
                    "nullable": true,
                    "properties": {
                      "role": {
                        "type": "string",
                        "enum": [
                          "ADMIN",
                          "PROJECT_DEVELOPER",
                          "PROJECT_VIEWER"
                        ]
                      },
                      "uid": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "number"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "role",
                      "uid",
                      "createdAt"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "project",
                  "projectMembership"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "project": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "removedMembership": {
                    "properties": {
                      "role": {
                        "type": "string",
                        "enum": [
                          "ADMIN",
                          "PROJECT_DEVELOPER",
                          "PROJECT_VIEWER"
                        ]
                      },
                      "uid": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "number"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "role",
                      "uid",
                      "createdAt"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "project",
                  "removedMembership"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "project": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  },
                  "projectMembership": {
                    "properties": {
                      "role": {
                        "type": "string",
                        "enum": [
                          "ADMIN",
                          "PROJECT_DEVELOPER",
                          "PROJECT_VIEWER"
                        ]
                      },
                      "uid": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "number"
                      },
                      "username": {
                        "type": "string"
                      },
                      "previousRole": {
                        "type": "string",
                        "enum": [
                          "ADMIN",
                          "PROJECT_DEVELOPER",
                          "PROJECT_VIEWER"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "project",
                  "projectMembership"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "project": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "role": {
                        "type": "string",
                        "enum": [
                          "ADMIN",
                          "PROJECT_DEVELOPER",
                          "PROJECT_VIEWER"
                        ]
                      },
                      "invitedUserName": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "invitedUserId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "role",
                      "invitedUserName"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "project"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "target": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectName",
                  "tags"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "urls": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "projectName",
                  "urls"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "edgeConfigId": {
                    "type": "string"
                  },
                  "edgeConfigSlug": {
                    "type": "string"
                  },
                  "edgeConfigDigest": {
                    "type": "string"
                  }
                },
                "required": [
                  "edgeConfigId",
                  "edgeConfigSlug",
                  "edgeConfigDigest"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "edgeConfigId": {
                    "type": "string"
                  },
                  "edgeConfigSlug": {
                    "type": "string"
                  },
                  "edgeConfigTokenId": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  }
                },
                "required": [
                  "edgeConfigId",
                  "edgeConfigSlug",
                  "edgeConfigTokenId",
                  "label"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "edgeConfigId": {
                    "type": "string"
                  },
                  "edgeConfigSlug": {
                    "type": "string"
                  },
                  "edgeConfigTokenIds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "description": "ids of deleted tokens"
                  }
                },
                "required": [
                  "edgeConfigId",
                  "edgeConfigSlug",
                  "edgeConfigTokenIds"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": [
                      "enable",
                      "disable"
                    ]
                  }
                },
                "required": [
                  "action"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "slug": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "slug",
                  "name"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "slug": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "fallbackEnvironment": {
                    "type": "string"
                  },
                  "prev": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      },
                      "fallbackEnvironment": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "slug",
                      "fallbackEnvironment"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "id",
                  "prev"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "project": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  },
                  "group": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "slug",
                      "name"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "project",
                  "group"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "project": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "microfrontends": {
                        "oneOf": [
                          {
                            "properties": {
                              "updatedAt": {
                                "type": "number",
                                "description": "Timestamp when the microfrontends settings were last updated."
                              },
                              "groupIds": {
                                "items": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                                "description": "The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together."
                              },
                              "enabled": {
                                "type": "boolean",
                                "description": "Whether microfrontends are enabled for this project."
                              },
                              "isDefaultApp": {
                                "type": "boolean",
                                "description": "Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends."
                              },
                              "defaultRoute": {
                                "type": "string",
                                "description": "A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`"
                              },
                              "routeObservabilityToThisProject": {
                                "type": "boolean",
                                "description": "Whether observability data should be routed to this microfrontend project or a root project."
                              }
                            },
                            "required": [
                              "updatedAt",
                              "groupIds",
                              "enabled"
                            ],
                            "type": "object"
                          },
                          {
                            "properties": {
                              "updatedAt": {
                                "type": "number"
                              },
                              "groupIds": {
                                "items": {
                                  "oneOf": []
                                },
                                "maxItems": 0,
                                "minItems": 0,
                                "type": "array"
                              },
                              "enabled": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "updatedAt",
                              "groupIds",
                              "enabled"
                            ],
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  },
                  "prev": {
                    "properties": {
                      "project": {
                        "properties": {
                          "microfrontends": {
                            "oneOf": [
                              {
                                "properties": {
                                  "updatedAt": {
                                    "type": "number",
                                    "description": "Timestamp when the microfrontends settings were last updated."
                                  },
                                  "groupIds": {
                                    "items": {
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ]
                                    },
                                    "maxItems": 2,
                                    "minItems": 2,
                                    "type": "array",
                                    "description": "The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together."
                                  },
                                  "enabled": {
                                    "type": "boolean",
                                    "description": "Whether microfrontends are enabled for this project."
                                  },
                                  "isDefaultApp": {
                                    "type": "boolean",
                                    "description": "Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends."
                                  },
                                  "defaultRoute": {
                                    "type": "string",
                                    "description": "A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`"
                                  },
                                  "routeObservabilityToThisProject": {
                                    "type": "boolean",
                                    "description": "Whether observability data should be routed to this microfrontend project or a root project."
                                  }
                                },
                                "required": [
                                  "updatedAt",
                                  "groupIds",
                                  "enabled"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "updatedAt": {
                                    "type": "number"
                                  },
                                  "groupIds": {
                                    "items": {
                                      "oneOf": []
                                    },
                                    "maxItems": 0,
                                    "minItems": 0,
                                    "type": "array"
                                  },
                                  "enabled": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "updatedAt",
                                  "groupIds",
                                  "enabled"
                                ],
                                "type": "object"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [
                      "project"
                    ],
                    "type": "object"
                  },
                  "group": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "slug": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "slug",
                      "name"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "project",
                  "prev",
                  "group"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "projectName": {
                    "type": "string"
                  },
                  "projectWebAnalytics": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "disabledAt": {
                        "type": "number"
                      },
                      "canceledAt": {
                        "type": "number"
                      },
                      "enabledAt": {
                        "type": "number"
                      },
                      "hasData": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "prevProjectWebAnalytics": {
                    "nullable": true,
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "disabledAt": {
                        "type": "number"
                      },
                      "canceledAt": {
                        "type": "number"
                      },
                      "enabledAt": {
                        "type": "number"
                      },
                      "hasData": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "projectId",
                  "projectName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "tier": {
                    "type": "string",
                    "enum": [
                      "pro",
                      "plus"
                    ]
                  }
                },
                "required": [
                  "tier"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "oldName": {
                    "type": "string"
                  },
                  "newName": {
                    "type": "string"
                  }
                },
                "required": [
                  "oldName",
                  "newName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "appName": {
                    "type": "string"
                  },
                  "scopes": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "appName",
                  "scopes"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "appName": {
                    "type": "string"
                  },
                  "nextScopes": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "appName",
                  "nextScopes"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "appName": {
                    "type": "string"
                  }
                },
                "required": [
                  "appName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "appName": {
                    "type": "string"
                  },
                  "appId": {
                    "type": "string"
                  }
                },
                "required": [
                  "appName",
                  "appId"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "appName": {
                    "type": "string"
                  },
                  "appId": {
                    "type": "string"
                  }
                },
                "required": [
                  "appName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "appName": {
                    "type": "string"
                  },
                  "appId": {
                    "type": "string"
                  },
                  "installationId": {
                    "type": "string"
                  }
                },
                "required": [
                  "appName"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "team": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  },
                  "configuration": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "peering": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "region": {
                        "type": "string"
                      },
                      "vpcId": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "accountId",
                      "region",
                      "vpcId"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "team",
                  "configuration",
                  "peering"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "team": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  },
                  "configuration": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "peering": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "team",
                  "configuration",
                  "peering"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "team": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "type": "object"
                  },
                  "configuration": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "peering": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "type": "object"
                  },
                  "newName": {
                    "type": "string"
                  }
                },
                "required": [
                  "team",
                  "configuration",
                  "peering"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              },
              {
                "properties": {
                  "grantType": {
                    "type": "string",
                    "enum": [
                      "authorization_code",
                      "refresh_token",
                      "urn:ietf:params:oauth:grant-type:device_code",
                      "client_credentials"
                    ]
                  },
                  "appName": {
                    "type": "string"
                  },
                  "atTTL": {
                    "type": "number",
                    "description": "access_token TTL"
                  },
                  "rtTTL": {
                    "type": "number",
                    "description": "refresh_token TTL"
                  },
                  "scope": {
                    "type": "string"
                  },
                  "authMethod": {
                    "type": "string",
                    "enum": [
                      "email",
                      "saml",
                      "app",
                      "github",
                      "gitlab",
                      "bitbucket",
                      "manual",
                      "passkey",
                      "otp",
                      "sms",
                      "invite",
                      "google"
                    ]
                  }
                },
                "required": [
                  "grantType",
                  "appName",
                  "atTTL",
                  "scope",
                  "authMethod"
                ],
                "type": "object",
                "description": "The payload of the event, if requested."
              }
            ]
          }
        },
        "required": [
          "id",
          "text",
          "entities",
          "createdAt",
          "userId",
          "principalId"
        ],
        "type": "object",
        "description": "Array of events generated by the User."
      },
      "Team": {
        "properties": {
          "connect": {
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "creatorId": {
            "type": "string",
            "description": "The ID of the user who created the Team.",
            "example": "R6efeCJQ2HKXywuasPDc0fOWB"
          },
          "updatedAt": {
            "type": "number",
            "description": "Timestamp (in milliseconds) of when the Team was last updated.",
            "example": 1611796915677
          },
          "emailDomain": {
            "nullable": true,
            "type": "string",
            "description": "Hostname that'll be matched with emails on sign-up to automatically join the Team.",
            "example": "example.com"
          },
          "saml": {
            "properties": {
              "connection": {
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The Identity Provider \"type\", for example Okta.",
                    "example": "OktaSAML"
                  },
                  "status": {
                    "type": "string",
                    "description": "Current status of the connection.",
                    "example": "linked"
                  },
                  "state": {
                    "type": "string",
                    "description": "Current state of the connection.",
                    "example": "active"
                  },
                  "connectedAt": {
                    "type": "number",
                    "description": "Timestamp (in milliseconds) of when the configuration was connected.",
                    "example": 1611796915677
                  },
                  "lastReceivedWebhookEvent": {
                    "type": "number",
                    "description": "Timestamp (in milliseconds) of when the last webhook event was received from WorkOS.",
                    "example": 1611796915677
                  }
                },
                "required": [
                  "type",
                  "status",
                  "state",
                  "connectedAt"
                ],
                "type": "object",
                "description": "Information for the SAML Single Sign-On configuration."
              },
              "directory": {
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The Identity Provider \"type\", for example Okta.",
                    "example": "OktaSAML"
                  },
                  "state": {
                    "type": "string",
                    "description": "Current state of the connection.",
                    "example": "active"
                  },
                  "connectedAt": {
                    "type": "number",
                    "description": "Timestamp (in milliseconds) of when the configuration was connected.",
                    "example": 1611796915677
                  },
                  "lastReceivedWebhookEvent": {
                    "type": "number",
                    "description": "Timestamp (in milliseconds) of when the last webhook event was received from WorkOS.",
                    "example": 1611796915677
                  }
                },
                "required": [
                  "type",
                  "state",
                  "connectedAt"
                ],
                "type": "object",
                "description": "Information for the Directory Sync configuration."
              },
              "enforced": {
                "type": "boolean",
                "description": "When `true`, interactions with the Team **must** be done with an authentication token that has been authenticated with the Team's SAML Single Sign-On provider."
              },
              "defaultRedirectUri": {
                "type": "string",
                "enum": [
                  "vercel.com",
                  "v0.dev",
                  "v0.app"
                ],
                "description": "The default redirect URI to use after successful SAML authentication."
              },
              "roles": {
                "additionalProperties": {
                  "oneOf": [
                    {
                      "properties": {
                        "accessGroupId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "accessGroupId"
                      ],
                      "type": "object",
                      "description": "When \"Directory Sync\" is configured, this object contains a mapping of which Directory Group (by ID) should be assigned to which Vercel Team \"role\"."
                    },
                    {
                      "type": "string",
                      "enum": [
                        "OWNER",
                        "MEMBER",
                        "DEVELOPER",
                        "SECURITY",
                        "BILLING",
                        "VIEWER",
                        "VIEWER_FOR_PLUS",
                        "CONTRIBUTOR"
                      ]
                    }
                  ]
                },
                "type": "object",
                "description": "When \"Directory Sync\" is configured, this object contains a mapping of which Directory Group (by ID) should be assigned to which Vercel Team \"role\"."
              }
            },
            "required": [
              "enforced"
            ],
            "type": "object",
            "description": "When \"Single Sign-On (SAML)\" is configured, this object contains information regarding the configuration of the Identity Provider (IdP)."
          },
          "inviteCode": {
            "type": "string",
            "description": "Code that can be used to join this Team. Only visible to Team owners.",
            "example": "hasihf9e89"
          },
          "description": {
            "nullable": true,
            "type": "string",
            "description": "A short description of the Team.",
            "example": "Our mission is to make cloud computing accessible to everyone."
          },
          "defaultRoles": {
            "properties": {
              "teamRoles": {
                "items": {
                  "type": "string",
                  "enum": [
                    "OWNER",
                    "MEMBER",
                    "DEVELOPER",
                    "SECURITY",
                    "BILLING",
                    "VIEWER",
                    "VIEWER_FOR_PLUS",
                    "CONTRIBUTOR"
                  ]
                },
                "type": "array"
              },
              "teamPermissions": {
                "items": {
                  "type": "string",
                  "enum": [
                    "IntegrationManager",
                    "CreateProject",
                    "FullProductionDeployment",
                    "UsageViewer",
                    "EnvVariableManager",
                    "EnvironmentManager",
                    "V0Builder",
                    "V0Chatter",
                    "V0Viewer"
                  ]
                },
                "type": "array"
              }
            },
            "type": "object",
            "description": "Default roles for the team."
          },
          "stagingPrefix": {
            "type": "string",
            "description": "The prefix that is prepended to automatic aliases."
          },
          "resourceConfig": {
            "properties": {
              "concurrentBuilds": {
                "type": "number",
                "description": "The total amount of concurrent builds that can be used."
              },
              "elasticConcurrencyEnabled": {
                "type": "boolean",
                "description": "Whether every build for this team / user has elastic concurrency enabled automatically."
              },
              "edgeConfigSize": {
                "type": "number",
                "description": "The maximum size in kilobytes of an Edge Config. Only specified if a custom limit is set."
              },
              "edgeConfigs": {
                "type": "number",
                "description": "The maximum number of edge configs an account can create."
              },
              "kvDatabases": {
                "type": "number",
                "description": "The maximum number of kv databases an account can create."
              },
              "blobStores": {
                "type": "number",
                "description": "The maximum number of blob stores an account can create."
              },
              "postgresDatabases": {
                "type": "number",
                "description": "The maximum number of postgres databases an account can create."
              },
              "buildEntitlements": {
                "properties": {
                  "enhancedBuilds": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "previewDeploymentSuffix": {
            "nullable": true,
            "type": "string",
            "description": "The hostname that is current set as preview deployment suffix.",
            "example": "example.dev"
          },
          "platform": {
            "type": "boolean",
            "description": "Whether the team is a platform team.",
            "example": true
          },
          "disableHardAutoBlocks": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "remoteCaching": {
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            },
            "type": "object",
            "description": "Is remote caching enabled for this team"
          },
          "defaultDeploymentProtection": {
            "properties": {
              "passwordProtection": {
                "properties": {
                  "deploymentType": {
                    "type": "string"
                  }
                },
                "required": [
                  "deploymentType"
                ],
                "type": "object"
              },
              "ssoProtection": {
                "properties": {
                  "deploymentType": {
                    "type": "string"
                  }
                },
                "required": [
                  "deploymentType"
                ],
                "type": "object"
              }
            },
            "type": "object",
            "description": "Default deployment protection for this team"
          },
          "defaultExpirationSettings": {
            "properties": {
              "expirationDays": {
                "type": "number",
                "description": "Number of days to keep non-production deployments (mostly preview deployments) before soft deletion."
              },
              "expirationDaysProduction": {
                "type": "number",
                "description": "Number of days to keep production deployments before soft deletion."
              },
              "expirationDaysCanceled": {
                "type": "number",
                "description": "Number of days to keep canceled deployments before soft deletion."
              },
              "expirationDaysErrored": {
                "type": "number",
                "description": "Number of days to keep errored deployments before soft deletion."
              },
              "deploymentsToKeep": {
                "type": "number",
                "description": "Minimum number of production deployments to keep for this project, even if they are over the production expiration limit."
              }
            },
            "type": "object",
            "description": "Default deployment expiration settings for this team"
          },
          "enablePreviewFeedback": {
            "nullable": true,
            "type": "string",
            "enum": [
              "default",
              "on",
              "off",
              "on-force",
              "off-force",
              "default-force"
            ],
            "description": "Whether toolbar is enabled on preview deployments"
          },
          "enableProductionFeedback": {
            "nullable": true,
            "type": "string",
            "enum": [
              "default",
              "on",
              "off",
              "on-force",
              "off-force",
              "default-force"
            ],
            "description": "Whether toolbar is enabled on production deployments"
          },
          "sensitiveEnvironmentVariablePolicy": {
            "nullable": true,
            "type": "string",
            "enum": [
              "default",
              "on",
              "off"
            ],
            "description": "Sensitive environment variable policy for this team"
          },
          "hideIpAddresses": {
            "nullable": true,
            "type": "boolean",
            "description": "Indicates if IP addresses should be accessible in observability (o11y) tooling"
          },
          "hideIpAddressesInLogDrains": {
            "nullable": true,
            "type": "boolean",
            "description": "Indicates if IP addresses should be accessible in log drains"
          },
          "ipBuckets": {
            "items": {
              "properties": {
                "bucket": {
                  "type": "string"
                },
                "supportUntil": {
                  "type": "number"
                }
              },
              "required": [
                "bucket"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "id": {
            "type": "string",
            "description": "The Team's unique identifier.",
            "example": "team_nllPyCtREAqxxdyFKbbMDlxd"
          },
          "slug": {
            "type": "string",
            "description": "The Team's slug, which is unique across the Vercel platform.",
            "example": "my-team"
          },
          "name": {
            "nullable": true,
            "type": "string",
            "description": "Name associated with the Team account, or `null` if none has been provided.",
            "example": "My Team"
          },
          "avatar": {
            "nullable": true,
            "type": "string",
            "description": "The ID of the file used as avatar for this Team.",
            "example": "6eb07268bcfadd309905ffb1579354084c24655c"
          },
          "membership": {
            "properties": {
              "uid": {
                "type": "string"
              },
              "entitlements": {
                "items": {
                  "properties": {
                    "entitlement": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "entitlement"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "teamId": {
                "type": "string"
              },
              "confirmed": {
                "type": "boolean"
              },
              "accessRequestedAt": {
                "type": "number"
              },
              "role": {
                "type": "string",
                "enum": [
                  "OWNER",
                  "MEMBER",
                  "DEVELOPER",
                  "SECURITY",
                  "BILLING",
                  "VIEWER",
                  "VIEWER_FOR_PLUS",
                  "CONTRIBUTOR"
                ]
              },
              "teamRoles": {
                "items": {
                  "type": "string",
                  "enum": [
                    "OWNER",
                    "MEMBER",
                    "DEVELOPER",
                    "SECURITY",
                    "BILLING",
                    "VIEWER",
                    "VIEWER_FOR_PLUS",
                    "CONTRIBUTOR"
                  ]
                },
                "type": "array"
              },
              "teamPermissions": {
                "items": {
                  "type": "string",
                  "enum": [
                    "IntegrationManager",
                    "CreateProject",
                    "FullProductionDeployment",
                    "UsageViewer",
                    "EnvVariableManager",
                    "EnvironmentManager",
                    "V0Builder",
                    "V0Chatter",
                    "V0Viewer"
                  ]
                },
                "type": "array"
              },
              "createdAt": {
                "type": "number"
              },
              "created": {
                "type": "number"
              },
              "joinedFrom": {
                "properties": {
                  "origin": {
                    "type": "string",
                    "enum": [
                      "link",
                      "saml",
                      "mail",
                      "import",
                      "teams",
                      "github",
                      "gitlab",
                      "bitbucket",
                      "dsync",
                      "feedback",
                      "organization-teams"
                    ]
                  },
                  "commitId": {
                    "type": "string"
                  },
                  "repoId": {
                    "type": "string"
                  },
                  "repoPath": {
                    "type": "string"
                  },
                  "gitUserId": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "gitUserLogin": {
                    "type": "string"
                  },
                  "ssoUserId": {
                    "type": "string"
                  },
                  "ssoConnectedAt": {
                    "type": "number"
                  },
                  "idpUserId": {
                    "type": "string"
                  },
                  "dsyncUserId": {
                    "type": "string"
                  },
                  "dsyncConnectedAt": {
                    "type": "number"
                  }
                },
                "required": [
                  "origin"
                ],
                "type": "object"
              }
            },
            "required": [
              "confirmed",
              "role",
              "createdAt",
              "created"
            ],
            "type": "object",
            "description": "The membership of the authenticated User in relation to the Team."
          },
          "createdAt": {
            "type": "number",
            "description": "UNIX timestamp (in milliseconds) when the Team was created.",
            "example": 1630748523395
          }
        },
        "required": [
          "creatorId",
          "updatedAt",
          "description",
          "stagingPrefix",
          "id",
          "slug",
          "name",
          "avatar",
          "membership",
          "createdAt"
        ],
        "type": "object",
        "description": "Data representing a Team.",
        "additionalProperties": true
      },
      "TeamLimited": {
        "properties": {
          "limited": {
            "type": "boolean",
            "description": "Property indicating that this Team data contains only limited information, due to the authentication token missing privileges to read the full Team data or due to team having MFA enforced and the user not having MFA enabled. Re-login with the Team's configured SAML Single Sign-On provider in order to upgrade the authentication token with the necessary privileges."
          },
          "limitedBy": {
            "items": {
              "type": "string",
              "enum": [
                "scope",
                "mfa"
              ]
            },
            "type": "array"
          },
          "saml": {
            "properties": {
              "connection": {
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The Identity Provider \"type\", for example Okta.",
                    "example": "OktaSAML"
                  },
                  "status": {
                    "type": "string",
                    "description": "Current status of the connection.",
                    "example": "linked"
                  },
                  "state": {
                    "type": "string",
                    "description": "Current state of the connection.",
                    "example": "active"
                  },
                  "connectedAt": {
                    "type": "number",
                    "description": "Timestamp (in milliseconds) of when the configuration was connected.",
                    "example": 1611796915677
                  },
                  "lastReceivedWebhookEvent": {
                    "type": "number",
                    "description": "Timestamp (in milliseconds) of when the last webhook event was received from WorkOS.",
                    "example": 1611796915677
                  }
                },
                "required": [
                  "type",
                  "status",
                  "state",
                  "connectedAt"
                ],
                "type": "object",
                "description": "Information for the SAML Single Sign-On configuration."
              },
              "directory": {
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The Identity Provider \"type\", for example Okta.",
                    "example": "OktaSAML"
                  },
                  "state": {
                    "type": "string",
                    "description": "Current state of the connection.",
                    "example": "active"
                  },
                  "connectedAt": {
                    "type": "number",
                    "description": "Timestamp (in milliseconds) of when the configuration was connected.",
                    "example": 1611796915677
                  },
                  "lastReceivedWebhookEvent": {
                    "type": "number",
                    "description": "Timestamp (in milliseconds) of when the last webhook event was received from WorkOS.",
                    "example": 1611796915677
                  }
                },
                "required": [
                  "type",
                  "state",
                  "connectedAt"
                ],
                "type": "object",
                "description": "Information for the Directory Sync configuration."
              },
              "enforced": {
                "type": "boolean",
                "description": "When `true`, interactions with the Team **must** be done with an authentication token that has been authenticated with the Team's SAML Single Sign-On provider."
              }
            },
            "required": [
              "enforced"
            ],
            "type": "object",
            "description": "When \"Single Sign-On (SAML)\" is configured, this object contains information that allows the client-side to identify whether or not this Team has SAML enforced."
          },
          "id": {
            "type": "string",
            "description": "The Team's unique identifier.",
            "example": "team_nllPyCtREAqxxdyFKbbMDlxd"
          },
          "slug": {
            "type": "string",
            "description": "The Team's slug, which is unique across the Vercel platform.",
            "example": "my-team"
          },
          "name": {
            "nullable": true,
            "type": "string",
            "description": "Name associated with the Team account, or `null` if none has been provided.",
            "example": "My Team"
          },
          "avatar": {
            "nullable": true,
            "type": "string",
            "description": "The ID of the file used as avatar for this Team.",
            "example": "6eb07268bcfadd309905ffb1579354084c24655c"
          },
          "membership": {
            "properties": {
              "uid": {
                "type": "string"
              },
              "entitlements": {
                "items": {
                  "properties": {
                    "entitlement": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "entitlement"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "teamId": {
                "type": "string"
              },
              "confirmed": {
                "type": "boolean"
              },
              "accessRequestedAt": {
                "type": "number"
              },
              "role": {
                "type": "string",
                "enum": [
                  "OWNER",
                  "MEMBER",
                  "DEVELOPER",
                  "SECURITY",
                  "BILLING",
                  "VIEWER",
                  "VIEWER_FOR_PLUS",
                  "CONTRIBUTOR"
                ]
              },
              "teamRoles": {
                "items": {
                  "type": "string",
                  "enum": [
                    "OWNER",
                    "MEMBER",
                    "DEVELOPER",
                    "SECURITY",
                    "BILLING",
                    "VIEWER",
                    "VIEWER_FOR_PLUS",
                    "CONTRIBUTOR"
                  ]
                },
                "type": "array"
              },
              "teamPermissions": {
                "items": {
                  "type": "string",
                  "enum": [
                    "IntegrationManager",
                    "CreateProject",
                    "FullProductionDeployment",
                    "UsageViewer",
                    "EnvVariableManager",
                    "EnvironmentManager",
                    "V0Builder",
                    "V0Chatter",
                    "V0Viewer"
                  ]
                },
                "type": "array"
              },
              "createdAt": {
                "type": "number"
              },
              "created": {
                "type": "number"
              },
              "joinedFrom": {
                "properties": {
                  "origin": {
                    "type": "string",
                    "enum": [
                      "link",
                      "saml",
                      "mail",
                      "import",
                      "teams",
                      "github",
                      "gitlab",
                      "bitbucket",
                      "dsync",
                      "feedback",
                      "organization-teams"
                    ]
                  },
                  "commitId": {
                    "type": "string"
                  },
                  "repoId": {
                    "type": "string"
                  },
                  "repoPath": {
                    "type": "string"
                  },
                  "gitUserId": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "gitUserLogin": {
                    "type": "string"
                  },
                  "ssoUserId": {
                    "type": "string"
                  },
                  "ssoConnectedAt": {
                    "type": "number"
                  },
                  "idpUserId": {
                    "type": "string"
                  },
                  "dsyncUserId": {
                    "type": "string"
                  },
                  "dsyncConnectedAt": {
                    "type": "number"
                  }
                },
                "required": [
                  "origin"
                ],
                "type": "object"
              }
            },
            "required": [
              "confirmed",
              "role",
              "createdAt",
              "created"
            ],
            "type": "object",
            "description": "The membership of the authenticated User in relation to the Team."
          },
          "createdAt": {
            "type": "number",
            "description": "UNIX timestamp (in milliseconds) when the Team was created.",
            "example": 1630748523395
          }
        },
        "required": [
          "limited",
          "limitedBy",
          "id",
          "slug",
          "name",
          "avatar",
          "membership",
          "createdAt"
        ],
        "type": "object",
        "description": "A limited form of data representing a Team, due to the authentication token missing privileges to read the full Team data."
      },
      "AuthToken": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the token.",
            "example": "5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391"
          },
          "name": {
            "type": "string",
            "description": "The human-readable name of the token."
          },
          "type": {
            "type": "string",
            "description": "The type of the token.",
            "example": "oauth2-token"
          },
          "origin": {
            "type": "string",
            "description": "The origin of how the token was created.",
            "example": "github"
          },
          "scopes": {
            "items": {
              "oneOf": [
                {
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "user"
                      ]
                    },
                    "sudo": {
                      "properties": {
                        "origin": {
                          "type": "string",
                          "enum": [
                            "totp",
                            "webauthn",
                            "recovery-code"
                          ],
                          "description": "Possible multi-factor origins"
                        },
                        "expiresAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "origin",
                        "expiresAt"
                      ],
                      "type": "object"
                    },
                    "origin": {
                      "type": "string",
                      "enum": [
                        "saml",
                        "github",
                        "gitlab",
                        "bitbucket",
                        "email",
                        "manual",
                        "passkey",
                        "otp",
                        "sms",
                        "invite",
                        "google",
                        "app"
                      ]
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "expiresAt": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "type",
                    "createdAt"
                  ],
                  "type": "object",
                  "description": "The access scopes granted to the token."
                },
                {
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "team"
                      ]
                    },
                    "teamId": {
                      "type": "string"
                    },
                    "origin": {
                      "type": "string",
                      "enum": [
                        "saml",
                        "github",
                        "gitlab",
                        "bitbucket",
                        "email",
                        "manual",
                        "passkey",
                        "otp",
                        "sms",
                        "invite",
                        "google",
                        "app"
                      ]
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "expiresAt": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "type",
                    "teamId",
                    "createdAt"
                  ],
                  "type": "object",
                  "description": "The access scopes granted to the token."
                }
              ]
            },
            "type": "array",
            "description": "The access scopes granted to the token."
          },
          "expiresAt": {
            "type": "number",
            "description": "Timestamp (in milliseconds) of when the token expires.",
            "example": 1632816536002
          },
          "activeAt": {
            "type": "number",
            "description": "Timestamp (in milliseconds) of when the token was most recently used.",
            "example": 1632816536002
          },
          "createdAt": {
            "type": "number",
            "description": "Timestamp (in milliseconds) of when the token was created.",
            "example": 1632816536002
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "activeAt",
          "createdAt"
        ],
        "type": "object",
        "description": "Authentication token metadata."
      },
      "AuthUser": {
        "properties": {
          "createdAt": {
            "type": "number",
            "description": "UNIX timestamp (in milliseconds) when the User account was created.",
            "example": 1630748523395
          },
          "softBlock": {
            "nullable": true,
            "properties": {
              "blockedAt": {
                "type": "number"
              },
              "reason": {
                "type": "string",
                "enum": [
                  "SUBSCRIPTION_CANCELED",
                  "SUBSCRIPTION_EXPIRED",
                  "UNPAID_INVOICE",
                  "ENTERPRISE_TRIAL_ENDED",
                  "FAIR_USE_LIMITS_EXCEEDED",
                  "BLOCKED_FOR_PLATFORM_ABUSE"
                ]
              },
              "blockedDueToOverageType": {
                "type": "string",
                "enum": [
                  "analyticsUsage",
                  "artifacts",
                  "bandwidth",
                  "blobTotalAdvancedRequests",
                  "blobTotalAvgSizeInBytes",
                  "blobTotalGetResponseObjectSizeInBytes",
                  "blobTotalSimpleRequests",
                  "connectDataTransfer",
                  "dataCacheRead",
                  "dataCacheWrite",
                  "edgeConfigRead",
                  "edgeConfigWrite",
                  "edgeFunctionExecutionUnits",
                  "edgeMiddlewareInvocations",
                  "edgeRequestAdditionalCpuDuration",
                  "edgeRequest",
                  "elasticConcurrencyBuildSlots",
                  "fastDataTransfer",
                  "fastOriginTransfer",
                  "fluidCpuDuration",
                  "fluidDuration",
                  "functionDuration",
                  "functionInvocation",
                  "imageOptimizationCacheRead",
                  "imageOptimizationCacheWrite",
                  "imageOptimizationTransformation",
                  "logDrainsVolume",
                  "monitoringMetric",
                  "blobDataTransfer",
                  "observabilityEvent",
                  "onDemandConcurrencyMinutes",
                  "runtimeCacheRead",
                  "runtimeCacheWrite",
                  "serverlessFunctionExecution",
                  "sourceImages",
                  "wafOwaspExcessBytes",
                  "wafOwaspRequests",
                  "wafRateLimitRequest",
                  "webAnalyticsEvent"
                ]
              }
            },
            "required": [
              "blockedAt",
              "reason"
            ],
            "type": "object",
            "description": "When the User account has been \"soft blocked\", this property will contain the date when the restriction was enacted, and the identifier for why."
          },
          "billing": {
            "nullable": true,
            "type": "object",
            "description": "An object containing billing infomation associated with the User account."
          },
          "resourceConfig": {
            "properties": {
              "nodeType": {
                "type": "string",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "concurrentBuilds": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "elasticConcurrencyEnabled": {
                "type": "boolean",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "buildEntitlements": {
                "properties": {
                  "enhancedBuilds": {
                    "type": "boolean",
                    "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
                  }
                },
                "type": "object",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "awsAccountType": {
                "type": "string",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "awsAccountIds": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "cfZoneName": {
                "type": "string",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "imageOptimizationType": {
                "type": "string",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "edgeConfigs": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "edgeConfigSize": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "edgeFunctionMaxSizeBytes": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "edgeFunctionExecutionTimeoutMs": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "serverlessFunctionMaxMemorySize": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "kvDatabases": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "postgresDatabases": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "blobStores": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "integrationStores": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "cronJobs": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "cronJobsPerProject": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "microfrontendGroupsPerTeam": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "microfrontendProjectsPerGroup": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "flagsExplorerOverridesThreshold": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "flagsExplorerUnlimitedOverrides": {
                "type": "boolean",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "customEnvironmentsPerProject": {
                "type": "number",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "buildMachine": {
                "properties": {
                  "purchaseType": {
                    "type": "string",
                    "enum": [
                      "enhanced",
                      "turbo"
                    ],
                    "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
                  },
                  "isDefaultBuildMachine": {
                    "type": "boolean",
                    "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
                  },
                  "cores": {
                    "type": "number",
                    "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
                  },
                  "memory": {
                    "type": "number",
                    "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
                  }
                },
                "type": "object",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              },
              "security": {
                "properties": {
                  "customRules": {
                    "type": "number",
                    "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
                  },
                  "ipBlocks": {
                    "type": "number",
                    "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
                  },
                  "ipBypass": {
                    "type": "number",
                    "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
                  },
                  "rateLimit": {
                    "type": "number",
                    "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
                  }
                },
                "type": "object",
                "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
              }
            },
            "type": "object",
            "description": "An object containing infomation related to the amount of platform resources may be allocated to the User account."
          },
          "stagingPrefix": {
            "type": "string",
            "description": "Prefix that will be used in the URL of \"Preview\" deployments created by the User account."
          },
          "activeDashboardViews": {
            "items": {
              "properties": {
                "scopeId": {
                  "type": "string"
                },
                "viewPreference": {
                  "nullable": true,
                  "type": "string",
                  "enum": [
                    "list",
                    "cards"
                  ]
                },
                "favoritesViewPreference": {
                  "nullable": true,
                  "type": "string",
                  "enum": [
                    "open",
                    "closed"
                  ]
                },
                "recentsViewPreference": {
                  "nullable": true,
                  "type": "string",
                  "enum": [
                    "open",
                    "closed"
                  ]
                }
              },
              "required": [
                "scopeId"
              ],
              "type": "object",
              "description": "set of dashboard view preferences (cards or list) per scopeId"
            },
            "type": "array",
            "description": "set of dashboard view preferences (cards or list) per scopeId"
          },
          "importFlowGitNamespace": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "importFlowGitNamespaceId": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "importFlowGitProvider": {
            "nullable": true,
            "type": "string",
            "enum": [
              "gitlab",
              "bitbucket",
              "github",
              "github-limited",
              "github-custom-host"
            ]
          },
          "preferredScopesAndGitNamespaces": {
            "items": {
              "properties": {
                "scopeId": {
                  "type": "string"
                },
                "gitNamespaceId": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                }
              },
              "required": [
                "scopeId",
                "gitNamespaceId"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "dismissedToasts": {
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "dismissals": {
                  "items": {
                    "properties": {
                      "scopeId": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "scopeId",
                      "createdAt"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "name",
                "dismissals"
              ],
              "type": "object",
              "description": "A record of when, under a certain scopeId, a toast was dismissed"
            },
            "type": "array",
            "description": "A record of when, under a certain scopeId, a toast was dismissed"
          },
          "favoriteProjectsAndSpaces": {
            "items": {
              "properties": {
                "teamId": {
                  "type": "string"
                },
                "projectId": {
                  "type": "string"
                }
              },
              "required": [
                "teamId",
                "projectId"
              ],
              "type": "object",
              "description": "A list of projects and spaces across teams that a user has marked as a favorite."
            },
            "type": "array",
            "description": "A list of projects and spaces across teams that a user has marked as a favorite."
          },
          "hasTrialAvailable": {
            "type": "boolean",
            "description": "Whether the user has a trial available for a paid plan subscription."
          },
          "remoteCaching": {
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            },
            "type": "object",
            "description": "remote caching settings"
          },
          "dataCache": {
            "properties": {
              "excessBillingEnabled": {
                "type": "boolean"
              }
            },
            "type": "object",
            "description": "data cache settings"
          },
          "featureBlocks": {
            "properties": {
              "webAnalytics": {
                "properties": {
                  "blockedFrom": {
                    "type": "number"
                  },
                  "blockedUntil": {
                    "type": "number"
                  },
                  "isCurrentlyBlocked": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "isCurrentlyBlocked"
                ],
                "type": "object"
              }
            },
            "type": "object",
            "description": "Feature blocks for the user"
          },
          "id": {
            "type": "string",
            "description": "The User's unique identifier.",
            "example": "AEIIDYVk59zbFF2Sxfyxxmua"
          },
          "email": {
            "type": "string",
            "description": "Email address associated with the User account.",
            "example": "me@example.com"
          },
          "name": {
            "nullable": true,
            "type": "string",
            "description": "Name associated with the User account, or `null` if none has been provided.",
            "example": "John Doe"
          },
          "username": {
            "type": "string",
            "description": "Unique username associated with the User account.",
            "example": "jdoe"
          },
          "avatar": {
            "nullable": true,
            "type": "string",
            "description": "SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.",
            "example": "22cb30c85ff45ac4c72de8981500006b28114aa1"
          },
          "defaultTeamId": {
            "nullable": true,
            "type": "string",
            "description": "The user's default team."
          }
        },
        "required": [
          "createdAt",
          "softBlock",
          "billing",
          "resourceConfig",
          "stagingPrefix",
          "hasTrialAvailable",
          "id",
          "email",
          "name",
          "username",
          "avatar",
          "defaultTeamId"
        ],
        "type": "object",
        "description": "Data for the currently authenticated User."
      },
      "AuthUserLimited": {
        "properties": {
          "limited": {
            "type": "boolean",
            "description": "Property indicating that this User data contains only limited information, due to the authentication token missing privileges to read the full User data. Re-login with email, GitHub, GitLab or Bitbucket in order to upgrade the authentication token with the necessary privileges."
          },
          "id": {
            "type": "string",
            "description": "The User's unique identifier.",
            "example": "AEIIDYVk59zbFF2Sxfyxxmua"
          },
          "email": {
            "type": "string",
            "description": "Email address associated with the User account.",
            "example": "me@example.com"
          },
          "name": {
            "nullable": true,
            "type": "string",
            "description": "Name associated with the User account, or `null` if none has been provided.",
            "example": "John Doe"
          },
          "username": {
            "type": "string",
            "description": "Unique username associated with the User account.",
            "example": "jdoe"
          },
          "avatar": {
            "nullable": true,
            "type": "string",
            "description": "SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.",
            "example": "22cb30c85ff45ac4c72de8981500006b28114aa1"
          },
          "defaultTeamId": {
            "nullable": true,
            "type": "string",
            "description": "The user's default team."
          }
        },
        "required": [
          "limited",
          "id",
          "email",
          "name",
          "username",
          "avatar",
          "defaultTeamId"
        ],
        "type": "object",
        "description": "A limited form of data for the currently authenticated User, due to the authentication token missing privileges to read the full User data."
      },
      "FileTree": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the file tree entry",
            "example": "my-file.json"
          },
          "type": {
            "type": "string",
            "enum": [
              "directory",
              "file",
              "symlink",
              "lambda",
              "middleware",
              "invalid"
            ],
            "description": "String indicating the type of file tree entry.",
            "example": "file"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of the file (only valid for the `file` type)",
            "example": "2d4aad419917f15b1146e9e03ddc9bb31747e4d0"
          },
          "children": {
            "items": {
              "$ref": "#/components/schemas/FileTree"
            },
            "type": "array",
            "description": "The list of children files of the directory (only valid for the `directory` type)"
          },
          "contentType": {
            "type": "string",
            "description": "The content-type of the file (only valid for the `file` type)",
            "example": "application/json"
          },
          "mode": {
            "type": "number",
            "description": "The file \"mode\" indicating file type and permissions."
          },
          "symlink": {
            "type": "string",
            "description": "Not currently used. See `file-list-to-tree.ts`."
          }
        },
        "required": [
          "name",
          "type",
          "mode"
        ],
        "type": "object",
        "description": "A deployment file tree entry"
      },
      "VercelBaseError": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "VercelForbiddenError": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VercelBaseError"
              },
              {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "VercelNotFoundError": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VercelBaseError"
              },
              {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "VercelBadRequestError": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VercelBaseError"
              },
              {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "VercelRateLimitError": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VercelBaseError"
              },
              {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "limit": {
                    "$ref": "#/components/schemas/RateLimitNotice"
                  }
                }
              }
            ]
          }
        }
      },
      "RateLimitNotice": {
        "type": "object",
        "required": [
          "remaining",
          "reset",
          "resetMs",
          "total"
        ],
        "properties": {
          "remaining": {
            "type": "integer",
            "minimum": 0
          },
          "reset": {
            "type": "integer",
            "minimum": 0
          },
          "resetMs": {
            "type": "integer",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "minimum": 0
          }
        }
      }
    },
    "securitySchemes": {
      "bearerToken": {
        "type": "http",
        "description": "Default authentication mechanism",
        "scheme": "bearer"
      },
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.vercel.com/oauth/authorize",
            "tokenUrl": "https://api.vercel.com/oauth/access_token",
            "scopes": {}
          }
        }
      }
    }
  }
}