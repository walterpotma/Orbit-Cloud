CREATE DATABASE IF NOT EXISTS orbit;

CREATE TYPE status_enum AS ENUM ('active', 'canceled', 'pending', 'past_due');
CREATE TYPE payment_status_enum AS ENUM ('completed', 'pending', 'failed');
CREATE TYPE payment_method_enum AS ENUM ('credit_card', 'debit_card', 'pix');

CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.UpdatedAt = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE IF NOT EXISTS organization(
    Id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    Name VARCHAR(255) NOT NULL,
    Description VARCHAR(255),
    CreatedAt TIMESTAMPTZ NOT NULL DEFAULT now(),
    UpdatedAt TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON organization
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TABLE IF NOT EXISTS account(
    Id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    GithubId INT UNIQUE,
    Name VARCHAR(255) NOT NULL,
    Email VARCHAR(255) NOT NULL UNIQUE,
    PasswordHash CHAR(60) NOT NULL,
    FidelityPoints DECIMAL(10,2) NOT NULL DEFAULT 0,
    CreatedAt TIMESTAMPTZ NOT NULL DEFAULT now(),
    UpdatedAt TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON account
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TABLE IF NOT EXISTS role(
    Id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    AccountId INT NOT NULL,
    OrganizationId INT NOT NULL,
    Access JSONB,
    
    CONSTRAINT fk_role_account FOREIGN KEY (AccountId) REFERENCES account(Id) ON DELETE CASCADE,
    CONSTRAINT fk_role_organization FOREIGN KEY (OrganizationId) REFERENCES organization(Id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS plan(
    Id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    Name VARCHAR(255) NOT NULL UNIQUE,
    Price DECIMAL(10,2) NOT NULL,
    ResourceLimits JSONB
);

CREATE TABLE IF NOT EXISTS subscription(
    Id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    AccountId INT NOT NULL,
    PlanId INT NOT NULL,
    Status status_enum NOT NULL DEFAULT 'pending',
    CurrentPeriodStartsAt TIMESTAMPTZ,
    CurrentPeriodEndsAt TIMESTAMPTZ,
    CanceledAt TIMESTAMPTZ,
    CreatedAt TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT fk_subscription_account FOREIGN KEY (AccountId) REFERENCES account(Id) ON DELETE RESTRICT,
    CONSTRAINT fk_subscription_plan FOREIGN KEY (PlanId) REFERENCES plan(Id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS transaction(
    Id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    SubscriptionId INT NOT NULL,
    PaymentMethodId INT NOT NULL,
    Amount DECIMAL(10,2) NOT NULL,
    Status payment_status_enum NOT NULL DEFAULT 'pending',
    CreatedAt TIMESTAMPTZ NOT NULL DEFAULT now(),
    GatewayTransactionId VARCHAR(255),
    
    CONSTRAINT fk_transaction_subscription FOREIGN KEY (SubscriptionId) REFERENCES subscription(Id) ON DELETE RESTRICT,
    CONSTRAINT fk_transaction_payment_method FOREIGN KEY (PaymentMethodId) REFERENCES payment_method(Id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS organization(
    Id INT NOT NULL AUTO_INCREMENT,
    Name VARCHAR(255) NOT NULL,
    Description VARCHAR(255) NULL,
    CreatedAt DATETIME NOT NULL,
    UpdatedAt DATETIME NOT NULL,
    PRIMARY KEY (Id)
);

CREATE INDEX IF NOT EXISTS idx_role_account_id ON role(AccountId);
CREATE INDEX IF NOT EXISTS idx_role_organization_id ON role(OrganizationId);
CREATE INDEX IF NOT EXISTS idx_payment_method_account_id ON payment_method(AccountId);
CREATE INDEX IF NOT EXISTS idx_subscription_account_id ON subscription(AccountId);
CREATE INDEX IF NOT EXISTS idx_subscription_plan_id ON subscription(PlanId);
CREATE INDEX IF NOT EXISTS idx_transaction_subscription_id ON transaction(SubscriptionId);
CREATE INDEX IF NOT EXISTS idx_transaction_payment_method_id ON transaction(PaymentMethodId);